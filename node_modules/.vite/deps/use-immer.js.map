{
  "version": 3,
  "sources": ["../../.pnpm/use-immer@0.6.0_immer@9.0.12+react@18.0.0/node_modules/use-immer/src/index.ts"],
  "sourcesContent": ["import produce, { Draft, nothing, freeze } from \"immer\";\nimport { useState, useReducer, useCallback, useMemo, Dispatch } from \"react\";\n\nexport type Reducer<S = any, A = any> = (\n  draftState: Draft<S>,\n  action: A\n) => void | (S extends undefined ? typeof nothing : S);\nexport type DraftFunction<S> = (draft: Draft<S>) => void;\nexport type Updater<S> = (arg: S | DraftFunction<S>) => void;\nexport type ImmerHook<S> = [S, Updater<S>];\nexport function useImmer<S = any>(initialValue: S | (() => S)): ImmerHook<S>;\n\nexport function useImmer(initialValue: any) {\n  const [val, updateValue] = useState(() =>\n    freeze(\n      typeof initialValue === \"function\" ? initialValue() : initialValue,\n      true\n    )\n  );\n  return [\n    val,\n    useCallback((updater) => {\n      if (typeof updater === \"function\") updateValue(produce(updater));\n      else updateValue(freeze(updater));\n    }, []),\n  ];\n}\n\nexport function useImmerReducer<S = any, A = any>(\n  reducer: Reducer<S, A>,\n  initialState: S,\n  initialAction?: (initial: any) => S\n): [S, Dispatch<A>];\nexport function useImmerReducer(\n  reducer: any,\n  initialState: any,\n  initialAction: any\n) {\n  const cachedReducer = useMemo(() => produce(reducer), [reducer]);\n  return useReducer(cachedReducer, initialState as any, initialAction);\n}\n"],
  "mappings": ";;;;;;;;;;;;;WAYyB,IAAA;AAAA,MAAA,KACI,2BAAS,WAAA;AAAA,WAClC,EAC0B,AAAA,OAAjB,MAAiB,aAAa,GAAA,IAAiB,IAAA,IACtD;EAAA,CAAA,GAHQ,KAAA,GAAA;AAMZ,SAAO,CAAA,GAAA,IAEL,8BAAY,SAAC,IAAA;AACwB,OAAZ,AAAA,OAAZ,MAAY,aAAwB,kBAAQ,EAAA,IACtC,EAAO,EAAA,CAAA;EAAA,GACvB,CAAA,CAAA,CAAA;AAAA;AAAA,WAUL,GACA,IACA,IAAA;AAEA,MAAM,KAAgB,0BAAQ,WAAA;AAAA,WAAM,kBAAQ,CAAA;EAAA,GAAU,CAAC,CAAA,CAAA;AACvD,SAAO,6BAAW,IAAe,IAAqB,EAAA;AAAA;",
  "names": []
}
