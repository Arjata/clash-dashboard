{"version":3,"file":"core.js","sources":["../../src/core.tsx"],"sourcesContent":["import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  flexRender,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  Renderable,\n  Please_use_the_create_table_column_utilities_to_define_columns,\n  PartialGenerics,\n} from './types'\n\nimport { Visibility } from './features/Visibility'\nimport { Ordering } from './features/Ordering'\nimport { Pinning } from './features/Pinning'\nimport { Headers } from './features/Headers'\nimport { Filters } from './features/Filters'\nimport { Sorting } from './features/Sorting'\nimport { Grouping, GroupingCell } from './features/Grouping'\nimport { Expanding } from './features/Expanding'\nimport { ColumnSizing, defaultColumnSizing } from './features/ColumnSizing'\nimport { Pagination } from './features/Pagination'\nimport { RowSelection } from './features/RowSelection'\nimport { RowModel } from '.'\n\nconst features = [\n  Visibility,\n  Ordering,\n  Pinning,\n  Headers,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  ColumnSizing,\n  Pagination,\n  RowSelection,\n]\n\nexport type CoreOptions<TGenerics extends PartialGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends PartialGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getColumnWidth: (columnId: string) => number\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n}\n\nexport type CoreRow<TGenerics extends PartialGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  leafRows: Row<TGenerics>[]\n  subRows: Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends PartialGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  header?:\n    | string\n    | Renderable<{\n        instance: TableInstance<TGenerics>\n        header: Header<TGenerics>\n        column: Column<TGenerics>\n      }>\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n  columns?: ColumnDef<TGenerics>[]\n  footer?: Renderable<{\n    instance: TableInstance<TGenerics>\n    header: Header<TGenerics>\n    column: Column<TGenerics>\n  }>\n  cell?: Renderable<{\n    instance: TableInstance<TGenerics>\n    row: Row<TGenerics>\n    column: Column<TGenerics>\n    cell: Cell<TGenerics>\n    value: TGenerics['Value']\n  }>\n  defaultIsVisible?: boolean\n  [Please_use_the_create_table_column_utilities_to_define_columns]: true\n}\n\nexport type CoreColumn<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends PartialGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating React Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  let listeners: (() => void)[] = []\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, (feature as any).getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, (feature as any).getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (columnDef, depth: number, parent) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumnSizing,\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(\n          obj,\n          (feature as any).createColumn?.(column, instance)\n        )\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[React Table] Column with id ${columnId} does not exist.`\n          )\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    getColumnWidth: (columnId: string) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const columnSize = instance.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.minWidth ?? defaultColumnSizing.minWidth,\n          columnSize ?? column.width ?? defaultColumnSizing.width\n        ),\n        column.maxWidth ?? defaultColumnSizing.maxWidth\n      )\n    },\n\n    createCell: (row, column, value) => {\n      const cell: Cell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          flexRender(column.cell, { instance, column, row, cell, value }),\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          (feature as any).createCell?.(\n            cell as Cell<TGenerics> & GroupingCell,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        leafRows: [],\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, (feature as any).createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              // Keep the new subRows array on the row\n              row.subRows = subRows\n              row.leafRows = flattenBy(subRows, d => d.leafRows)\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyRowSelectionReset()\n          instance._notifyFiltersReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[React Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[React Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n"],"names":["features","Visibility","Ordering","Pinning","Headers","Filters","Sorting","Grouping","Expanding","ColumnSizing","Pagination","RowSelection","createTableInstance","options","debugAll","debugTable","console","info","instance","defaultOptions","reduce","obj","feature","Object","assign","getDefaultOptions","buildOptions","initialState","getInitialState","finalInstance","getInstance","reset","setState","setOptions","updater","functionalUpdate","getRowId","_","index","parent","id","join","getState","state","onStateChange","getDefaultColumn","memo","defaultColumn","header","props","column","footer","cell","value","toString","debug","debugColumns","key","getColumnDefs","columns","createColumn","columnDef","depth","accessorKey","undefined","accessorFn","originalRow","process","env","NODE_ENV","Error","defaultColumnSizing","getWidth","getColumnWidth","getFlatColumns","flatMap","d","getLeafColumns","getOrderColumnsFn","orderColumns","length","leafColumns","getAllColumns","columnDefs","recurseColumns","map","getAllFlatColumns","allColumns","getAllFlatColumnsById","flatColumns","acc","getAllLeafColumns","getColumn","columnId","warn","columnSize","columnSizing","Math","min","max","minWidth","width","maxWidth","createCell","row","rowId","getCellProps","userProps","renderCell","flexRender","forEach","createRow","original","rowIndex","values","subRows","leafRows","getRowProps","getAllCells","getAllCellsByColumnId","debugRows","allCells","i","getCoreRowModel","data","rows","flatRows","rowsById","accessRow","parentRows","push","getSubRows","originalSubRows","flattenBy","onChange","_notifyRowSelectionReset","_notifyFiltersReset","getRowModel","getPaginationRowModel","getRow","getCell","getTableProps","propGetter","role","getTableBodyProps","getTableWidth","getHeaderGroups","headers","sum","getLeftTableWidth","getLeftHeaderGroups","getCenterTableWidth","getCenterHeaderGroups","getRightTableWidth","getRightHeaderGroups"],"mappings":"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"}