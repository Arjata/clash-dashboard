{"version":3,"file":"globalFilterRowsFn.js","sources":["../../../src/utils/globalFilterRowsFn.ts"],"sourcesContent":["import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function globalFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const globalFilter = instance.getState().globalFilter\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n"],"names":["globalFilterRowsFn","instance","rowModel","globalFilter","getState","newFilteredFlatRows","newFilteredRowsById","filterFromChildrenUp","options","filterFn","getGlobalFilterFn","process","env","NODE_ENV","console","warn","filterableColumns","getAllLeafColumns","filter","column","getCanGlobalFilter","filterableColumnIds","map","d","id","recurseFilterRows","rowsToFilter","depth","row","subRows","length","forEach","push","rows","flatRows","rowsById"],"mappings":"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"}