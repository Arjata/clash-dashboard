{"version":3,"file":"types.js","sources":["../../src/types.ts"],"sourcesContent":["import React from 'react'\nimport {\n  CoreColumn,\n  CoreColumnDef,\n  CoreOptions,\n  CoreRow,\n  TableCore,\n} from './core'\nimport {\n  VisibilityInstance,\n  VisibilityTableState,\n  VisibilityColumn as ColumnVisibilityColumn,\n  VisibilityOptions,\n  VisibilityColumnDef,\n  VisibilityRow,\n} from './features/Visibility'\nimport {\n  ColumnOrderInstance,\n  ColumnOrderOptions,\n  ColumnOrderTableState,\n} from './features/Ordering'\nimport {\n  ColumnPinningColumn,\n  ColumnPinningColumnDef,\n  ColumnPinningInstance,\n  ColumnPinningOptions,\n  ColumnPinningTableState,\n} from './features/Pinning'\nimport { HeadersInstance, HeadersRow } from './features/Headers'\nimport {\n  FiltersColumn,\n  FiltersColumnDef,\n  FiltersInstance,\n  FiltersOptions,\n  FiltersTableState,\n} from './features/Filters'\nimport {\n  SortingColumn,\n  SortingColumnDef,\n  SortingInstance,\n  SortingOptions,\n  SortingTableState,\n} from './features/Sorting'\nimport {\n  GroupingColumn,\n  GroupingColumnDef,\n  GroupingInstance,\n  GroupingOptions,\n  GroupingRow,\n  GroupingTableState,\n} from './features/Grouping'\nimport {\n  ExpandedInstance,\n  ExpandedOptions,\n  ExpandedTableState,\n  ExpandedRow,\n} from './features/Expanding'\nimport { Overwrite } from './utils'\nimport {\n  ColumnSizingColumn,\n  ColumnSizingColumnDef,\n  ColumnSizingHeader,\n  ColumnSizingInstance,\n  ColumnSizingOptions,\n  ColumnSizingTableState,\n} from './features/ColumnSizing'\nimport {\n  PaginationInstance,\n  PaginationOptions,\n  PaginationTableState,\n} from './features/Pagination'\nimport {\n  RowSelectionInstance,\n  RowSelectionOptions,\n  RowSelectionRow,\n  RowSelectionTableState,\n} from './features/RowSelection'\n\n// declare global {\n//   const process.env.NODE_ENV !== 'production': boolean\n// }\n\nexport type DefaultGenerics = {\n  Row: unknown\n  Value: unknown\n  FilterFns: object\n  SortingFns: object\n  AggregationFns: object\n}\n\nexport type PartialGenerics = Partial<DefaultGenerics>\n\nexport type TableInstance<TGenerics extends PartialGenerics> =\n  TableCore<TGenerics> &\n    VisibilityInstance<TGenerics> &\n    ColumnOrderInstance<TGenerics> &\n    ColumnPinningInstance<TGenerics> &\n    HeadersInstance<TGenerics> &\n    FiltersInstance<TGenerics> &\n    SortingInstance<TGenerics> &\n    GroupingInstance<TGenerics> &\n    ColumnSizingInstance<TGenerics> &\n    ExpandedInstance<TGenerics> &\n    PaginationInstance<TGenerics> &\n    RowSelectionInstance<TGenerics>\n\nexport type Renderable<TProps> =\n  | React.ReactNode\n  | React.FunctionComponent<TProps>\n  | React.Component<TProps>\n\n//\n\nexport type Options<TGenerics extends PartialGenerics> =\n  CoreOptions<TGenerics> &\n    VisibilityOptions &\n    ColumnOrderOptions &\n    ColumnPinningOptions &\n    FiltersOptions<TGenerics> &\n    SortingOptions<TGenerics> &\n    GroupingOptions<TGenerics> &\n    ExpandedOptions<TGenerics> &\n    ColumnSizingOptions &\n    PaginationOptions<TGenerics> &\n    RowSelectionOptions<TGenerics>\n\nexport type Updater<T> = T | ((old: T) => T)\nexport type OnChangeFn<T> = (updaterOrValue: Updater<T>, value: T) => void\n\nexport type TableState = VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n\nexport type Row<TGenerics extends PartialGenerics> = CoreRow<TGenerics> &\n  VisibilityRow<TGenerics> &\n  HeadersRow<TGenerics> &\n  GroupingRow &\n  RowSelectionRow &\n  ExpandedRow\n\nexport type RowValues = {\n  [key: string]: any\n}\n\nexport type RowModel<TGenerics extends PartialGenerics> = {\n  rows: Row<TGenerics>[]\n  flatRows: Row<TGenerics>[]\n  rowsById: Record<string, Row<TGenerics>>\n}\n\nexport type AccessorFn<TData> = (originalRow: TData, index: number) => any\n\nexport const Please_use_the_create_table_column_utilities_to_define_columns: unique symbol =\n  Symbol()\n\nexport type _NonGenerated<T> = Overwrite<\n  T,\n  {\n    [Please_use_the_create_table_column_utilities_to_define_columns]?: never\n  }\n>\n\nexport type ColumnDef<TGenerics extends PartialGenerics> =\n  CoreColumnDef<TGenerics> &\n    VisibilityColumnDef &\n    ColumnPinningColumnDef &\n    FiltersColumnDef<TGenerics> &\n    SortingColumnDef<TGenerics> &\n    GroupingColumnDef<TGenerics> &\n    ColumnSizingColumnDef\n\nexport type Column<TGenerics extends PartialGenerics> = ColumnDef<TGenerics> &\n  CoreColumn<TGenerics> &\n  ColumnVisibilityColumn &\n  ColumnPinningColumn &\n  FiltersColumn<TGenerics> &\n  SortingColumn<TGenerics> &\n  GroupingColumn<TGenerics> &\n  ColumnSizingColumn<TGenerics>\n\nexport type Cell<TGenerics extends PartialGenerics> = {\n  id: string\n  rowId: string\n  columnId: string\n  value: TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  getCellProps: PropGetter<CellProps>\n  renderCell: () => React.ReactNode\n}\n\nexport type Header<TGenerics extends PartialGenerics> = CoreHeader<TGenerics> &\n  ColumnSizingHeader<TGenerics>\n\nexport type CoreHeader<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  column: Column<TGenerics>\n  getWidth: () => number\n  subHeaders: Header<TGenerics>[]\n  colSpan?: number\n  rowSpan?: number\n  getHeaderProps: PropGetter<HeaderProps>\n  getFooterProps: PropGetter<HeaderProps>\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder?: boolean\n  placeholderId?: string\n  renderHeader: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n  renderFooter: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n}\n\nexport type HeaderGroup<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n  getHeaderGroupProps: PropGetter<HeaderGroupProps>\n  getFooterGroupProps: PropGetter<FooterGroupProps>\n}\n\nexport type HeaderRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type FooterRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type CellRenderProps<TCell, TRow> = {\n  cell: TCell\n  row: TRow\n}\n\nexport type TableProps = {\n  role: string\n}\n\nexport type TableBodyProps = {\n  role: string\n}\n\nexport type TableHeadProps = {\n  key: string\n  role: string\n}\n\nexport type TableFooterProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderGroupProps = {\n  key: string\n  role: string\n}\n\nexport type FooterGroupProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type FooterProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type RowProps = {\n  key: string\n  role: string\n}\n\nexport type CellProps = {\n  key: string\n  role: string\n}\n\n//\n\nexport type PropGetter<TBase> = <TGetter extends Getter<TBase>>(\n  userProps?: TGetter\n) => PropGetterValue<TBase, TGetter>\n\nexport type Getter<TInitial> =\n  | ((initial: TInitial) => object)\n  | object\n  | undefined\n\nexport type PropGetterValue<TBase, TGetter> = TGetter extends undefined\n  ? TBase\n  : TGetter extends (...args: any[]) => infer TReturn\n  ? Overwrite<TBase, TReturn>\n  : TGetter extends object\n  ? Overwrite<TBase, TGetter>\n  : never\n\nexport type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n"],"names":["Please_use_the_create_table_column_utilities_to_define_columns","Symbol"],"mappings":";;;;;;;;;;;;;;AA8EA;AACA;AACA;AA+BA;IAgDaA,8DAA6E,GACxFC,MAAM;;;;"}