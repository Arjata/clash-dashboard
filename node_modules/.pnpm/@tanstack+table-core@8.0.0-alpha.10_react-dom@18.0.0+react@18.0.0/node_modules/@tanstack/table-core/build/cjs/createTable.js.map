{"version":3,"file":"createTable.js","sources":["../../src/createTable.tsx"],"sourcesContent":["import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  DefaultGenerics,\n  PartialGenerics,\n  _NonGenerated,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreatTableFactory<TGenerics extends Partial<DefaultGenerics>> = <\n  TRow\n>() => TableFactory<Overwrite<TGenerics, { Row: TRow }>>\n\nexport type CreateTableFactoryOptions<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport function createTableFactory<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n>(\n  opts: CreateTableFactoryOptions<TFilterFns, TSortingFns, TAggregationFns>\n): CreatTableFactory<\n  Overwrite<\n    PartialGenerics,\n    {\n      FilterFns: TFilterFns\n      SortingFns: TSortingFns\n      AggregationFns: TAggregationFns\n    }\n  >\n> {\n  return () => _createTable(undefined, undefined, opts)\n}\n\nexport type TableFactory<TGenerics extends Partial<DefaultGenerics>> = {\n  __options: CreateTableFactoryOptions<any, any, any>\n  createColumns: (columns: ColumnDef<TGenerics>[]) => ColumnDef<TGenerics>[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            id: string\n            header?: string | ColumnDef<TGenerics>['header']\n          }\n        >,\n      { accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: PartialKeys<\n      _NonGenerated<ColumnDef<TGenerics>>,\n      'accessorFn' | 'accessorKey'\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          _NonGenerated<ColumnDef<TGenerics>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            _NonGenerated<ColumnDef<TGenerics>>,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\nexport function createTable<TRow>() {\n  return _createTable<Overwrite<PartialGenerics, { Row: TRow }>>()\n}\n\nfunction _createTable<TGenerics extends PartialGenerics>(\n  _?: undefined,\n  __?: undefined,\n  __options?: CreateTableFactoryOptions<any, any, any>\n): TableFactory<TGenerics> {\n  return {\n    __options: __options || {},\n    createColumns: columns => columns,\n    createDisplayColumn: column => column as any,\n    createGroup: column => column as any,\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n"],"names":["createTableFactory","opts","_createTable","undefined","createTable","_","__","__options","createColumns","columns","createDisplayColumn","column","createGroup","createDataColumn","accessor","id","accessorKey","accessorFn","Error"],"mappings":";;;;;;;;;;;;;;;;AA0BO,SAASA,kBAAT,CAKLC,IALK,EAeL;AACA,SAAO;AAAA,WAAMC,YAAY,CAACC,SAAD,EAAYA,SAAZ,EAAuBF,IAAvB,CAAlB;AAAA,GAAP;AACD;AAuDM,SAASG,WAAT,GAA6B;AAClC,SAAOF,YAAY,EAAnB;AACD;;AAED,SAASA,YAAT,CACEG,CADF,EAEEC,EAFF,EAGEC,SAHF,EAI2B;AACzB,SAAO;AACLA,IAAAA,SAAS,EAAEA,SAAS,IAAI,EADnB;AAELC,IAAAA,aAAa,EAAE,uBAAAC,OAAO;AAAA,aAAIA,OAAJ;AAAA,KAFjB;AAGLC,IAAAA,mBAAmB,EAAE,6BAAAC,MAAM;AAAA,aAAIA,MAAJ;AAAA,KAHtB;AAILC,IAAAA,WAAW,EAAE,qBAAAD,MAAM;AAAA,aAAIA,MAAJ;AAAA,KAJd;AAKLE,IAAAA,gBAAgB,EAAE,0BAACC,QAAD,EAAWH,MAAX,EAA2B;AAC3CA,MAAAA,MAAM,4CACDA,MADC;AAEJI,QAAAA,EAAE,EAAEJ,MAAM,CAACI;AAFP,QAAN;;AAKA,UAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AAAA;;AAChC,wDACKH,MADL;AAEEI,UAAAA,EAAE,gBAAEJ,MAAM,CAACI,EAAT,yBAAeD,QAFnB;AAGEE,UAAAA,WAAW,EAAEF;AAHf;AAKD;;AAED,UAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AAClC,wDACKH,MADL;AAEEM,UAAAA,UAAU,EAAEH;AAFd;AAID;;AAED,YAAM,IAAII,KAAJ,CAAU,kBAAV,CAAN;AACD;AA3BI,GAAP;AA6BD;;;;;"}