{"version":3,"file":"expandRowsFn.js","sources":["../../../src/utils/expandRowsFn.ts"],"sourcesContent":["import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function expandRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const { expandSubRows } = instance.options\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n"],"names":["expandRowsFn","instance","sortedRowModel","expandedRows","expandSubRows","options","handleRow","row","push","subRows","length","getIsRowExpanded","id","forEach","rows","flatRows","rowsById"],"mappings":";;;;;;;;;;;;;;AAEO,SAASA,YAAT,CACLC,QADK,EAELC,cAFK,EAGgB;AACrB,MAAMC,YAA8B,GAAG,EAAvC;AAEA,MAAQC,aAAR,GAA0BH,QAAQ,CAACI,OAAnC,CAAQD,aAAR;;AAEA,MAAME,SAAS,GAAG,SAAZA,SAAY,CAACC,GAAD,EAAyB;AAAA;;AACzCJ,IAAAA,YAAY,CAACK,IAAb,CAAkBD,GAAlB;;AAEA,QACEH,aAAa,oBACbG,GAAG,CAACE,OADS,aACb,aAAaC,MADb,IAEAT,QAAQ,CAACU,gBAAT,CAA0BJ,GAAG,CAACK,EAA9B,CAHF,EAIE;AACAL,MAAAA,GAAG,CAACE,OAAJ,CAAYI,OAAZ,CAAoBP,SAApB;AACD;AACF,GAVD;;AAYAJ,EAAAA,cAAc,CAACY,IAAf,CAAoBD,OAApB,CAA4BP,SAA5B;AAEA,SAAO;AACLQ,IAAAA,IAAI,EAAEX,YADD;AAELY,IAAAA,QAAQ,EAAEb,cAAc,CAACa,QAFpB;AAGLC,IAAAA,QAAQ,EAAEd,cAAc,CAACc;AAHpB,GAAP;AAKD;;;;"}