{"version":3,"file":"index.js","sources":["../../src/utils.tsx","../../src/types.ts","../../src/features/Visibility.ts","../../src/aggregationTypes.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pinning.ts","../../src/features/ColumnSizing.ts","../../src/features/Headers.ts","../../src/filterTypes.ts","../../src/features/Filters.ts","../../src/sortTypes.ts","../../src/features/Sorting.ts","../../src/features/Expanding.ts","../../src/features/Pagination.ts","../../src/features/RowSelection.ts","../../src/core.tsx","../../src/createTable.tsx","../../src/utils/columnFilterRowsFn.ts","../../src/utils/globalFilterRowsFn.ts","../../src/utils/sortRowsFn.ts","../../src/utils/groupRowsFn.ts","../../src/utils/expandRowsFn.ts","../../src/utils/paginateRowsFn.ts"],"sourcesContent":["import React from 'react'\nimport {\n  Getter,\n  NoInfer,\n  PropGetterValue,\n  Renderable,\n  TableState,\n  Updater,\n} from './types'\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U> = Omit<T, keyof U> & U\n\nexport type DataUpdateFunction<T> = (input: T) => T\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<T>)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState,>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\ntype PropGetterImpl = <TBaseProps, TGetter extends Getter<TBaseProps>>(\n  initial: TBaseProps,\n  userProps?: TGetter\n) => PropGetterValue<TBaseProps, TGetter>\n\n// @ts-ignore // Just rely on the type, not the implementation\nexport const propGetter: PropGetterImpl = (initial, getter) => {\n  if (isFunction(getter)) {\n    return getter(initial)\n  }\n\n  return {\n    ...initial,\n    ...(getter ?? {}),\n  }\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: string\n    debug?: () => any\n    onChange?: (result: TResult, previousResult?: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = performance.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (depsChanged) {\n      let oldResult = result\n      let resultTime: number\n      if (opts.key && opts.debug) resultTime = performance.now()\n      result = fn(...newDeps)\n      deps = newDeps\n      opts?.onChange?.(result, oldResult)\n\n      if (opts.key && opts.debug) {\n        if (opts?.debug()) {\n          const depEndTime =\n            Math.round((performance.now() - depTime!) * 100) / 100\n          const resultEndTime =\n            Math.round((performance.now() - resultTime!) * 100) / 100\n          const resultFpsPercentage = resultEndTime / 16\n\n          const pad = (str: number | string, num: number) => {\n            str = String(str)\n            while (str.length < num) {\n              str = ' ' + str\n            }\n            return str\n          }\n\n          console.info(\n            `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n            `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n            opts?.key,\n            {\n              length: `${deps.length} -> ${newDeps.length}`,\n              ...newDeps\n                .map((_, index) => {\n                  if (deps[index] !== newDeps[index]) {\n                    return [index, deps[index], newDeps[index]]\n                  }\n\n                  return false\n                })\n                .filter(Boolean)\n                .reduce(\n                  (accu, [a, b]: any) => ({\n                    ...accu,\n                    [a]: b,\n                  }),\n                  {}\n                ),\n              parent,\n            }\n          )\n        }\n      }\n\n      oldResult = undefined\n    }\n\n    return result!\n  }\n}\n\nexport type Render = typeof flexRender\n\nexport function flexRender<TProps extends {}>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode {\n  return !Comp ? null : isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component: unknown): component is React.FC {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\n// export function hashString(str: string, seed = 0): string {\n//   let h1 = 0xdeadbeef ^ seed,\n//     h2 = 0x41c6ce57 ^ seed\n//   for (let i = 0, ch; i < str.length; i++) {\n//     ch = str.charCodeAt(i)\n//     h1 = Math.imul(h1 ^ ch, 2654435761)\n//     h2 = Math.imul(h2 ^ ch, 1597334677)\n//   }\n//   h1 =\n//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)\n//   h2 =\n//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)\n//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()\n// }\n","import React from 'react'\nimport {\n  CoreColumn,\n  CoreColumnDef,\n  CoreOptions,\n  CoreRow,\n  TableCore,\n} from './core'\nimport {\n  VisibilityInstance,\n  VisibilityTableState,\n  VisibilityColumn as ColumnVisibilityColumn,\n  VisibilityOptions,\n  VisibilityColumnDef,\n  VisibilityRow,\n} from './features/Visibility'\nimport {\n  ColumnOrderInstance,\n  ColumnOrderOptions,\n  ColumnOrderTableState,\n} from './features/Ordering'\nimport {\n  ColumnPinningColumn,\n  ColumnPinningColumnDef,\n  ColumnPinningInstance,\n  ColumnPinningOptions,\n  ColumnPinningTableState,\n} from './features/Pinning'\nimport { HeadersInstance, HeadersRow } from './features/Headers'\nimport {\n  FiltersColumn,\n  FiltersColumnDef,\n  FiltersInstance,\n  FiltersOptions,\n  FiltersTableState,\n} from './features/Filters'\nimport {\n  SortingColumn,\n  SortingColumnDef,\n  SortingInstance,\n  SortingOptions,\n  SortingTableState,\n} from './features/Sorting'\nimport {\n  GroupingColumn,\n  GroupingColumnDef,\n  GroupingInstance,\n  GroupingOptions,\n  GroupingRow,\n  GroupingTableState,\n} from './features/Grouping'\nimport {\n  ExpandedInstance,\n  ExpandedOptions,\n  ExpandedTableState,\n  ExpandedRow,\n} from './features/Expanding'\nimport { Overwrite } from './utils'\nimport {\n  ColumnSizingColumn,\n  ColumnSizingColumnDef,\n  ColumnSizingHeader,\n  ColumnSizingInstance,\n  ColumnSizingOptions,\n  ColumnSizingTableState,\n} from './features/ColumnSizing'\nimport {\n  PaginationInstance,\n  PaginationOptions,\n  PaginationTableState,\n} from './features/Pagination'\nimport {\n  RowSelectionInstance,\n  RowSelectionOptions,\n  RowSelectionRow,\n  RowSelectionTableState,\n} from './features/RowSelection'\n\n// declare global {\n//   const process.env.NODE_ENV !== 'production': boolean\n// }\n\nexport type DefaultGenerics = {\n  Row: unknown\n  Value: unknown\n  FilterFns: object\n  SortingFns: object\n  AggregationFns: object\n}\n\nexport type PartialGenerics = Partial<DefaultGenerics>\n\nexport type TableInstance<TGenerics extends PartialGenerics> =\n  TableCore<TGenerics> &\n    VisibilityInstance<TGenerics> &\n    ColumnOrderInstance<TGenerics> &\n    ColumnPinningInstance<TGenerics> &\n    HeadersInstance<TGenerics> &\n    FiltersInstance<TGenerics> &\n    SortingInstance<TGenerics> &\n    GroupingInstance<TGenerics> &\n    ColumnSizingInstance<TGenerics> &\n    ExpandedInstance<TGenerics> &\n    PaginationInstance<TGenerics> &\n    RowSelectionInstance<TGenerics>\n\nexport type Renderable<TProps> =\n  | React.ReactNode\n  | React.FunctionComponent<TProps>\n  | React.Component<TProps>\n\n//\n\nexport type Options<TGenerics extends PartialGenerics> =\n  CoreOptions<TGenerics> &\n    VisibilityOptions &\n    ColumnOrderOptions &\n    ColumnPinningOptions &\n    FiltersOptions<TGenerics> &\n    SortingOptions<TGenerics> &\n    GroupingOptions<TGenerics> &\n    ExpandedOptions<TGenerics> &\n    ColumnSizingOptions &\n    PaginationOptions<TGenerics> &\n    RowSelectionOptions<TGenerics>\n\nexport type Updater<T> = T | ((old: T) => T)\nexport type OnChangeFn<T> = (updaterOrValue: Updater<T>, value: T) => void\n\nexport type TableState = VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n\nexport type Row<TGenerics extends PartialGenerics> = CoreRow<TGenerics> &\n  VisibilityRow<TGenerics> &\n  HeadersRow<TGenerics> &\n  GroupingRow &\n  RowSelectionRow &\n  ExpandedRow\n\nexport type RowValues = {\n  [key: string]: any\n}\n\nexport type RowModel<TGenerics extends PartialGenerics> = {\n  rows: Row<TGenerics>[]\n  flatRows: Row<TGenerics>[]\n  rowsById: Record<string, Row<TGenerics>>\n}\n\nexport type AccessorFn<TData> = (originalRow: TData, index: number) => any\n\nexport const Please_use_the_create_table_column_utilities_to_define_columns: unique symbol =\n  Symbol()\n\nexport type _NonGenerated<T> = Overwrite<\n  T,\n  {\n    [Please_use_the_create_table_column_utilities_to_define_columns]?: never\n  }\n>\n\nexport type ColumnDef<TGenerics extends PartialGenerics> =\n  CoreColumnDef<TGenerics> &\n    VisibilityColumnDef &\n    ColumnPinningColumnDef &\n    FiltersColumnDef<TGenerics> &\n    SortingColumnDef<TGenerics> &\n    GroupingColumnDef<TGenerics> &\n    ColumnSizingColumnDef\n\nexport type Column<TGenerics extends PartialGenerics> = ColumnDef<TGenerics> &\n  CoreColumn<TGenerics> &\n  ColumnVisibilityColumn &\n  ColumnPinningColumn &\n  FiltersColumn<TGenerics> &\n  SortingColumn<TGenerics> &\n  GroupingColumn<TGenerics> &\n  ColumnSizingColumn<TGenerics>\n\nexport type Cell<TGenerics extends PartialGenerics> = {\n  id: string\n  rowId: string\n  columnId: string\n  value: TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  getCellProps: PropGetter<CellProps>\n  renderCell: () => React.ReactNode\n}\n\nexport type Header<TGenerics extends PartialGenerics> = CoreHeader<TGenerics> &\n  ColumnSizingHeader<TGenerics>\n\nexport type CoreHeader<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  column: Column<TGenerics>\n  getWidth: () => number\n  subHeaders: Header<TGenerics>[]\n  colSpan?: number\n  rowSpan?: number\n  getHeaderProps: PropGetter<HeaderProps>\n  getFooterProps: PropGetter<HeaderProps>\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder?: boolean\n  placeholderId?: string\n  renderHeader: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n  renderFooter: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n}\n\nexport type HeaderGroup<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n  getHeaderGroupProps: PropGetter<HeaderGroupProps>\n  getFooterGroupProps: PropGetter<FooterGroupProps>\n}\n\nexport type HeaderRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type FooterRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type CellRenderProps<TCell, TRow> = {\n  cell: TCell\n  row: TRow\n}\n\nexport type TableProps = {\n  role: string\n}\n\nexport type TableBodyProps = {\n  role: string\n}\n\nexport type TableHeadProps = {\n  key: string\n  role: string\n}\n\nexport type TableFooterProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderGroupProps = {\n  key: string\n  role: string\n}\n\nexport type FooterGroupProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type FooterProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type RowProps = {\n  key: string\n  role: string\n}\n\nexport type CellProps = {\n  key: string\n  role: string\n}\n\n//\n\nexport type PropGetter<TBase> = <TGetter extends Getter<TBase>>(\n  userProps?: TGetter\n) => PropGetterValue<TBase, TGetter>\n\nexport type Getter<TInitial> =\n  | ((initial: TInitial) => object)\n  | object\n  | undefined\n\nexport type PropGetterValue<TBase, TGetter> = TGetter extends undefined\n  ? TBase\n  : TGetter extends (...args: any[]) => infer TReturn\n  ? Overwrite<TBase, TReturn>\n  : TGetter extends object\n  ? Overwrite<TBase, TGetter>\n  : never\n\nexport type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n","import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends PartialGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends PartialGenerics> = {\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport const Visibility = {\n  getInitialState: (): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      getCanHide: () => instance.getColumnCanHide(column.id),\n      getIsVisible: () => instance.getColumnIsVisible(column.id),\n      toggleVisibility: value =>\n        instance.toggleColumnVisibility(column.id, value),\n      getToggleVisibilityProps: userProps => {\n        const props: ToggleVisibilityProps = {\n          type: 'checkbox',\n          checked: column.getIsVisible?.(),\n          title: 'Toggle Column Visibility',\n          onChange: (e: MouseEvent | TouchEvent) => {\n            column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n          },\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    return {\n      getVisibleFlatColumns: memo(\n        () => [\n          instance.getAllFlatColumns(),\n          instance\n            .getAllFlatColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getVisibleLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance\n            .getAllLeafColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnVisibility)\n        ),\n\n      toggleColumnVisibility: (columnId, value) => {\n        if (!columnId) return\n\n        if (instance.getColumnCanHide(columnId)) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n          }))\n        }\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getColumnIsVisible: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnVisibility?.[columnId] ??\n          column.defaultIsVisible ??\n          true\n        )\n      },\n\n      getColumnCanHide: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.options.enableHiding ??\n          column.enableHiding ??\n          column.defaultCanHide ??\n          true\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityProps: userProps => {\n        const props: ToggleAllColumnsVisibilityProps = {\n          onChange: (e: MouseEvent) => {\n            instance.toggleAllColumnsVisible(\n              (e.target as HTMLInputElement)?.checked\n            )\n          },\n          type: 'checkbox',\n          title: 'Toggle visibility for all columns',\n          checked: instance.getIsAllColumnsVisible(),\n          indeterminate:\n            !instance.getIsAllColumnsVisible() &&\n            instance.getIsSomeColumnsVisible()\n              ? 'indeterminate'\n              : undefined,\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n}\n","export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_leafValues: unknown[], childValues: unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childValues.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_leafValues: unknown[], childValues: unknown[]) {\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(leafValues: unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of leafValues as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(values: unknown[]) {\n  if (!values.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(values: T[]) {\n  return Array.from(new Set(values).values())\n}\n\nfunction uniqueCount(values: unknown[]) {\n  return new Set(values).size\n}\n\nfunction count(values: unknown[]) {\n  return values.length\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n  PartialGenerics,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends PartialGenerics> = (\n  leafValues: TGenerics['Row'][],\n  childValues: TGenerics['Row'][]\n) => any\n\nexport type CustomAggregationTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  renderAggregatedCell?: () => React.ReactNode\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends PartialGenerics> = {\n  aggregationTypes?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<TGenerics extends PartialGenerics> = {\n  _notifyGroupingReset: () => void\n  getColumnAutoAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationType: 'auto',\n    }\n  },\n\n  getInitialState: (): GroupingTableState => {\n    return {\n      grouping: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      autoResetGrouping: true,\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      aggregationType: column.aggregationType,\n      getCanGroup: () => instance.getColumnCanGroup(column.id),\n      getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n      getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n      toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n      getToggleGroupingProps: userProps =>\n        instance.getToggleGroupingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyGroupingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetGrouping\n        ) {\n          instance.resetGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'number') {\n          return aggregationTypes.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationTypes.extent\n        }\n\n        return aggregationTypes.count\n      },\n      getColumnAggregationFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userAggregationTypes = instance.options.aggregationTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationType)\n          ? column.aggregationType\n          : column.aggregationType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userAggregationTypes as Record<string, any>)?.[\n              column.aggregationType as string\n            ] ??\n            (aggregationTypes[\n              column.aggregationType as BuiltInAggregationType\n            ] as AggregationFn<TGenerics>)\n      },\n\n      setGrouping: updater =>\n        instance.options.onGroupingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().grouping)\n        ),\n\n      toggleColumnGrouping: columnId => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(columnId)) {\n            return old.filter(d => d !== columnId)\n          }\n\n          return [...(old ?? []), columnId]\n        })\n      },\n\n      getColumnCanGroup: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableGrouping ??\n          instance.options.enableGrouping ??\n          column.defaultCanGroup ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsGrouped: columnId => {\n        return instance.getState().grouping?.includes(columnId)\n      },\n\n      getColumnGroupedIndex: columnId =>\n        instance.getState().grouping?.indexOf(columnId),\n\n      resetGrouping: () => {\n        instance.setGrouping(instance.initialState?.grouping ?? [])\n      },\n\n      getToggleGroupingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        const canGroup = column.getCanGroup()\n\n        const initialProps: ToggleGroupingProps = {\n          title: canGroup ? 'Toggle Grouping' : undefined,\n          onClick: canGroup\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleGrouping?.()\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: memo(\n        () => [\n          instance.getState().grouping,\n          instance.getSortedRowModel(),\n          instance.options.groupRowsFn,\n        ],\n        (grouping, rowModel, groupRowsFn) => {\n          if (!groupRowsFn || !grouping.length) {\n            return rowModel\n          }\n\n          return groupRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => instance.getRowIsGrouped(row.id),\n    }\n  },\n\n  createCell: <TGenerics extends PartialGenerics>(\n    cell: Cell<TGenerics> & GroupingCell,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    _instance: TableInstance<TGenerics>\n  ): GroupingCell => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n    }\n  },\n\n  orderColumns: <TGenerics extends PartialGenerics>(\n    leafColumns: Column<TGenerics>[],\n    grouping: string[],\n    groupedColumnMode?: GroupingColumnMode\n  ) => {\n    if (!grouping?.length || !groupedColumnMode) {\n      return leafColumns\n    }\n\n    const nonGroupingColumns = leafColumns.filter(\n      col => !grouping.includes(col.id)\n    )\n\n    if (groupedColumnMode === 'remove') {\n      return nonGroupingColumns\n    }\n\n    const groupingColumns = grouping\n      .map(g => leafColumns.find(col => col.id === g)!)\n      .filter(Boolean)\n\n    return [...groupingColumns, ...nonGroupingColumns]\n  },\n}\n","import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  PartialGenerics,\n} from '../types'\n\nimport { Grouping } from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends PartialGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (columns: Column<TGenerics>[]) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering = {\n  getInitialState: (): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnOrder)\n        ),\n      resetColumnOrder: () => {\n        instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n      },\n      getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return Grouping.orderColumns(\n            orderedColumns,\n            grouping,\n            groupedColumnMode\n          )\n        },\n        {\n          key: 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  PartialGenerics,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater } from '../utils'\n\ntype ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n  defaultCanPin?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningInstance<TGenerics extends PartialGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: () => void\n  pinColumn: (columnId: string, position: ColumnPinningPosition) => void\n  getColumnCanPin: (columnId: string) => boolean\n  getColumnIsPinned: (columnId: string) => ColumnPinningPosition\n  getColumnPinnedIndex: (columnId: string) => number\n}\n\n//\n\nexport const Pinning = {\n  getInitialState: (): ColumnPinningTableState => {\n    return {\n      columnPinning: {\n        left: [],\n        right: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      getCanPin: () => instance.getColumnCanPin(column.id),\n      getPinnedIndex: () => instance.getColumnPinnedIndex(column.id),\n      getIsPinned: () => instance.getColumnIsPinned(column.id),\n      pin: position => instance.pinColumn(column.id, position),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnPinning)\n        ),\n\n      resetColumnPinning: () =>\n        instance.setColumnPinning(instance.initialState?.columnPinning ?? {}),\n\n      pinColumn: (columnId, position) => {\n        const column = instance.getColumn(columnId)\n\n        const columnIds = column\n          ?.getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getColumnCanPin: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            d.enablePinning ??\n            instance.options.enablePinning ??\n            d.defaultCanPin ??\n            !!d.accessorFn\n        )\n      },\n\n      getColumnIsPinned: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getColumnPinnedIndex: columnId => {\n        const position = instance.getColumnIsPinned(columnId)\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(columnId) ??\n              -1\n          : 0\n      },\n    }\n  },\n}\n","import {\n  MouseEvent as ReactMouseEvent,\n  TouchEvent as ReactTouchEvent,\n} from 'react'\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\n//\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnResizerProps = {\n  title?: string\n  onMouseDown?: (e: ReactMouseEvent) => void\n  onTouchStart?: (e: ReactTouchEvent) => void\n  draggable?: boolean\n  role?: string\n}\n\nexport type ColumnSizingInstance<TGenerics extends PartialGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizing>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: () => void\n  resetColumnSize: (columnId: string) => void\n  resetHeaderSize: (headerId: string) => void\n  resetHeaderSizeInfo: () => void\n  getColumnCanResize: (columnId: string) => boolean\n  getHeaderCanResize: (headerId: string) => boolean\n  getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  getColumnIsResizing: (columnId: string) => boolean\n  getHeaderIsResizing: (headerId: string) => boolean\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  defaultCanResize?: boolean\n}\n\nexport type ColumnSizingColumn<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  resetSize: () => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  width: 150,\n  minWidth: 20,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport const ColumnSizing = {\n  getInitialState: (): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: {\n        startOffset: null,\n        startSize: null,\n        deltaOffset: null,\n        deltaPercentage: null,\n        isResizingColumn: false,\n        columnSizingStart: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizing)\n        ),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizingInfo)\n        ),\n      resetColumnSizing: () => {\n        instance.setColumnSizing(instance.initialState.columnSizing ?? {})\n      },\n      resetHeaderSizeInfo: () => {\n        instance.setColumnSizingInfo(\n          instance.initialState.columnSizingInfo ?? {}\n        )\n      },\n      resetColumnSize: columnId => {\n        instance.setColumnSizing(({ [columnId]: _, ...rest }) => {\n          return rest\n        })\n      },\n      resetHeaderSize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        return instance.resetColumnSize(header.column.id)\n      },\n      getHeaderCanResize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnCanResize(header.column.id)\n      },\n      getColumnCanResize: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableResizing ??\n          instance.options.enableColumnResizing ??\n          column.defaultCanResize ??\n          true\n        )\n      },\n      getColumnIsResizing: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === columnId\n        )\n      },\n      getHeaderIsResizing: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnIsResizing(header.column.id)\n      },\n\n      getHeaderResizerProps: (headerId, userProps) => {\n        const header = instance.getHeader(headerId)\n        const column = instance.getColumn(header.column.id)\n\n        const canResize = column.getCanResize()\n\n        const onResizeStart = (e: ReactMouseEvent | ReactTouchEvent) => {\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const header = headerId ? instance.getHeader(headerId) : undefined\n\n          const startSize = header ? header.getWidth() : column.getWidth()\n\n          const columnSizingStart: [string, number][] = header\n            ? header.getLeafHeaders().map(d => [d.column.id, d.getWidth()])\n            : [[column.id, column.getWidth()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0].clientX)\n            : e.clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizing = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerWidth]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerWidth + headerWidth * deltaPercentage, 0) *\n                      100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0].clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0].clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n\n        const initialProps: ColumnResizerProps = canResize\n          ? {\n              title: 'Toggle Grouping',\n              draggable: false,\n              role: 'separator',\n              onMouseDown: (e: ReactMouseEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n              onTouchStart: (e: ReactTouchEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n            }\n          : {}\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(column.id),\n      getCanResize: () => instance.getColumnCanResize(column.id),\n      resetSize: () => instance.resetColumnSize(column.id),\n    }\n  },\n\n  createHeader: <TGenerics extends PartialGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(header.column.id),\n      getCanResize: () => instance.getColumnCanResize(header.column.id),\n      resetSize: () => instance.resetColumnSize(header.column.id),\n      getResizerProps: userProps =>\n        instance.getHeaderResizerProps(header.id, userProps),\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(\n  e: ReactTouchEvent | ReactMouseEvent\n): e is ReactTouchEvent {\n  return e.type === 'touchstart'\n}\n","import {\n  Cell,\n  Column,\n  CoreHeader,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n} from '../types'\nimport { propGetter, memo, flexRender } from '../utils'\nimport { ColumnSizing } from './ColumnSizing'\n\nexport type HeadersRow<TGenerics extends PartialGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type HeadersInstance<TGenerics extends PartialGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport const Headers = {\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): HeadersRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key: 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key: 'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          getWidth: () => {\n            let sum = 0\n\n            const recurse = (header: CoreHeader<TGenerics>) => {\n              if (header.subHeaders.length) {\n                header.subHeaders.forEach(recurse)\n              } else {\n                sum += header.column.getWidth() ?? 0\n              }\n            }\n\n            recurse(header)\n\n            return sum\n          },\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          getHeaderProps: userProps =>\n            instance.getHeaderProps(header.id, userProps)!,\n          getFooterProps: userProps =>\n            instance.getFooterProps(header.id, userProps)!,\n          renderHeader: () =>\n            flexRender(column.header, { instance, header, column }),\n          renderFooter: () =>\n            flexRender(column.footer, { instance, header, column }),\n        }\n\n        // Yes, we have to convert instance to unknown, because we know more than the compiler here.\n        return Object.assign(\n          header,\n          ColumnSizing.createHeader(header as Header<TGenerics>, instance)\n        ) as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns = leafColumns.filter(column =>\n            left?.includes(column.id)\n          )\n          const rightColumns = leafColumns.filter(column =>\n            right?.includes(column.id)\n          )\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key: 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          leafColumns = leafColumns.filter(column => left?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n        },\n        {\n          key: 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          leafColumns = leafColumns.filter(column => right?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n        },\n        {\n          key: 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n\n      getHeaderGroupProps: (id, userProps) => {\n        const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        return propGetter(\n          {\n            key: headerGroup.id,\n            role: 'row',\n          },\n          userProps\n        )\n      },\n\n      getFooterGroupProps: (id, userProps) => {\n        const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        const initialProps = {\n          key: headerGroup.id,\n          role: 'row',\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getHeaderProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        const initialProps: HeaderProps = {\n          key: header.id,\n          role: 'columnheader',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getFooterProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        const initialProps: FooterProps = {\n          key: header.id,\n          role: 'columnfooter',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getTotalWidth: () => {\n        let width = 0\n\n        instance.getVisibleLeafColumns().forEach(column => {\n          width += column.getWidth() ?? 0\n        })\n\n        return width\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends PartialGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const filterTypes = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  equalsStringSensitive,\n  arrIncludes,\n  arrIncludesAll,\n  equals,\n  weakEquals,\n  betweenNumberRange,\n}\n\nexport type BuiltInFilterType = keyof typeof filterTypes\n\nfunction includesString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).toLowerCase().includes(search)\n    })\n  })\n  return rows\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nfunction includesStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).includes(search)\n    })\n  })\n  return rows\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === search\n        : true\n    })\n  })\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined ? String(rowValue) === search : true\n    })\n  })\n}\n\nequalsStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction arrIncludes<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction arrIncludesAll<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown[]\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction equals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nfunction weakEquals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nfunction betweenNumberRange<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: [unknown, unknown]\n) {\n  let [unsafeMin, unsafeMax] = filterValue || []\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetweenNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport {\n  Column,\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TGenerics extends PartialGenerics> = {\n  (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends PartialGenerics> = (\n  value: unknown,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInFilterType\n  | TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends PartialGenerics> = {\n  filterType?: FilterType<Overwrite<TGenerics, { Value: any }>>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends PartialGenerics> = {\n  filterType: FilterType<Overwrite<TGenerics, { Value: any }>>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () => Row<TGenerics>[] | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<TGenerics extends PartialGenerics> = {\n  filterFromChildrenUp?: boolean\n  filterTypes?: TGenerics['FilterFns']\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    coreRowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  // Global\n  globalFilterType?: FilterType<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n}\n\nexport type FiltersInstance<TGenerics extends PartialGenerics> = {\n  _notifyFiltersReset: () => void\n  getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n\n  // All\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n\n  // Column Filters\n  getPreColumnFilteredRowModel: () => RowModel<TGenerics>\n  getColumnFilteredRowModel: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getPreGlobalFilteredRowModel: () => RowModel<TGenerics>\n  getGlobalFilteredRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport function getDefaultColumn<\n  TGenerics extends PartialGenerics\n>(): FiltersColumnDef<TGenerics> {\n  return {\n    filterType: 'auto',\n  }\n}\n\nexport const Filters = {\n  getInitialState: (): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      autoResetColumnFilters: true,\n      filterFromChildrenUp: true,\n      autoResetGlobalFilter: true,\n      globalFilterType: 'auto',\n      getColumnCanGlobalFilterFn: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()[column.id]?.value\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    const getFacetInfo = memo(\n      () => [column.getPreFilteredRows()],\n      (rows = []) => {\n        let preFilteredUniqueValues = new Map<any, number>()\n\n        let preFilteredMinMaxValues: [any, any] = [\n          rows[0]?.values[column.id] ?? null,\n          rows[0]?.values[column.id] ?? null,\n        ]\n\n        for (let i = 0; i < rows.length; i++) {\n          const value = rows[i]?.values[column.id]\n\n          if (preFilteredUniqueValues.has(value)) {\n            preFilteredUniqueValues.set(\n              value,\n              (preFilteredUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            preFilteredUniqueValues.set(value, 1)\n          }\n\n          if (value < preFilteredMinMaxValues[0]) {\n            preFilteredMinMaxValues[0] = value\n          } else if (value > preFilteredMinMaxValues[1]) {\n            preFilteredMinMaxValues[1] = value\n          }\n        }\n\n        return {\n          preFilteredUniqueValues,\n          preFilteredMinMaxValues,\n        }\n      },\n      {\n        key: 'column.getFacetInfo',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    )\n\n    return {\n      filterType: column.filterType,\n      getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n      getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n      getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n      getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n      getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n      setColumnFilterValue: val =>\n        instance.setColumnFilterValue(column.id, val),\n      getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n      getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n      getPreFilteredRows: () => undefined,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyFiltersReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (instance.options.autoResetAll === true) {\n          instance.resetSorting()\n        } else {\n          if (instance.options.autoResetColumnFilters) {\n            instance.resetColumnFilters()\n          }\n          if (instance.options.autoResetGlobalFilter) {\n            instance.resetGlobalFilter()\n          }\n        }\n      },\n      getColumnAutoFilterFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return filterTypes.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterTypes.betweenNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterTypes.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterTypes.arrIncludes\n        }\n\n        return filterTypes.weakEquals\n      },\n      getGlobalAutoFilterFn: () => {\n        return filterTypes.includesString\n      },\n      getColumnFilterFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userFilterTypes = instance.options.filterTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.filterType)\n          ? column.filterType\n          : column.filterType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userFilterTypes as Record<string, any>)?.[\n              column.filterType as string\n            ] ??\n            (filterTypes[\n              column.filterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterTypes: userFilterTypes, globalFilterType } =\n          instance.options\n\n        return isFunction(globalFilterType)\n          ? globalFilterType\n          : globalFilterType === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterTypes as Record<string, any>)?.[\n              globalFilterType as string\n            ] ??\n            (filterTypes[\n              globalFilterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = instance.getColumnFilterFn(column.id)\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(\n          updateFn,\n          updateFn(instance.getState().columnFilters)\n        )\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().globalFilter)\n        )\n      },\n\n      resetGlobalFilter: () => {\n        instance.setGlobalFilter(undefined)\n      },\n\n      getColumnCanColumnFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableAllFilters ??\n          column.enableColumnFilter ??\n          instance.options.enableFilters ??\n          instance.options.enableColumnFilters ??\n          column.defaultCanFilter ??\n          column.defaultCanColumnFilter ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnCanGlobalFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          ((instance.options.enableFilters ??\n            instance.options.enableGlobalFilter ??\n            column.enableAllFilters ??\n            column.enableGlobalFilter ??\n            column.defaultCanFilter ??\n            column.defaultCanGlobalFilter ??\n            !!column.accessorFn) &&\n            instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n          true\n        )\n      },\n\n      getColumnIsFiltered: columnId =>\n        instance.getColumnFilterIndex(columnId) > -1,\n\n      getColumnFilterValue: columnId =>\n        instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n      getColumnFilterIndex: columnId =>\n        instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n        -1,\n\n      setColumnFilterValue: (columnId, value) => {\n        if (!columnId) return\n\n        instance.setColumnFilters(old => {\n          const column = instance.getColumn(columnId)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `React-Table: Could not find a column with id: ${columnId}`\n              )\n            }\n            throw new Error()\n          }\n\n          const filterFn = instance.getColumnFilterFn(column.id)\n          const previousfilter = old?.find(d => d.id === columnId)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== columnId) ?? []\n          }\n\n          const newFilterObj = { id: columnId, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === columnId) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n\n      resetColumnFilters: () => {\n        instance.setColumnFilters(instance.initialState?.columnFilters ?? [])\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      getPreColumnFilteredRowModel: () => instance.getCoreRowModel(),\n      getColumnFilteredRowModel: memo(\n        () => [\n          instance.getState().columnFilters,\n          instance.getCoreRowModel(),\n          instance.options.columnFilterRowsFn,\n        ],\n        (columnFilters, rowModel, columnFiltersFn) => {\n          const columnFilteredRowModel = (() => {\n            if (!columnFilters?.length || !columnFiltersFn) {\n              return rowModel\n            }\n\n            return columnFiltersFn(instance as any, rowModel)\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => columnFilteredRowModel.rows\n          })\n\n          return columnFilteredRowModel\n        },\n        {\n          key: 'getColumnFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n      getPreGlobalFilteredRowModel: () => instance.getColumnFilteredRowModel(),\n      getGlobalFilteredRowModel: memo(\n        () => [\n          instance.getState().globalFilter,\n          instance.getColumnFilteredRowModel(),\n          instance.options.globalFilterRowsFn,\n        ],\n        (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n          const globalFilteredRowModel = (() => {\n            if (!globalFiltersFn || !globalFilterValue) {\n              return columnFilteredRowModel\n            }\n\n            return globalFiltersFn(\n              instance as TableInstance<TGenerics>,\n              columnFilteredRowModel\n            )\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => globalFilteredRowModel.rows\n          })\n\n          return globalFilteredRowModel\n        },\n        {\n          key: 'getGlobalFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifySortingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends PartialGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortTypes = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortType = keyof typeof sortTypes\n\nfunction alphanumeric<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\nfunction datetime<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.values[columnId] as Date).getTime(),\n    (rowB.values[columnId] as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.values[columnId], rowB.values[columnId])\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, reSplitAlphaNumeric, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends PartialGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends PartialGenerics> = {\n  sortType?: SortType<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends PartialGenerics> = {\n  sortType: SortType<Overwrite<TGenerics, { Value: any }>>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<TGenerics extends PartialGenerics> = {\n  sortTypes?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<TGenerics extends PartialGenerics> = {\n  _notifySortingReset: () => void\n  getColumnAutoSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n  getColumnAutoSortDir: (columnId: string) => SortDirection\n\n  getColumnSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: () => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortType: 'auto',\n    }\n  },\n\n  getInitialState: (): SortingTableState => {\n    return {\n      sorting: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      autoResetSorting: true,\n      isMultiSortEvent: (e: MouseEvent | TouchEvent) => {\n        return e.shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      sortType: column.sortType,\n      getCanSort: () => instance.getColumnCanSort(column.id),\n      getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n      getSortIndex: () => instance.getColumnSortIndex(column.id),\n      getIsSorted: () => instance.getColumnIsSorted(column.id),\n      toggleSorting: (desc, isMulti) =>\n        instance.toggleColumnSorting(column.id, desc, isMulti),\n      getToggleSortingProps: userProps =>\n        instance.getToggleSortingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifySortingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetSorting\n        ) {\n          instance.resetSorting()\n        }\n      },\n      getColumnAutoSortingFn: columnId => {\n        const firstRows = instance\n          .getGlobalFilteredRowModel()\n          .flatRows.slice(100)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.values[columnId]\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortTypes.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortTypes.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortTypes.text\n        }\n\n        return sortTypes.basic\n      },\n      getColumnAutoSortDir: columnId => {\n        const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getColumnSortingFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userSortTypes = instance.options.sortTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortType)\n          ? column.sortType\n          : column.sortType === 'auto'\n          ? instance.getColumnAutoSortingFn(columnId)\n          : (userSortTypes as Record<string, any>)?.[\n              column.sortType as string\n            ] ??\n            (sortTypes[\n              column.sortType as BuiltInSortType\n            ] as SortingFn<TGenerics>)\n      },\n\n      setSorting: updater =>\n        instance.options.onSortingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().sorting)\n        ),\n\n      toggleColumnSorting: (columnId, desc, multi) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === columnId)\n          const existingIndex = old?.findIndex(d => d.id === columnId)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            instance.getColumnAutoSortDir(columnId) === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === columnId) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== columnId)\n          }\n\n          return newSorting\n        })\n      },\n\n      getColumnCanSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableSorting ??\n          instance.options.enableSorting ??\n          column.defaultCanSort ??\n          !!column.accessorFn\n          // (!!column.accessorFn ||\n          //   column.columns?.some(c => c.id && instance.getColumnCanSort(c.id))) ??\n          // false\n        )\n      },\n\n      getColumnCanMultiSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsSorted: columnId => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === columnId)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getColumnSortIndex: columnId =>\n        instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n      resetSorting: () => {\n        instance.setSorting(instance.initialState?.sorting ?? [])\n      },\n\n      getToggleSortingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const canSort = column.getCanSort()\n\n        const initialProps: ToggleSortingProps = {\n          title: canSort ? 'Toggle Sorting' : undefined,\n          onClick: canSort\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleSorting?.(\n                  undefined,\n                  column.getCanMultiSort()\n                    ? instance.options.isMultiSortEvent?.(e)\n                    : false\n                )\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getPreSortedRowModel: () => instance.getGlobalFilteredRowModel(),\n      getSortedRowModel: memo(\n        () => [\n          instance.getState().sorting,\n          instance.getGlobalFilteredRowModel(),\n          instance.options.sortRowsFn,\n        ],\n        (sorting, rowModel, sortingFn) => {\n          if (!sortingFn || !sorting?.length) {\n            return rowModel\n          }\n\n          return sortingFn(instance, rowModel)\n        },\n        {\n          key: 'getSortedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyGroupingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<TGenerics extends PartialGenerics> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<TGenerics extends PartialGenerics> = {\n  _notifyExpandedReset: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding = {\n  getInitialState: (): ExpandedTableState => {\n    return {\n      expanded: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      getIsRowExpanded: row => !!(row?.original as { expanded?: any }).expanded,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyExpandedReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          instance.resetExpanded()\n        }\n      },\n      setExpanded: updater =>\n        instance.options.onExpandedChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().expanded)\n        ),\n      toggleRowExpanded: (rowId, expanded) => {\n        if (!rowId) return\n\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[rowId]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [rowId]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [rowId]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: () => {\n        instance.setExpanded(instance.initialState?.expanded ?? {})\n      },\n      getIsRowExpanded: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getIsRowExpanded: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded || expanded?.[rowId])\n        )\n      },\n      getRowCanExpand: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getRowCanExpand: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return (\n          instance.options.getRowCanExpand?.(row) ??\n          instance.options.enableExpanded ??\n          instance.options.defaultCanExpand ??\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          return\n        }\n\n        const canExpand = instance.getRowCanExpand(rowId)\n\n        const initialProps: ToggleExpandedProps = {\n          title: canExpand ? 'Toggle Expanded' : undefined,\n          onClick: canExpand\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                instance.toggleRowExpanded(rowId)\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getToggleAllRowsExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle All Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.persist()\n            instance.toggleAllRowsExpanded()\n          },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (\n          Object.keys(instance.getRowModel().rowsById).some(\n            id => !instance.getIsRowExpanded(id)\n          )\n        ) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getExpandedRowModel: memo(\n        () => [\n          instance.getState().expanded,\n          instance.getGroupedRowModel(),\n          instance.options.expandRowsFn,\n          instance.options.paginateExpandedRows,\n        ],\n        (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n          if (\n            !expandRowsFn ||\n            // Do not expand if rows are not included in pagination\n            !paginateExpandedRows ||\n            !Object.keys(expanded ?? {}).length\n          ) {\n            return rowModel\n          }\n\n          return expandRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getExpandedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyPageIndexReset()\n          },\n        }\n      ),\n\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded =>\n        void instance.toggleRowExpanded(row.id, expanded),\n      getIsExpanded: () => instance.getIsRowExpanded(row.id),\n      getCanExpand: () => row.subRows && !!row.subRows.length,\n      getToggleExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle Row Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.stopPropagation()\n            instance.toggleRowExpanded(row.id)\n          },\n        }\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationOptions<TGenerics extends PartialGenerics> = {\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  paginateRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n  autoResetPageIndex: boolean\n}\n\nexport type PaginationInstance<TGenerics extends PartialGenerics> = {\n  _notifyPageIndexReset: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: () => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: () => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: () => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nexport const Pagination = {\n  getInitialState: (): PaginationTableState => {\n    return {\n      pagination: {\n        pageCount: -1,\n        pageIndex: 0,\n        pageSize: 10,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n      autoResetPageIndex: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    return {\n      _notifyPageIndexReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetPageIndex\n        ) {\n          instance.resetPageIndex()\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(\n          safeUpdater,\n          functionalUpdate(safeUpdater, instance.getState().pagination)\n        )\n      },\n      resetPagination: () => {\n        instance.setPagination(\n          instance.initialState.pagination ?? {\n            pageIndex: 0,\n            pageSize: 10,\n            pageCount: -1,\n          }\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            old.pageCount && old.pageCount > 0\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: () => {\n        instance.setPageIndex(0)\n      },\n      resetPageSize: () => {\n        instance.setPageSize(instance.initialState?.pagination?.pageSize ?? 10)\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex, pageCount, pageSize } =\n          instance.getState().pagination\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return (\n          pageIndex <\n          Math.ceil(\n            instance.getPrePaginationRowModel().rows.length / pageSize\n          ) -\n            1\n        )\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: memo(\n        () => [\n          instance.getState().pagination,\n          instance.getExpandedRowModel(),\n          instance.options.paginateRowsFn,\n        ],\n        (_pagination, rowModel, paginateRowsFn) => {\n          if (!paginateRowsFn || !rowModel.rows.length) {\n            return rowModel\n          }\n\n          return paginateRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getPaginationRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n        if (pageCount > 0) {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends PartialGenerics> = {\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  autoResetRowSelection?: boolean\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // isInclusiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\ntype ToggleRowSelectedProps = {\n  onChange?: (e: MouseEvent | TouchEvent) => void\n  checked?: boolean\n  title?: string\n  indeterminate?: boolean\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n}\n\nexport type RowSelectionInstance<TGenerics extends PartialGenerics> = {\n  _notifyRowSelectionReset: () => void\n  getToggleRowSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllPageRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: () => void\n  toggleRowSelected: (rowId: string, value?: boolean) => void\n  getRowCanSelect: (rowId: string) => boolean\n  getRowCanSelectSubRows: (rowId: string) => boolean\n  getRowCanMultiSelect: (rowId: string) => boolean\n  // getGroupingRowCanSelect: (rowId: string) => boolean\n  getRowIsSelected: (rowId: string) => boolean\n  getRowIsSomeSelected: (rowId: string) => boolean\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection = {\n  getInitialState: (): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      autoResetRowSelection: true,\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.shiftKey,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    let registered = false\n\n    // const pageRows = instance.getPageRows()\n\n    return {\n      _notifyRowSelectionReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetRowSelection\n        ) {\n          instance.resetRowSelection()\n        }\n      },\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().rowSelection)\n        ),\n      resetRowSelection: () =>\n        instance.setRowSelection(instance.initialState.rowSelection ?? {}),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          // Only remove/add the rows that are visible on the screen\n          //  Leave all the other rows that are selected alone.\n          const rowSelection = Object.assign({}, old)\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n      toggleRowSelected: (rowId, value) => {\n        const row = instance.getRow(rowId)\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, rowId, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getGlobalFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      ///\n\n      getRowIsSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getRowIsSomeSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getRowCanSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getRowCanSelectSubRows: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getRowCanMultiSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows =\n          instance.getPreGlobalFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleRowSelectedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        const isSelected = row.getIsSelected()\n        const isSomeSelected = row.getIsSomeSelected()\n        const canSelect = row.getCanSelect()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: canSelect\n            ? (e: MouseEvent | TouchEvent) => {\n                row.toggleSelected((e.target as HTMLInputElement).checked)\n              }\n            : undefined,\n          checked: isSelected,\n          title: 'Toggle Row Selected',\n          indeterminate: isSomeSelected,\n          // onChange: forInput\n          //   ? (e: Event) => e.stopPropagation()\n          //   : (e: Event) => {\n          //       if (instance.options.isAdditiveSelectEvent(e)) {\n          //         row.toggleSelected()\n          //       } else if (instance.options.isInclusiveSelectEvent(e)) {\n          //         instance.addRowSelectionRange(row.id)\n          //       } else {\n          //         instance.setRowSelection({})\n          //         row.toggleSelected()\n          //       }\n\n          //       if (props.onClick) props.onClick(e)\n          //     },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllRowsSelectedProps: userProps => {\n        const isSomeRowsSelected = instance.getIsSomeRowsSelected()\n        const isAllRowsSelected = instance.getIsAllRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllRowsSelected,\n          title: 'Toggle All Rows Selected',\n          indeterminate: isSomeRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllPageRowsSelectedProps: userProps => {\n        const isSomePageRowsSelected = instance.getIsSomePageRowsSelected()\n        const isAllPageRowsSelected = instance.getIsAllPageRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllPageRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllPageRowsSelected,\n          title: 'Toggle All Current Page Rows Selected',\n          indeterminate: isSomePageRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      getIsSelected: () => instance.getRowIsSelected(row.id),\n      getIsSomeSelected: () => instance.getRowIsSomeSelected(row.id),\n      toggleSelected: value => instance.toggleRowSelected(row.id, value),\n      getToggleSelectedProps: userProps =>\n        instance.getToggleRowSelectedProps(row.id, userProps),\n      getCanMultiSelect: () => instance.getRowCanMultiSelect(row.id),\n      getCanSelect: () => instance.getRowCanSelect(row.id),\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends PartialGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && instance.getRowCanSelectSubRows(row.id)) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0) => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends PartialGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  flexRender,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  Renderable,\n  Please_use_the_create_table_column_utilities_to_define_columns,\n  PartialGenerics,\n} from './types'\n\nimport { Visibility } from './features/Visibility'\nimport { Ordering } from './features/Ordering'\nimport { Pinning } from './features/Pinning'\nimport { Headers } from './features/Headers'\nimport { Filters } from './features/Filters'\nimport { Sorting } from './features/Sorting'\nimport { Grouping, GroupingCell } from './features/Grouping'\nimport { Expanding } from './features/Expanding'\nimport { ColumnSizing, defaultColumnSizing } from './features/ColumnSizing'\nimport { Pagination } from './features/Pagination'\nimport { RowSelection } from './features/RowSelection'\nimport { RowModel } from '.'\n\nconst features = [\n  Visibility,\n  Ordering,\n  Pinning,\n  Headers,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  ColumnSizing,\n  Pagination,\n  RowSelection,\n]\n\nexport type CoreOptions<TGenerics extends PartialGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends PartialGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getColumnWidth: (columnId: string) => number\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n}\n\nexport type CoreRow<TGenerics extends PartialGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  leafRows: Row<TGenerics>[]\n  subRows: Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends PartialGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  header?:\n    | string\n    | Renderable<{\n        instance: TableInstance<TGenerics>\n        header: Header<TGenerics>\n        column: Column<TGenerics>\n      }>\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n  columns?: ColumnDef<TGenerics>[]\n  footer?: Renderable<{\n    instance: TableInstance<TGenerics>\n    header: Header<TGenerics>\n    column: Column<TGenerics>\n  }>\n  cell?: Renderable<{\n    instance: TableInstance<TGenerics>\n    row: Row<TGenerics>\n    column: Column<TGenerics>\n    cell: Cell<TGenerics>\n    value: TGenerics['Value']\n  }>\n  defaultIsVisible?: boolean\n  [Please_use_the_create_table_column_utilities_to_define_columns]: true\n}\n\nexport type CoreColumn<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends PartialGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating React Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  let listeners: (() => void)[] = []\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, (feature as any).getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, (feature as any).getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (columnDef, depth: number, parent) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumnSizing,\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(\n          obj,\n          (feature as any).createColumn?.(column, instance)\n        )\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[React Table] Column with id ${columnId} does not exist.`\n          )\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    getColumnWidth: (columnId: string) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const columnSize = instance.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.minWidth ?? defaultColumnSizing.minWidth,\n          columnSize ?? column.width ?? defaultColumnSizing.width\n        ),\n        column.maxWidth ?? defaultColumnSizing.maxWidth\n      )\n    },\n\n    createCell: (row, column, value) => {\n      const cell: Cell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          flexRender(column.cell, { instance, column, row, cell, value }),\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          (feature as any).createCell?.(\n            cell as Cell<TGenerics> & GroupingCell,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        leafRows: [],\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, (feature as any).createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              // Keep the new subRows array on the row\n              row.subRows = subRows\n              row.leafRows = flattenBy(subRows, d => d.leafRows)\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyRowSelectionReset()\n          instance._notifyFiltersReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[React Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[React Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n","import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  DefaultGenerics,\n  PartialGenerics,\n  _NonGenerated,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreatTableFactory<TGenerics extends Partial<DefaultGenerics>> = <\n  TRow\n>() => TableFactory<Overwrite<TGenerics, { Row: TRow }>>\n\nexport type CreateTableFactoryOptions<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport function createTableFactory<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n>(\n  opts: CreateTableFactoryOptions<TFilterFns, TSortingFns, TAggregationFns>\n): CreatTableFactory<\n  Overwrite<\n    PartialGenerics,\n    {\n      FilterFns: TFilterFns\n      SortingFns: TSortingFns\n      AggregationFns: TAggregationFns\n    }\n  >\n> {\n  return () => _createTable(undefined, undefined, opts)\n}\n\nexport type TableFactory<TGenerics extends Partial<DefaultGenerics>> = {\n  __options: CreateTableFactoryOptions<any, any, any>\n  createColumns: (columns: ColumnDef<TGenerics>[]) => ColumnDef<TGenerics>[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            id: string\n            header?: string | ColumnDef<TGenerics>['header']\n          }\n        >,\n      { accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: PartialKeys<\n      _NonGenerated<ColumnDef<TGenerics>>,\n      'accessorFn' | 'accessorKey'\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          _NonGenerated<ColumnDef<TGenerics>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            _NonGenerated<ColumnDef<TGenerics>>,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\nexport function createTable<TRow>() {\n  return _createTable<Overwrite<PartialGenerics, { Row: TRow }>>()\n}\n\nfunction _createTable<TGenerics extends PartialGenerics>(\n  _?: undefined,\n  __?: undefined,\n  __options?: CreateTableFactoryOptions<any, any, any>\n): TableFactory<TGenerics> {\n  return {\n    __options: __options || {},\n    createColumns: columns => columns,\n    createDisplayColumn: column => column as any,\n    createGroup: column => column as any,\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function columnFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const columnFilters = instance.getState().columnFilters\n\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterRows = (rowsToFilter: Row<TGenerics>[], depth: number) => {\n    columnFilters.forEach(({ id: columnId, value: filterValue }) => {\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `React-Table: Could not find a column with id: ${columnId}`\n          )\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        return\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    })\n\n    return rowsToFilter\n  }\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterRows(rowsToFilter, depth)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function globalFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const globalFilter = instance.getState().globalFilter\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { SortingFn } from '../features/Sorting'\n\nexport function sortRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const sortingState = instance.getState().sorting\n\n  const sortedFlatRows: Row<TGenerics>[] = []\n\n  // Filter out sortings that correspond to non existing columns\n  const availableSorting = sortingState.filter(sort =>\n    instance.getColumnCanSort(sort.id)\n  )\n\n  const columnInfoById: Record<\n    string,\n    {\n      sortUndefined?: false | -1 | 1\n      invertSorting?: boolean\n      sortingFn: SortingFn<TGenerics>\n    }\n  > = {}\n\n  availableSorting.forEach(sortEntry => {\n    const column = instance.getColumn(sortEntry.id)!\n\n    columnInfoById[sortEntry.id] = {\n      sortUndefined: column.sortUndefined,\n      invertSorting: column.invertSorting,\n      sortingFn: instance.getColumnSortingFn(sortEntry.id)!,\n    }\n  })\n\n  const sortData = (rows: Row<TGenerics>[]) => {\n    // This will also perform a stable sorting using the row index\n    // if needed.\n    const sortedData = rows.slice()\n\n    sortedData.sort((rowA, rowB) => {\n      for (let i = 0; i < availableSorting.length; i += 1) {\n        const sortEntry = availableSorting[i]!\n        const columnInfo = columnInfoById[sortEntry.id]!\n        const isDesc = sortEntry?.desc ?? false\n\n        if (columnInfo.sortUndefined) {\n          const aValue = rowA.values[sortEntry.id]\n          const bValue = rowB.values[sortEntry.id]\n\n          const aUndefined = typeof aValue === 'undefined'\n          const bUndefined = typeof bValue === 'undefined'\n\n          if (aUndefined || bUndefined) {\n            return aUndefined && bUndefined ? 0 : aUndefined ? 1 : -1\n          }\n        }\n\n        // This function should always return in ascending order\n        let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n        if (sortInt !== 0) {\n          if (isDesc) {\n            sortInt *= -1\n          }\n\n          if (columnInfo.invertSorting) {\n            sortInt *= -1\n          }\n\n          return sortInt\n        }\n      }\n\n      return rowA.index - rowB.index\n    })\n\n    // If there are sub-rows, sort them\n    sortedData.forEach(row => {\n      sortedFlatRows.push(row)\n      if (!row.subRows || row.subRows.length <= 1) {\n        return\n      }\n      row.subRows = sortData(row.subRows)\n    })\n\n    return sortedData\n  }\n\n  return {\n    rows: sortData(rowModel.rows),\n    flatRows: sortedFlatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { flattenBy } from '../utils'\n\nexport function groupRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const groupingState = instance.getState().grouping\n  // Filter the grouping list down to columns that exist\n  const existingGrouping = groupingState.filter(columnId =>\n    instance.getColumn(columnId)\n  )\n\n  // Find the columns that can or are aggregating\n  // Uses each column to aggregate rows into a single value\n  const aggregateRowsToValues = (\n    leafRows: Row<TGenerics>[],\n    groupedRows: Row<TGenerics>[],\n    depth: number\n  ) => {\n    const values: Record<string, unknown> = {}\n\n    instance.getAllLeafColumns().forEach(column => {\n      // Don't aggregate columns that are in the grouping\n      if (existingGrouping.includes(column.id)) {\n        values[column.id] = groupedRows[0]\n          ? groupedRows[0].values[column.id]\n          : null\n        return\n      }\n\n      // Aggregate the values\n      const aggregateFn = instance.getColumnAggregationFn(column.id)\n\n      if (aggregateFn) {\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            columnValue = column.aggregateValue(columnValue)\n          }\n\n          return columnValue\n        })\n\n        values[column.id] = aggregateFn(leafValues, groupedValues)\n      } else if (column.aggregationType) {\n        console.info({ column })\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `React Table: Invalid column.aggregateType option for column listed above`\n            : ''\n        )\n      } else {\n        values[column.id] = null\n      }\n    })\n\n    return values\n  }\n\n  const groupedFlatRows: Row<TGenerics>[] = []\n  const groupedRowsById: Record<string, Row<TGenerics>> = {}\n  // const onlyGroupedFlatRows: Row[] = [];\n  // const onlyGroupedRowsById: Record<RowId, Row> = {};\n  // const nonGroupedFlatRows: Row[] = [];\n  // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n  // Recursively group the data\n  const groupUpRecursively = (\n    rows: Row<TGenerics>[],\n    depth = 0,\n    parentId: string\n  ) => {\n    // This is the last level, just return the rows\n    if (depth === existingGrouping.length) {\n      return rows\n    }\n\n    const columnId = existingGrouping[depth]!\n\n    // Group the rows together for this level\n    const rowGroupsMap = groupBy(rows, columnId)\n\n    // Peform aggregations for each group\n    const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n      ([groupingValue, groupedRows], index) => {\n        let id = `${columnId}:${groupingValue}`\n        id = parentId ? `${parentId}>${id}` : id\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth\n          ? flattenBy(groupedRows, row => row.leafRows)\n          : groupedRows\n\n        const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n        const row = instance.createRow(id, undefined, index, depth, values)\n\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n        })\n\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return row\n      }\n    )\n\n    return aggregatedGroupedRows\n  }\n\n  const groupedRows = groupUpRecursively(sortedRowModel.rows, 0, '')\n\n  groupedRows.forEach(subRow => {\n    groupedFlatRows.push(subRow)\n    groupedRowsById[subRow.id] = subRow\n    // if (subRow.getIsGrouped?.()) {\n    //   onlyGroupedFlatRows.push(subRow);\n    //   onlyGroupedRowsById[subRow.id] = subRow;\n    // } else {\n    //   nonGroupedFlatRows.push(subRow);\n    //   nonGroupedRowsById[subRow.id] = subRow;\n    // }\n  })\n\n  return {\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n  }\n}\n\nfunction groupBy<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.values[columnId]}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function expandRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const { expandSubRows } = instance.options\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, RowModel } from '../types'\nimport { expandRowsFn } from './expandRowsFn'\n\nexport function paginateRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const { pageSize, pageIndex } = instance.getState().pagination\n  let { rows, flatRows, rowsById } = rowModel\n  const pageStart = pageSize * pageIndex\n  const pageEnd = pageStart + pageSize\n\n  rows = rows.slice(pageStart, pageEnd)\n\n  if (!instance.options.paginateExpandedRows) {\n    return expandRowsFn(instance, {\n      rows,\n      flatRows,\n      rowsById,\n    })\n  }\n\n  return {\n    rows,\n    flatRows,\n    rowsById,\n  }\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","propGetter","initial","getter","memo","getDeps","fn","opts","deps","result","depTime","debug","performance","now","newDeps","depsChanged","some","dep","index","oldResult","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","map","_","filter","Boolean","reduce","accu","a","b","parent","undefined","flexRender","Comp","props","isReactComponent","component","isClassComponent","isExoticComponent","proto","Object","getPrototypeOf","prototype","$$typeof","includes","description","Please_use_the_create_table_column_utilities_to_define_columns","Symbol","Visibility","getInitialState","columnVisibility","getDefaultOptions","onColumnVisibilityChange","getDefaultColumn","defaultIsVisible","createColumn","column","getCanHide","getColumnCanHide","id","getIsVisible","getColumnIsVisible","toggleVisibility","value","toggleColumnVisibility","getToggleVisibilityProps","userProps","type","checked","title","e","target","getInstance","getVisibleFlatColumns","getAllFlatColumns","join","allFlatColumns","options","debugAll","debugColumns","getVisibleLeafColumns","getAllLeafColumns","setColumnVisibility","getState","columnId","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","getColumn","Error","enableHiding","defaultCanHide","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","indeterminate","aggregationTypes","sum","extent","mean","median","unique","uniqueCount","count","_leafValues","childValues","next","leafValues","values","Array","from","Set","size","Grouping","aggregationType","grouping","onGroupingChange","autoResetGrouping","groupedColumnMode","getCanGroup","getColumnCanGroup","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","registered","_notifyGroupingReset","autoResetAll","resetGrouping","getColumnAutoAggregationFn","firstRow","getCoreRowModel","flatRows","toString","call","getColumnAggregationFn","userAggregationTypes","getColumnAutoFilterFn","setGrouping","enableGrouping","defaultCanGroup","accessorFn","indexOf","initialState","canGroup","initialProps","onClick","persist","getRowIsGrouped","rowId","getRow","groupingColumnId","getPreGroupedRowModel","getSortedRowModel","getGroupedRowModel","groupRowsFn","rowModel","debugTable","_notifyExpandedReset","createRow","row","createCell","cell","_instance","getIsPlaceholder","getIsAggregated","subRows","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","g","find","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","getOrderColumnsFn","columns","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","splice","Pinning","columnPinning","left","right","onColumnPinningChange","getCanPin","getColumnCanPin","getPinnedIndex","getColumnPinnedIndex","getIsPinned","getColumnIsPinned","pin","position","pinColumn","setColumnPinning","resetColumnPinning","columnIds","getLeafColumns","enablePinning","defaultCanPin","leafColumnIds","isLeft","isRight","defaultColumnSizing","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","ColumnSizing","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","setColumnSizing","setColumnSizingInfo","resetColumnSizing","resetHeaderSizeInfo","resetColumnSize","rest","resetHeaderSize","headerId","header","getHeader","getHeaderCanResize","getColumnCanResize","enableResizing","enableColumnResizing","defaultCanResize","getColumnIsResizing","getHeaderIsResizing","getHeaderResizerProps","canResize","getCanResize","onResizeStart","isTouchStartEvent","touches","getWidth","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","headerWidth","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","draggable","role","onMouseDown","onTouchStart","getIsResizing","resetSize","createHeader","getResizerProps","passiveSupported","supported","window","err","Headers","_getAllVisibleCells","getAllCells","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","center","allCells","leftAndRight","cells","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","leafHeaders","recurseHeader","h","getHeaderProps","getFooterProps","renderHeader","renderFooter","footer","assign","getHeaderGroups","getAllColumns","allColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","process","env","NODE_ENV","warn","getHeaderGroupProps","getFooterGroupProps","getTotalWidth","columnsToGroup","headerFamily","maxDepth","findMaxDepth","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","filterTypes","includesString","includesStringSensitive","equalsString","equalsStringSensitive","arrIncludes","arrIncludesAll","equals","weakEquals","betweenNumberRange","rows","filterValue","search","toLowerCase","autoRemove","val","testFalsey","rowValue","every","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterType","Filters","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","autoResetColumnFilters","filterFromChildrenUp","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","getAllCellsByColumnId","getFacetInfo","getPreFilteredRows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","i","has","set","get","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","_notifyFiltersReset","resetSorting","resetColumnFilters","resetGlobalFilter","isArray","getGlobalAutoFilterFn","getColumnFilterFn","userFilterTypes","getGlobalFilterFn","setColumnFilters","updateFn","filterFn","shouldAutoRemoveFilter","setGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","enableGlobalFilter","defaultCanGlobalFilter","previousfilter","newFilter","newFilterObj","getPreFilteredRowModel","getPreColumnFilteredRowModel","getColumnFilteredRowModel","columnFilterRowsFn","columnFiltersFn","columnFilteredRowModel","nonFilteredColumns","getPreGlobalFilteredRowModel","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","_notifySortingReset","reSplitAlphaNumeric","sortTypes","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","rowA","rowB","compareAlphanumeric","aStr","bStr","split","aa","bb","an","parseInt","bn","combo","sort","compareBasic","getTime","Sorting","sortType","sorting","onSortingChange","autoResetSorting","isMultiSortEvent","shiftKey","getCanSort","getColumnCanSort","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","desc","isMulti","toggleColumnSorting","getToggleSortingProps","getColumnAutoSortingFn","firstRows","slice","isString","getColumnAutoSortDir","getColumnSortingFn","userSortTypes","setSorting","multi","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","enableSorting","defaultCanSort","enableMultiSort","columnSort","canSort","getPreSortedRowModel","sortRowsFn","sortingFn","Expanding","expanded","onExpandedChange","autoResetExpanded","getIsRowExpanded","original","expandSubRows","paginateExpandedRows","resetExpanded","setExpanded","toggleRowExpanded","exists","oldExpanded","keys","getRowModel","rowsById","toggleAllRowsExpanded","getIsAllRowsExpanded","getRowCanExpand","enableExpanded","defaultCanExpand","getToggleExpandedProps","canExpand","getToggleAllRowsExpandedProps","getExpandedDepth","rowIds","splitId","getExpandedRowModel","expandRowsFn","_notifyPageIndexReset","getPreExpandedRowModel","toggleExpanded","getIsExpanded","getCanExpand","Pagination","pagination","pageCount","pageIndex","pageSize","onPaginationChange","autoResetPageIndex","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","getCanPreviousPage","getCanNextPage","ceil","getPrePaginationRowModel","previousPage","nextPage","getPaginationRowModel","paginateRowsFn","_pagination","getPageCount","RowSelection","rowSelection","onRowSelectionChange","autoResetRowSelection","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","_notifyRowSelectionReset","resetRowSelection","setRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","toggleRowSelected","isSelected","getIsSelected","selectedRowIds","getPreSelectedRowModel","getSelectedRowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","getRowIsSelected","isRowSelected","getRowIsSomeSelected","getRowCanSelect","getRowCanSelectSubRows","getRowCanMultiSelect","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleRowSelectedProps","isSomeSelected","getIsSomeSelected","canSelect","getCanSelect","toggleSelected","getToggleAllRowsSelectedProps","isSomeRowsSelected","getToggleAllPageRowsSelectedProps","isSomePageRowsSelected","getToggleSelectedProps","getCanMultiSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","features","createTableInstance","defaultOptions","feature","buildOptions","finalInstance","reset","setOptions","getRowId","state","onStateChange","defaultColumn","getColumnDefs","columnDef","accessorKey","originalRow","getColumnWidth","getFlatColumns","flatMap","columnDefs","recurseColumns","getAllFlatColumnsById","flatColumns","acc","columnSize","getCellProps","renderCell","rowIndex","leafRows","getRowProps","data","accessRow","parentRows","getSubRows","originalSubRows","getCell","getTableProps","getTableBodyProps","getTableWidth","getLeftTableWidth","getCenterTableWidth","getRightTableWidth","createTableFactory","_createTable","createTable","__","__options","createColumns","createDisplayColumn","createGroup","createDataColumn","accessor","newFilteredFlatRows","newFilteredRowsById","filterRows","rowsToFilter","preFilteredRows","recurseFilterRows","filterableColumns","filterableColumnIds","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","sortedRowModel","groupingState","existingGrouping","aggregateRowsToValues","groupedRows","aggregateFn","groupedValues","columnValue","aggregateValue","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupMap","resKey","previous","expandedRows","handleRow","pageStart","pageEnd"],"mappings":"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"}