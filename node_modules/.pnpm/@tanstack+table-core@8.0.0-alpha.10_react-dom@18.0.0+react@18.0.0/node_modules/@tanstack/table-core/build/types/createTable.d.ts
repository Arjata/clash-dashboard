import { CustomFilterTypes } from './features/Filters';
import { CustomAggregationTypes } from './features/Grouping';
import { CustomSortingTypes } from './features/Sorting';
import { ColumnDef, AccessorFn, DefaultGenerics, PartialGenerics, _NonGenerated } from './types';
import { Overwrite, PartialKeys } from './utils';
export declare type CreatTableFactory<TGenerics extends Partial<DefaultGenerics>> = <TRow>() => TableFactory<Overwrite<TGenerics, {
    Row: TRow;
}>>;
export declare type CreateTableFactoryOptions<TFilterFns extends CustomFilterTypes<any>, TSortingFns extends CustomSortingTypes<any>, TAggregationFns extends CustomAggregationTypes<any>> = {
    filterFns?: TFilterFns;
    sortingFns?: TSortingFns;
    aggregationFns?: TAggregationFns;
};
export declare function createTableFactory<TFilterFns extends CustomFilterTypes<any>, TSortingFns extends CustomSortingTypes<any>, TAggregationFns extends CustomAggregationTypes<any>>(opts: CreateTableFactoryOptions<TFilterFns, TSortingFns, TAggregationFns>): CreatTableFactory<Overwrite<PartialGenerics, {
    FilterFns: TFilterFns;
    SortingFns: TSortingFns;
    AggregationFns: TAggregationFns;
}>>;
export declare type TableFactory<TGenerics extends Partial<DefaultGenerics>> = {
    __options: CreateTableFactoryOptions<any, any, any>;
    createColumns: (columns: ColumnDef<TGenerics>[]) => ColumnDef<TGenerics>[];
    createGroup: (column: Overwrite<Overwrite<_NonGenerated<ColumnDef<TGenerics>>, {
        header: string;
        id?: string;
    }> | Overwrite<_NonGenerated<ColumnDef<TGenerics>>, {
        id: string;
        header?: string | ColumnDef<TGenerics>['header'];
    }>, {
        accessorFn?: never;
        accessorKey?: never;
    }>) => ColumnDef<TGenerics>;
    createDisplayColumn: (column: PartialKeys<_NonGenerated<ColumnDef<TGenerics>>, 'accessorFn' | 'accessorKey'>) => ColumnDef<TGenerics>;
    createDataColumn: <TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']>(accessor: TAccessor, column: Overwrite<TAccessor extends (...args: any[]) => any ? _NonGenerated<ColumnDef<TGenerics>> : TAccessor extends keyof TGenerics['Row'] ? Overwrite<_NonGenerated<ColumnDef<TGenerics>>, {
        id?: string;
    }> : never, {
        accessorFn?: never;
        accessorKey?: never;
    }>) => ColumnDef<TGenerics>;
};
export declare function createTable<TRow>(): TableFactory<Overwrite<Partial<DefaultGenerics>, {
    Row: TRow;
}>>;
