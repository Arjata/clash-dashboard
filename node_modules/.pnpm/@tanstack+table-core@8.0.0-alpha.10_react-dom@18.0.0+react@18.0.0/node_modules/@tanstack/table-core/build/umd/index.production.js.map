{"version":3,"file":"index.production.js","sources":["../../src/utils.tsx","../../src/types.ts","../../src/features/Visibility.ts","../../src/aggregationTypes.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pinning.ts","../../src/features/ColumnSizing.ts","../../src/features/Headers.ts","../../src/filterTypes.ts","../../src/features/Filters.ts","../../src/sortTypes.ts","../../src/features/Sorting.ts","../../src/features/Expanding.ts","../../src/features/Pagination.ts","../../src/features/RowSelection.ts","../../src/core.tsx","../../src/createTable.tsx","../../src/utils/expandRowsFn.ts","../../src/utils/columnFilterRowsFn.ts","../../src/utils/globalFilterRowsFn.ts","../../src/utils/groupRowsFn.ts","../../src/utils/paginateRowsFn.ts","../../src/utils/sortRowsFn.ts"],"sourcesContent":["import React from 'react'\nimport {\n  Getter,\n  NoInfer,\n  PropGetterValue,\n  Renderable,\n  TableState,\n  Updater,\n} from './types'\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U> = Omit<T, keyof U> & U\n\nexport type DataUpdateFunction<T> = (input: T) => T\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<T>)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState,>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\ntype PropGetterImpl = <TBaseProps, TGetter extends Getter<TBaseProps>>(\n  initial: TBaseProps,\n  userProps?: TGetter\n) => PropGetterValue<TBaseProps, TGetter>\n\n// @ts-ignore // Just rely on the type, not the implementation\nexport const propGetter: PropGetterImpl = (initial, getter) => {\n  if (isFunction(getter)) {\n    return getter(initial)\n  }\n\n  return {\n    ...initial,\n    ...(getter ?? {}),\n  }\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: string\n    debug?: () => any\n    onChange?: (result: TResult, previousResult?: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = performance.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (depsChanged) {\n      let oldResult = result\n      let resultTime: number\n      if (opts.key && opts.debug) resultTime = performance.now()\n      result = fn(...newDeps)\n      deps = newDeps\n      opts?.onChange?.(result, oldResult)\n\n      if (opts.key && opts.debug) {\n        if (opts?.debug()) {\n          const depEndTime =\n            Math.round((performance.now() - depTime!) * 100) / 100\n          const resultEndTime =\n            Math.round((performance.now() - resultTime!) * 100) / 100\n          const resultFpsPercentage = resultEndTime / 16\n\n          const pad = (str: number | string, num: number) => {\n            str = String(str)\n            while (str.length < num) {\n              str = ' ' + str\n            }\n            return str\n          }\n\n          console.info(\n            `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n            `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n            opts?.key,\n            {\n              length: `${deps.length} -> ${newDeps.length}`,\n              ...newDeps\n                .map((_, index) => {\n                  if (deps[index] !== newDeps[index]) {\n                    return [index, deps[index], newDeps[index]]\n                  }\n\n                  return false\n                })\n                .filter(Boolean)\n                .reduce(\n                  (accu, [a, b]: any) => ({\n                    ...accu,\n                    [a]: b,\n                  }),\n                  {}\n                ),\n              parent,\n            }\n          )\n        }\n      }\n\n      oldResult = undefined\n    }\n\n    return result!\n  }\n}\n\nexport type Render = typeof flexRender\n\nexport function flexRender<TProps extends {}>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode {\n  return !Comp ? null : isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component: unknown): component is React.FC {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\n// export function hashString(str: string, seed = 0): string {\n//   let h1 = 0xdeadbeef ^ seed,\n//     h2 = 0x41c6ce57 ^ seed\n//   for (let i = 0, ch; i < str.length; i++) {\n//     ch = str.charCodeAt(i)\n//     h1 = Math.imul(h1 ^ ch, 2654435761)\n//     h2 = Math.imul(h2 ^ ch, 1597334677)\n//   }\n//   h1 =\n//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)\n//   h2 =\n//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)\n//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()\n// }\n","import React from 'react'\nimport {\n  CoreColumn,\n  CoreColumnDef,\n  CoreOptions,\n  CoreRow,\n  TableCore,\n} from './core'\nimport {\n  VisibilityInstance,\n  VisibilityTableState,\n  VisibilityColumn as ColumnVisibilityColumn,\n  VisibilityOptions,\n  VisibilityColumnDef,\n  VisibilityRow,\n} from './features/Visibility'\nimport {\n  ColumnOrderInstance,\n  ColumnOrderOptions,\n  ColumnOrderTableState,\n} from './features/Ordering'\nimport {\n  ColumnPinningColumn,\n  ColumnPinningColumnDef,\n  ColumnPinningInstance,\n  ColumnPinningOptions,\n  ColumnPinningTableState,\n} from './features/Pinning'\nimport { HeadersInstance, HeadersRow } from './features/Headers'\nimport {\n  FiltersColumn,\n  FiltersColumnDef,\n  FiltersInstance,\n  FiltersOptions,\n  FiltersTableState,\n} from './features/Filters'\nimport {\n  SortingColumn,\n  SortingColumnDef,\n  SortingInstance,\n  SortingOptions,\n  SortingTableState,\n} from './features/Sorting'\nimport {\n  GroupingColumn,\n  GroupingColumnDef,\n  GroupingInstance,\n  GroupingOptions,\n  GroupingRow,\n  GroupingTableState,\n} from './features/Grouping'\nimport {\n  ExpandedInstance,\n  ExpandedOptions,\n  ExpandedTableState,\n  ExpandedRow,\n} from './features/Expanding'\nimport { Overwrite } from './utils'\nimport {\n  ColumnSizingColumn,\n  ColumnSizingColumnDef,\n  ColumnSizingHeader,\n  ColumnSizingInstance,\n  ColumnSizingOptions,\n  ColumnSizingTableState,\n} from './features/ColumnSizing'\nimport {\n  PaginationInstance,\n  PaginationOptions,\n  PaginationTableState,\n} from './features/Pagination'\nimport {\n  RowSelectionInstance,\n  RowSelectionOptions,\n  RowSelectionRow,\n  RowSelectionTableState,\n} from './features/RowSelection'\n\n// declare global {\n//   const process.env.NODE_ENV !== 'production': boolean\n// }\n\nexport type DefaultGenerics = {\n  Row: unknown\n  Value: unknown\n  FilterFns: object\n  SortingFns: object\n  AggregationFns: object\n}\n\nexport type PartialGenerics = Partial<DefaultGenerics>\n\nexport type TableInstance<TGenerics extends PartialGenerics> =\n  TableCore<TGenerics> &\n    VisibilityInstance<TGenerics> &\n    ColumnOrderInstance<TGenerics> &\n    ColumnPinningInstance<TGenerics> &\n    HeadersInstance<TGenerics> &\n    FiltersInstance<TGenerics> &\n    SortingInstance<TGenerics> &\n    GroupingInstance<TGenerics> &\n    ColumnSizingInstance<TGenerics> &\n    ExpandedInstance<TGenerics> &\n    PaginationInstance<TGenerics> &\n    RowSelectionInstance<TGenerics>\n\nexport type Renderable<TProps> =\n  | React.ReactNode\n  | React.FunctionComponent<TProps>\n  | React.Component<TProps>\n\n//\n\nexport type Options<TGenerics extends PartialGenerics> =\n  CoreOptions<TGenerics> &\n    VisibilityOptions &\n    ColumnOrderOptions &\n    ColumnPinningOptions &\n    FiltersOptions<TGenerics> &\n    SortingOptions<TGenerics> &\n    GroupingOptions<TGenerics> &\n    ExpandedOptions<TGenerics> &\n    ColumnSizingOptions &\n    PaginationOptions<TGenerics> &\n    RowSelectionOptions<TGenerics>\n\nexport type Updater<T> = T | ((old: T) => T)\nexport type OnChangeFn<T> = (updaterOrValue: Updater<T>, value: T) => void\n\nexport type TableState = VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n\nexport type Row<TGenerics extends PartialGenerics> = CoreRow<TGenerics> &\n  VisibilityRow<TGenerics> &\n  HeadersRow<TGenerics> &\n  GroupingRow &\n  RowSelectionRow &\n  ExpandedRow\n\nexport type RowValues = {\n  [key: string]: any\n}\n\nexport type RowModel<TGenerics extends PartialGenerics> = {\n  rows: Row<TGenerics>[]\n  flatRows: Row<TGenerics>[]\n  rowsById: Record<string, Row<TGenerics>>\n}\n\nexport type AccessorFn<TData> = (originalRow: TData, index: number) => any\n\nexport const Please_use_the_create_table_column_utilities_to_define_columns: unique symbol =\n  Symbol()\n\nexport type _NonGenerated<T> = Overwrite<\n  T,\n  {\n    [Please_use_the_create_table_column_utilities_to_define_columns]?: never\n  }\n>\n\nexport type ColumnDef<TGenerics extends PartialGenerics> =\n  CoreColumnDef<TGenerics> &\n    VisibilityColumnDef &\n    ColumnPinningColumnDef &\n    FiltersColumnDef<TGenerics> &\n    SortingColumnDef<TGenerics> &\n    GroupingColumnDef<TGenerics> &\n    ColumnSizingColumnDef\n\nexport type Column<TGenerics extends PartialGenerics> = ColumnDef<TGenerics> &\n  CoreColumn<TGenerics> &\n  ColumnVisibilityColumn &\n  ColumnPinningColumn &\n  FiltersColumn<TGenerics> &\n  SortingColumn<TGenerics> &\n  GroupingColumn<TGenerics> &\n  ColumnSizingColumn<TGenerics>\n\nexport type Cell<TGenerics extends PartialGenerics> = {\n  id: string\n  rowId: string\n  columnId: string\n  value: TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  getCellProps: PropGetter<CellProps>\n  renderCell: () => React.ReactNode\n}\n\nexport type Header<TGenerics extends PartialGenerics> = CoreHeader<TGenerics> &\n  ColumnSizingHeader<TGenerics>\n\nexport type CoreHeader<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  column: Column<TGenerics>\n  getWidth: () => number\n  subHeaders: Header<TGenerics>[]\n  colSpan?: number\n  rowSpan?: number\n  getHeaderProps: PropGetter<HeaderProps>\n  getFooterProps: PropGetter<HeaderProps>\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder?: boolean\n  placeholderId?: string\n  renderHeader: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n  renderFooter: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n}\n\nexport type HeaderGroup<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n  getHeaderGroupProps: PropGetter<HeaderGroupProps>\n  getFooterGroupProps: PropGetter<FooterGroupProps>\n}\n\nexport type HeaderRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type FooterRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type CellRenderProps<TCell, TRow> = {\n  cell: TCell\n  row: TRow\n}\n\nexport type TableProps = {\n  role: string\n}\n\nexport type TableBodyProps = {\n  role: string\n}\n\nexport type TableHeadProps = {\n  key: string\n  role: string\n}\n\nexport type TableFooterProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderGroupProps = {\n  key: string\n  role: string\n}\n\nexport type FooterGroupProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type FooterProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type RowProps = {\n  key: string\n  role: string\n}\n\nexport type CellProps = {\n  key: string\n  role: string\n}\n\n//\n\nexport type PropGetter<TBase> = <TGetter extends Getter<TBase>>(\n  userProps?: TGetter\n) => PropGetterValue<TBase, TGetter>\n\nexport type Getter<TInitial> =\n  | ((initial: TInitial) => object)\n  | object\n  | undefined\n\nexport type PropGetterValue<TBase, TGetter> = TGetter extends undefined\n  ? TBase\n  : TGetter extends (...args: any[]) => infer TReturn\n  ? Overwrite<TBase, TReturn>\n  : TGetter extends object\n  ? Overwrite<TBase, TGetter>\n  : never\n\nexport type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n","import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends PartialGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends PartialGenerics> = {\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport const Visibility = {\n  getInitialState: (): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      getCanHide: () => instance.getColumnCanHide(column.id),\n      getIsVisible: () => instance.getColumnIsVisible(column.id),\n      toggleVisibility: value =>\n        instance.toggleColumnVisibility(column.id, value),\n      getToggleVisibilityProps: userProps => {\n        const props: ToggleVisibilityProps = {\n          type: 'checkbox',\n          checked: column.getIsVisible?.(),\n          title: 'Toggle Column Visibility',\n          onChange: (e: MouseEvent | TouchEvent) => {\n            column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n          },\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    return {\n      getVisibleFlatColumns: memo(\n        () => [\n          instance.getAllFlatColumns(),\n          instance\n            .getAllFlatColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getVisibleLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance\n            .getAllLeafColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnVisibility)\n        ),\n\n      toggleColumnVisibility: (columnId, value) => {\n        if (!columnId) return\n\n        if (instance.getColumnCanHide(columnId)) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n          }))\n        }\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getColumnIsVisible: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnVisibility?.[columnId] ??\n          column.defaultIsVisible ??\n          true\n        )\n      },\n\n      getColumnCanHide: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.options.enableHiding ??\n          column.enableHiding ??\n          column.defaultCanHide ??\n          true\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityProps: userProps => {\n        const props: ToggleAllColumnsVisibilityProps = {\n          onChange: (e: MouseEvent) => {\n            instance.toggleAllColumnsVisible(\n              (e.target as HTMLInputElement)?.checked\n            )\n          },\n          type: 'checkbox',\n          title: 'Toggle visibility for all columns',\n          checked: instance.getIsAllColumnsVisible(),\n          indeterminate:\n            !instance.getIsAllColumnsVisible() &&\n            instance.getIsSomeColumnsVisible()\n              ? 'indeterminate'\n              : undefined,\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n}\n","export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_leafValues: unknown[], childValues: unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childValues.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_leafValues: unknown[], childValues: unknown[]) {\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(leafValues: unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of leafValues as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(values: unknown[]) {\n  if (!values.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(values: T[]) {\n  return Array.from(new Set(values).values())\n}\n\nfunction uniqueCount(values: unknown[]) {\n  return new Set(values).size\n}\n\nfunction count(values: unknown[]) {\n  return values.length\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n  PartialGenerics,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends PartialGenerics> = (\n  leafValues: TGenerics['Row'][],\n  childValues: TGenerics['Row'][]\n) => any\n\nexport type CustomAggregationTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  renderAggregatedCell?: () => React.ReactNode\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends PartialGenerics> = {\n  aggregationTypes?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<TGenerics extends PartialGenerics> = {\n  _notifyGroupingReset: () => void\n  getColumnAutoAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationType: 'auto',\n    }\n  },\n\n  getInitialState: (): GroupingTableState => {\n    return {\n      grouping: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      autoResetGrouping: true,\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      aggregationType: column.aggregationType,\n      getCanGroup: () => instance.getColumnCanGroup(column.id),\n      getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n      getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n      toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n      getToggleGroupingProps: userProps =>\n        instance.getToggleGroupingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyGroupingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetGrouping\n        ) {\n          instance.resetGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'number') {\n          return aggregationTypes.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationTypes.extent\n        }\n\n        return aggregationTypes.count\n      },\n      getColumnAggregationFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userAggregationTypes = instance.options.aggregationTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationType)\n          ? column.aggregationType\n          : column.aggregationType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userAggregationTypes as Record<string, any>)?.[\n              column.aggregationType as string\n            ] ??\n            (aggregationTypes[\n              column.aggregationType as BuiltInAggregationType\n            ] as AggregationFn<TGenerics>)\n      },\n\n      setGrouping: updater =>\n        instance.options.onGroupingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().grouping)\n        ),\n\n      toggleColumnGrouping: columnId => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(columnId)) {\n            return old.filter(d => d !== columnId)\n          }\n\n          return [...(old ?? []), columnId]\n        })\n      },\n\n      getColumnCanGroup: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableGrouping ??\n          instance.options.enableGrouping ??\n          column.defaultCanGroup ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsGrouped: columnId => {\n        return instance.getState().grouping?.includes(columnId)\n      },\n\n      getColumnGroupedIndex: columnId =>\n        instance.getState().grouping?.indexOf(columnId),\n\n      resetGrouping: () => {\n        instance.setGrouping(instance.initialState?.grouping ?? [])\n      },\n\n      getToggleGroupingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        const canGroup = column.getCanGroup()\n\n        const initialProps: ToggleGroupingProps = {\n          title: canGroup ? 'Toggle Grouping' : undefined,\n          onClick: canGroup\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleGrouping?.()\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: memo(\n        () => [\n          instance.getState().grouping,\n          instance.getSortedRowModel(),\n          instance.options.groupRowsFn,\n        ],\n        (grouping, rowModel, groupRowsFn) => {\n          if (!groupRowsFn || !grouping.length) {\n            return rowModel\n          }\n\n          return groupRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => instance.getRowIsGrouped(row.id),\n    }\n  },\n\n  createCell: <TGenerics extends PartialGenerics>(\n    cell: Cell<TGenerics> & GroupingCell,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    _instance: TableInstance<TGenerics>\n  ): GroupingCell => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n    }\n  },\n\n  orderColumns: <TGenerics extends PartialGenerics>(\n    leafColumns: Column<TGenerics>[],\n    grouping: string[],\n    groupedColumnMode?: GroupingColumnMode\n  ) => {\n    if (!grouping?.length || !groupedColumnMode) {\n      return leafColumns\n    }\n\n    const nonGroupingColumns = leafColumns.filter(\n      col => !grouping.includes(col.id)\n    )\n\n    if (groupedColumnMode === 'remove') {\n      return nonGroupingColumns\n    }\n\n    const groupingColumns = grouping\n      .map(g => leafColumns.find(col => col.id === g)!)\n      .filter(Boolean)\n\n    return [...groupingColumns, ...nonGroupingColumns]\n  },\n}\n","import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  PartialGenerics,\n} from '../types'\n\nimport { Grouping } from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends PartialGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (columns: Column<TGenerics>[]) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering = {\n  getInitialState: (): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnOrder)\n        ),\n      resetColumnOrder: () => {\n        instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n      },\n      getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return Grouping.orderColumns(\n            orderedColumns,\n            grouping,\n            groupedColumnMode\n          )\n        },\n        {\n          key: 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  PartialGenerics,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater } from '../utils'\n\ntype ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n  defaultCanPin?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningInstance<TGenerics extends PartialGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: () => void\n  pinColumn: (columnId: string, position: ColumnPinningPosition) => void\n  getColumnCanPin: (columnId: string) => boolean\n  getColumnIsPinned: (columnId: string) => ColumnPinningPosition\n  getColumnPinnedIndex: (columnId: string) => number\n}\n\n//\n\nexport const Pinning = {\n  getInitialState: (): ColumnPinningTableState => {\n    return {\n      columnPinning: {\n        left: [],\n        right: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      getCanPin: () => instance.getColumnCanPin(column.id),\n      getPinnedIndex: () => instance.getColumnPinnedIndex(column.id),\n      getIsPinned: () => instance.getColumnIsPinned(column.id),\n      pin: position => instance.pinColumn(column.id, position),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnPinning)\n        ),\n\n      resetColumnPinning: () =>\n        instance.setColumnPinning(instance.initialState?.columnPinning ?? {}),\n\n      pinColumn: (columnId, position) => {\n        const column = instance.getColumn(columnId)\n\n        const columnIds = column\n          ?.getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getColumnCanPin: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            d.enablePinning ??\n            instance.options.enablePinning ??\n            d.defaultCanPin ??\n            !!d.accessorFn\n        )\n      },\n\n      getColumnIsPinned: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getColumnPinnedIndex: columnId => {\n        const position = instance.getColumnIsPinned(columnId)\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(columnId) ??\n              -1\n          : 0\n      },\n    }\n  },\n}\n","import {\n  MouseEvent as ReactMouseEvent,\n  TouchEvent as ReactTouchEvent,\n} from 'react'\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\n//\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnResizerProps = {\n  title?: string\n  onMouseDown?: (e: ReactMouseEvent) => void\n  onTouchStart?: (e: ReactTouchEvent) => void\n  draggable?: boolean\n  role?: string\n}\n\nexport type ColumnSizingInstance<TGenerics extends PartialGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizing>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: () => void\n  resetColumnSize: (columnId: string) => void\n  resetHeaderSize: (headerId: string) => void\n  resetHeaderSizeInfo: () => void\n  getColumnCanResize: (columnId: string) => boolean\n  getHeaderCanResize: (headerId: string) => boolean\n  getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  getColumnIsResizing: (columnId: string) => boolean\n  getHeaderIsResizing: (headerId: string) => boolean\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  defaultCanResize?: boolean\n}\n\nexport type ColumnSizingColumn<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  resetSize: () => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  width: 150,\n  minWidth: 20,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport const ColumnSizing = {\n  getInitialState: (): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: {\n        startOffset: null,\n        startSize: null,\n        deltaOffset: null,\n        deltaPercentage: null,\n        isResizingColumn: false,\n        columnSizingStart: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizing)\n        ),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizingInfo)\n        ),\n      resetColumnSizing: () => {\n        instance.setColumnSizing(instance.initialState.columnSizing ?? {})\n      },\n      resetHeaderSizeInfo: () => {\n        instance.setColumnSizingInfo(\n          instance.initialState.columnSizingInfo ?? {}\n        )\n      },\n      resetColumnSize: columnId => {\n        instance.setColumnSizing(({ [columnId]: _, ...rest }) => {\n          return rest\n        })\n      },\n      resetHeaderSize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        return instance.resetColumnSize(header.column.id)\n      },\n      getHeaderCanResize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnCanResize(header.column.id)\n      },\n      getColumnCanResize: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableResizing ??\n          instance.options.enableColumnResizing ??\n          column.defaultCanResize ??\n          true\n        )\n      },\n      getColumnIsResizing: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === columnId\n        )\n      },\n      getHeaderIsResizing: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnIsResizing(header.column.id)\n      },\n\n      getHeaderResizerProps: (headerId, userProps) => {\n        const header = instance.getHeader(headerId)\n        const column = instance.getColumn(header.column.id)\n\n        const canResize = column.getCanResize()\n\n        const onResizeStart = (e: ReactMouseEvent | ReactTouchEvent) => {\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const header = headerId ? instance.getHeader(headerId) : undefined\n\n          const startSize = header ? header.getWidth() : column.getWidth()\n\n          const columnSizingStart: [string, number][] = header\n            ? header.getLeafHeaders().map(d => [d.column.id, d.getWidth()])\n            : [[column.id, column.getWidth()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0].clientX)\n            : e.clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizing = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerWidth]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerWidth + headerWidth * deltaPercentage, 0) *\n                      100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0].clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0].clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n\n        const initialProps: ColumnResizerProps = canResize\n          ? {\n              title: 'Toggle Grouping',\n              draggable: false,\n              role: 'separator',\n              onMouseDown: (e: ReactMouseEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n              onTouchStart: (e: ReactTouchEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n            }\n          : {}\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(column.id),\n      getCanResize: () => instance.getColumnCanResize(column.id),\n      resetSize: () => instance.resetColumnSize(column.id),\n    }\n  },\n\n  createHeader: <TGenerics extends PartialGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(header.column.id),\n      getCanResize: () => instance.getColumnCanResize(header.column.id),\n      resetSize: () => instance.resetColumnSize(header.column.id),\n      getResizerProps: userProps =>\n        instance.getHeaderResizerProps(header.id, userProps),\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(\n  e: ReactTouchEvent | ReactMouseEvent\n): e is ReactTouchEvent {\n  return e.type === 'touchstart'\n}\n","import {\n  Cell,\n  Column,\n  CoreHeader,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n} from '../types'\nimport { propGetter, memo, flexRender } from '../utils'\nimport { ColumnSizing } from './ColumnSizing'\n\nexport type HeadersRow<TGenerics extends PartialGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type HeadersInstance<TGenerics extends PartialGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport const Headers = {\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): HeadersRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key: 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key: 'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          getWidth: () => {\n            let sum = 0\n\n            const recurse = (header: CoreHeader<TGenerics>) => {\n              if (header.subHeaders.length) {\n                header.subHeaders.forEach(recurse)\n              } else {\n                sum += header.column.getWidth() ?? 0\n              }\n            }\n\n            recurse(header)\n\n            return sum\n          },\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          getHeaderProps: userProps =>\n            instance.getHeaderProps(header.id, userProps)!,\n          getFooterProps: userProps =>\n            instance.getFooterProps(header.id, userProps)!,\n          renderHeader: () =>\n            flexRender(column.header, { instance, header, column }),\n          renderFooter: () =>\n            flexRender(column.footer, { instance, header, column }),\n        }\n\n        // Yes, we have to convert instance to unknown, because we know more than the compiler here.\n        return Object.assign(\n          header,\n          ColumnSizing.createHeader(header as Header<TGenerics>, instance)\n        ) as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns = leafColumns.filter(column =>\n            left?.includes(column.id)\n          )\n          const rightColumns = leafColumns.filter(column =>\n            right?.includes(column.id)\n          )\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key: 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          leafColumns = leafColumns.filter(column => left?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n        },\n        {\n          key: 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          leafColumns = leafColumns.filter(column => right?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n        },\n        {\n          key: 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n\n      getHeaderGroupProps: (id, userProps) => {\n        const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        return propGetter(\n          {\n            key: headerGroup.id,\n            role: 'row',\n          },\n          userProps\n        )\n      },\n\n      getFooterGroupProps: (id, userProps) => {\n        const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        const initialProps = {\n          key: headerGroup.id,\n          role: 'row',\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getHeaderProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        const initialProps: HeaderProps = {\n          key: header.id,\n          role: 'columnheader',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getFooterProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        const initialProps: FooterProps = {\n          key: header.id,\n          role: 'columnfooter',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getTotalWidth: () => {\n        let width = 0\n\n        instance.getVisibleLeafColumns().forEach(column => {\n          width += column.getWidth() ?? 0\n        })\n\n        return width\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends PartialGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const filterTypes = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  equalsStringSensitive,\n  arrIncludes,\n  arrIncludesAll,\n  equals,\n  weakEquals,\n  betweenNumberRange,\n}\n\nexport type BuiltInFilterType = keyof typeof filterTypes\n\nfunction includesString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).toLowerCase().includes(search)\n    })\n  })\n  return rows\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nfunction includesStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).includes(search)\n    })\n  })\n  return rows\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === search\n        : true\n    })\n  })\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined ? String(rowValue) === search : true\n    })\n  })\n}\n\nequalsStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction arrIncludes<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction arrIncludesAll<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown[]\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction equals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nfunction weakEquals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nfunction betweenNumberRange<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: [unknown, unknown]\n) {\n  let [unsafeMin, unsafeMax] = filterValue || []\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetweenNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport {\n  Column,\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TGenerics extends PartialGenerics> = {\n  (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends PartialGenerics> = (\n  value: unknown,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInFilterType\n  | TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends PartialGenerics> = {\n  filterType?: FilterType<Overwrite<TGenerics, { Value: any }>>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends PartialGenerics> = {\n  filterType: FilterType<Overwrite<TGenerics, { Value: any }>>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () => Row<TGenerics>[] | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<TGenerics extends PartialGenerics> = {\n  filterFromChildrenUp?: boolean\n  filterTypes?: TGenerics['FilterFns']\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    coreRowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  // Global\n  globalFilterType?: FilterType<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n}\n\nexport type FiltersInstance<TGenerics extends PartialGenerics> = {\n  _notifyFiltersReset: () => void\n  getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n\n  // All\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n\n  // Column Filters\n  getPreColumnFilteredRowModel: () => RowModel<TGenerics>\n  getColumnFilteredRowModel: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getPreGlobalFilteredRowModel: () => RowModel<TGenerics>\n  getGlobalFilteredRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport function getDefaultColumn<\n  TGenerics extends PartialGenerics\n>(): FiltersColumnDef<TGenerics> {\n  return {\n    filterType: 'auto',\n  }\n}\n\nexport const Filters = {\n  getInitialState: (): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      autoResetColumnFilters: true,\n      filterFromChildrenUp: true,\n      autoResetGlobalFilter: true,\n      globalFilterType: 'auto',\n      getColumnCanGlobalFilterFn: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()[column.id]?.value\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    const getFacetInfo = memo(\n      () => [column.getPreFilteredRows()],\n      (rows = []) => {\n        let preFilteredUniqueValues = new Map<any, number>()\n\n        let preFilteredMinMaxValues: [any, any] = [\n          rows[0]?.values[column.id] ?? null,\n          rows[0]?.values[column.id] ?? null,\n        ]\n\n        for (let i = 0; i < rows.length; i++) {\n          const value = rows[i]?.values[column.id]\n\n          if (preFilteredUniqueValues.has(value)) {\n            preFilteredUniqueValues.set(\n              value,\n              (preFilteredUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            preFilteredUniqueValues.set(value, 1)\n          }\n\n          if (value < preFilteredMinMaxValues[0]) {\n            preFilteredMinMaxValues[0] = value\n          } else if (value > preFilteredMinMaxValues[1]) {\n            preFilteredMinMaxValues[1] = value\n          }\n        }\n\n        return {\n          preFilteredUniqueValues,\n          preFilteredMinMaxValues,\n        }\n      },\n      {\n        key: 'column.getFacetInfo',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    )\n\n    return {\n      filterType: column.filterType,\n      getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n      getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n      getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n      getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n      getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n      setColumnFilterValue: val =>\n        instance.setColumnFilterValue(column.id, val),\n      getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n      getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n      getPreFilteredRows: () => undefined,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyFiltersReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (instance.options.autoResetAll === true) {\n          instance.resetSorting()\n        } else {\n          if (instance.options.autoResetColumnFilters) {\n            instance.resetColumnFilters()\n          }\n          if (instance.options.autoResetGlobalFilter) {\n            instance.resetGlobalFilter()\n          }\n        }\n      },\n      getColumnAutoFilterFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return filterTypes.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterTypes.betweenNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterTypes.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterTypes.arrIncludes\n        }\n\n        return filterTypes.weakEquals\n      },\n      getGlobalAutoFilterFn: () => {\n        return filterTypes.includesString\n      },\n      getColumnFilterFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userFilterTypes = instance.options.filterTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.filterType)\n          ? column.filterType\n          : column.filterType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userFilterTypes as Record<string, any>)?.[\n              column.filterType as string\n            ] ??\n            (filterTypes[\n              column.filterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterTypes: userFilterTypes, globalFilterType } =\n          instance.options\n\n        return isFunction(globalFilterType)\n          ? globalFilterType\n          : globalFilterType === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterTypes as Record<string, any>)?.[\n              globalFilterType as string\n            ] ??\n            (filterTypes[\n              globalFilterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = instance.getColumnFilterFn(column.id)\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(\n          updateFn,\n          updateFn(instance.getState().columnFilters)\n        )\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().globalFilter)\n        )\n      },\n\n      resetGlobalFilter: () => {\n        instance.setGlobalFilter(undefined)\n      },\n\n      getColumnCanColumnFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableAllFilters ??\n          column.enableColumnFilter ??\n          instance.options.enableFilters ??\n          instance.options.enableColumnFilters ??\n          column.defaultCanFilter ??\n          column.defaultCanColumnFilter ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnCanGlobalFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          ((instance.options.enableFilters ??\n            instance.options.enableGlobalFilter ??\n            column.enableAllFilters ??\n            column.enableGlobalFilter ??\n            column.defaultCanFilter ??\n            column.defaultCanGlobalFilter ??\n            !!column.accessorFn) &&\n            instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n          true\n        )\n      },\n\n      getColumnIsFiltered: columnId =>\n        instance.getColumnFilterIndex(columnId) > -1,\n\n      getColumnFilterValue: columnId =>\n        instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n      getColumnFilterIndex: columnId =>\n        instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n        -1,\n\n      setColumnFilterValue: (columnId, value) => {\n        if (!columnId) return\n\n        instance.setColumnFilters(old => {\n          const column = instance.getColumn(columnId)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `React-Table: Could not find a column with id: ${columnId}`\n              )\n            }\n            throw new Error()\n          }\n\n          const filterFn = instance.getColumnFilterFn(column.id)\n          const previousfilter = old?.find(d => d.id === columnId)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== columnId) ?? []\n          }\n\n          const newFilterObj = { id: columnId, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === columnId) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n\n      resetColumnFilters: () => {\n        instance.setColumnFilters(instance.initialState?.columnFilters ?? [])\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      getPreColumnFilteredRowModel: () => instance.getCoreRowModel(),\n      getColumnFilteredRowModel: memo(\n        () => [\n          instance.getState().columnFilters,\n          instance.getCoreRowModel(),\n          instance.options.columnFilterRowsFn,\n        ],\n        (columnFilters, rowModel, columnFiltersFn) => {\n          const columnFilteredRowModel = (() => {\n            if (!columnFilters?.length || !columnFiltersFn) {\n              return rowModel\n            }\n\n            return columnFiltersFn(instance as any, rowModel)\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => columnFilteredRowModel.rows\n          })\n\n          return columnFilteredRowModel\n        },\n        {\n          key: 'getColumnFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n      getPreGlobalFilteredRowModel: () => instance.getColumnFilteredRowModel(),\n      getGlobalFilteredRowModel: memo(\n        () => [\n          instance.getState().globalFilter,\n          instance.getColumnFilteredRowModel(),\n          instance.options.globalFilterRowsFn,\n        ],\n        (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n          const globalFilteredRowModel = (() => {\n            if (!globalFiltersFn || !globalFilterValue) {\n              return columnFilteredRowModel\n            }\n\n            return globalFiltersFn(\n              instance as TableInstance<TGenerics>,\n              columnFilteredRowModel\n            )\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => globalFilteredRowModel.rows\n          })\n\n          return globalFilteredRowModel\n        },\n        {\n          key: 'getGlobalFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifySortingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends PartialGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortTypes = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortType = keyof typeof sortTypes\n\nfunction alphanumeric<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\nfunction datetime<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.values[columnId] as Date).getTime(),\n    (rowB.values[columnId] as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.values[columnId], rowB.values[columnId])\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, reSplitAlphaNumeric, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends PartialGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends PartialGenerics> = {\n  sortType?: SortType<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends PartialGenerics> = {\n  sortType: SortType<Overwrite<TGenerics, { Value: any }>>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<TGenerics extends PartialGenerics> = {\n  sortTypes?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<TGenerics extends PartialGenerics> = {\n  _notifySortingReset: () => void\n  getColumnAutoSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n  getColumnAutoSortDir: (columnId: string) => SortDirection\n\n  getColumnSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: () => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortType: 'auto',\n    }\n  },\n\n  getInitialState: (): SortingTableState => {\n    return {\n      sorting: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      autoResetSorting: true,\n      isMultiSortEvent: (e: MouseEvent | TouchEvent) => {\n        return e.shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      sortType: column.sortType,\n      getCanSort: () => instance.getColumnCanSort(column.id),\n      getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n      getSortIndex: () => instance.getColumnSortIndex(column.id),\n      getIsSorted: () => instance.getColumnIsSorted(column.id),\n      toggleSorting: (desc, isMulti) =>\n        instance.toggleColumnSorting(column.id, desc, isMulti),\n      getToggleSortingProps: userProps =>\n        instance.getToggleSortingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifySortingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetSorting\n        ) {\n          instance.resetSorting()\n        }\n      },\n      getColumnAutoSortingFn: columnId => {\n        const firstRows = instance\n          .getGlobalFilteredRowModel()\n          .flatRows.slice(100)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.values[columnId]\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortTypes.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortTypes.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortTypes.text\n        }\n\n        return sortTypes.basic\n      },\n      getColumnAutoSortDir: columnId => {\n        const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getColumnSortingFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userSortTypes = instance.options.sortTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortType)\n          ? column.sortType\n          : column.sortType === 'auto'\n          ? instance.getColumnAutoSortingFn(columnId)\n          : (userSortTypes as Record<string, any>)?.[\n              column.sortType as string\n            ] ??\n            (sortTypes[\n              column.sortType as BuiltInSortType\n            ] as SortingFn<TGenerics>)\n      },\n\n      setSorting: updater =>\n        instance.options.onSortingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().sorting)\n        ),\n\n      toggleColumnSorting: (columnId, desc, multi) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === columnId)\n          const existingIndex = old?.findIndex(d => d.id === columnId)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            instance.getColumnAutoSortDir(columnId) === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === columnId) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== columnId)\n          }\n\n          return newSorting\n        })\n      },\n\n      getColumnCanSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableSorting ??\n          instance.options.enableSorting ??\n          column.defaultCanSort ??\n          !!column.accessorFn\n          // (!!column.accessorFn ||\n          //   column.columns?.some(c => c.id && instance.getColumnCanSort(c.id))) ??\n          // false\n        )\n      },\n\n      getColumnCanMultiSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsSorted: columnId => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === columnId)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getColumnSortIndex: columnId =>\n        instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n      resetSorting: () => {\n        instance.setSorting(instance.initialState?.sorting ?? [])\n      },\n\n      getToggleSortingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const canSort = column.getCanSort()\n\n        const initialProps: ToggleSortingProps = {\n          title: canSort ? 'Toggle Sorting' : undefined,\n          onClick: canSort\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleSorting?.(\n                  undefined,\n                  column.getCanMultiSort()\n                    ? instance.options.isMultiSortEvent?.(e)\n                    : false\n                )\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getPreSortedRowModel: () => instance.getGlobalFilteredRowModel(),\n      getSortedRowModel: memo(\n        () => [\n          instance.getState().sorting,\n          instance.getGlobalFilteredRowModel(),\n          instance.options.sortRowsFn,\n        ],\n        (sorting, rowModel, sortingFn) => {\n          if (!sortingFn || !sorting?.length) {\n            return rowModel\n          }\n\n          return sortingFn(instance, rowModel)\n        },\n        {\n          key: 'getSortedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyGroupingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<TGenerics extends PartialGenerics> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<TGenerics extends PartialGenerics> = {\n  _notifyExpandedReset: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding = {\n  getInitialState: (): ExpandedTableState => {\n    return {\n      expanded: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      getIsRowExpanded: row => !!(row?.original as { expanded?: any }).expanded,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyExpandedReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          instance.resetExpanded()\n        }\n      },\n      setExpanded: updater =>\n        instance.options.onExpandedChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().expanded)\n        ),\n      toggleRowExpanded: (rowId, expanded) => {\n        if (!rowId) return\n\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[rowId]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [rowId]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [rowId]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: () => {\n        instance.setExpanded(instance.initialState?.expanded ?? {})\n      },\n      getIsRowExpanded: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getIsRowExpanded: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded || expanded?.[rowId])\n        )\n      },\n      getRowCanExpand: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getRowCanExpand: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return (\n          instance.options.getRowCanExpand?.(row) ??\n          instance.options.enableExpanded ??\n          instance.options.defaultCanExpand ??\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          return\n        }\n\n        const canExpand = instance.getRowCanExpand(rowId)\n\n        const initialProps: ToggleExpandedProps = {\n          title: canExpand ? 'Toggle Expanded' : undefined,\n          onClick: canExpand\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                instance.toggleRowExpanded(rowId)\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getToggleAllRowsExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle All Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.persist()\n            instance.toggleAllRowsExpanded()\n          },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (\n          Object.keys(instance.getRowModel().rowsById).some(\n            id => !instance.getIsRowExpanded(id)\n          )\n        ) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getExpandedRowModel: memo(\n        () => [\n          instance.getState().expanded,\n          instance.getGroupedRowModel(),\n          instance.options.expandRowsFn,\n          instance.options.paginateExpandedRows,\n        ],\n        (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n          if (\n            !expandRowsFn ||\n            // Do not expand if rows are not included in pagination\n            !paginateExpandedRows ||\n            !Object.keys(expanded ?? {}).length\n          ) {\n            return rowModel\n          }\n\n          return expandRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getExpandedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyPageIndexReset()\n          },\n        }\n      ),\n\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded =>\n        void instance.toggleRowExpanded(row.id, expanded),\n      getIsExpanded: () => instance.getIsRowExpanded(row.id),\n      getCanExpand: () => row.subRows && !!row.subRows.length,\n      getToggleExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle Row Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.stopPropagation()\n            instance.toggleRowExpanded(row.id)\n          },\n        }\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationOptions<TGenerics extends PartialGenerics> = {\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  paginateRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n  autoResetPageIndex: boolean\n}\n\nexport type PaginationInstance<TGenerics extends PartialGenerics> = {\n  _notifyPageIndexReset: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: () => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: () => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: () => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nexport const Pagination = {\n  getInitialState: (): PaginationTableState => {\n    return {\n      pagination: {\n        pageCount: -1,\n        pageIndex: 0,\n        pageSize: 10,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n      autoResetPageIndex: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    return {\n      _notifyPageIndexReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetPageIndex\n        ) {\n          instance.resetPageIndex()\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(\n          safeUpdater,\n          functionalUpdate(safeUpdater, instance.getState().pagination)\n        )\n      },\n      resetPagination: () => {\n        instance.setPagination(\n          instance.initialState.pagination ?? {\n            pageIndex: 0,\n            pageSize: 10,\n            pageCount: -1,\n          }\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            old.pageCount && old.pageCount > 0\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: () => {\n        instance.setPageIndex(0)\n      },\n      resetPageSize: () => {\n        instance.setPageSize(instance.initialState?.pagination?.pageSize ?? 10)\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex, pageCount, pageSize } =\n          instance.getState().pagination\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return (\n          pageIndex <\n          Math.ceil(\n            instance.getPrePaginationRowModel().rows.length / pageSize\n          ) -\n            1\n        )\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: memo(\n        () => [\n          instance.getState().pagination,\n          instance.getExpandedRowModel(),\n          instance.options.paginateRowsFn,\n        ],\n        (_pagination, rowModel, paginateRowsFn) => {\n          if (!paginateRowsFn || !rowModel.rows.length) {\n            return rowModel\n          }\n\n          return paginateRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getPaginationRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n        if (pageCount > 0) {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends PartialGenerics> = {\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  autoResetRowSelection?: boolean\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // isInclusiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\ntype ToggleRowSelectedProps = {\n  onChange?: (e: MouseEvent | TouchEvent) => void\n  checked?: boolean\n  title?: string\n  indeterminate?: boolean\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n}\n\nexport type RowSelectionInstance<TGenerics extends PartialGenerics> = {\n  _notifyRowSelectionReset: () => void\n  getToggleRowSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllPageRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: () => void\n  toggleRowSelected: (rowId: string, value?: boolean) => void\n  getRowCanSelect: (rowId: string) => boolean\n  getRowCanSelectSubRows: (rowId: string) => boolean\n  getRowCanMultiSelect: (rowId: string) => boolean\n  // getGroupingRowCanSelect: (rowId: string) => boolean\n  getRowIsSelected: (rowId: string) => boolean\n  getRowIsSomeSelected: (rowId: string) => boolean\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection = {\n  getInitialState: (): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      autoResetRowSelection: true,\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.shiftKey,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    let registered = false\n\n    // const pageRows = instance.getPageRows()\n\n    return {\n      _notifyRowSelectionReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetRowSelection\n        ) {\n          instance.resetRowSelection()\n        }\n      },\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().rowSelection)\n        ),\n      resetRowSelection: () =>\n        instance.setRowSelection(instance.initialState.rowSelection ?? {}),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          // Only remove/add the rows that are visible on the screen\n          //  Leave all the other rows that are selected alone.\n          const rowSelection = Object.assign({}, old)\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n      toggleRowSelected: (rowId, value) => {\n        const row = instance.getRow(rowId)\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, rowId, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getGlobalFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      ///\n\n      getRowIsSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getRowIsSomeSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getRowCanSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getRowCanSelectSubRows: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getRowCanMultiSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows =\n          instance.getPreGlobalFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleRowSelectedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        const isSelected = row.getIsSelected()\n        const isSomeSelected = row.getIsSomeSelected()\n        const canSelect = row.getCanSelect()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: canSelect\n            ? (e: MouseEvent | TouchEvent) => {\n                row.toggleSelected((e.target as HTMLInputElement).checked)\n              }\n            : undefined,\n          checked: isSelected,\n          title: 'Toggle Row Selected',\n          indeterminate: isSomeSelected,\n          // onChange: forInput\n          //   ? (e: Event) => e.stopPropagation()\n          //   : (e: Event) => {\n          //       if (instance.options.isAdditiveSelectEvent(e)) {\n          //         row.toggleSelected()\n          //       } else if (instance.options.isInclusiveSelectEvent(e)) {\n          //         instance.addRowSelectionRange(row.id)\n          //       } else {\n          //         instance.setRowSelection({})\n          //         row.toggleSelected()\n          //       }\n\n          //       if (props.onClick) props.onClick(e)\n          //     },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllRowsSelectedProps: userProps => {\n        const isSomeRowsSelected = instance.getIsSomeRowsSelected()\n        const isAllRowsSelected = instance.getIsAllRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllRowsSelected,\n          title: 'Toggle All Rows Selected',\n          indeterminate: isSomeRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllPageRowsSelectedProps: userProps => {\n        const isSomePageRowsSelected = instance.getIsSomePageRowsSelected()\n        const isAllPageRowsSelected = instance.getIsAllPageRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllPageRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllPageRowsSelected,\n          title: 'Toggle All Current Page Rows Selected',\n          indeterminate: isSomePageRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      getIsSelected: () => instance.getRowIsSelected(row.id),\n      getIsSomeSelected: () => instance.getRowIsSomeSelected(row.id),\n      toggleSelected: value => instance.toggleRowSelected(row.id, value),\n      getToggleSelectedProps: userProps =>\n        instance.getToggleRowSelectedProps(row.id, userProps),\n      getCanMultiSelect: () => instance.getRowCanMultiSelect(row.id),\n      getCanSelect: () => instance.getRowCanSelect(row.id),\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends PartialGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && instance.getRowCanSelectSubRows(row.id)) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0) => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends PartialGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  flexRender,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  Renderable,\n  Please_use_the_create_table_column_utilities_to_define_columns,\n  PartialGenerics,\n} from './types'\n\nimport { Visibility } from './features/Visibility'\nimport { Ordering } from './features/Ordering'\nimport { Pinning } from './features/Pinning'\nimport { Headers } from './features/Headers'\nimport { Filters } from './features/Filters'\nimport { Sorting } from './features/Sorting'\nimport { Grouping, GroupingCell } from './features/Grouping'\nimport { Expanding } from './features/Expanding'\nimport { ColumnSizing, defaultColumnSizing } from './features/ColumnSizing'\nimport { Pagination } from './features/Pagination'\nimport { RowSelection } from './features/RowSelection'\nimport { RowModel } from '.'\n\nconst features = [\n  Visibility,\n  Ordering,\n  Pinning,\n  Headers,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  ColumnSizing,\n  Pagination,\n  RowSelection,\n]\n\nexport type CoreOptions<TGenerics extends PartialGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends PartialGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getColumnWidth: (columnId: string) => number\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n}\n\nexport type CoreRow<TGenerics extends PartialGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  leafRows: Row<TGenerics>[]\n  subRows: Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends PartialGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  header?:\n    | string\n    | Renderable<{\n        instance: TableInstance<TGenerics>\n        header: Header<TGenerics>\n        column: Column<TGenerics>\n      }>\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n  columns?: ColumnDef<TGenerics>[]\n  footer?: Renderable<{\n    instance: TableInstance<TGenerics>\n    header: Header<TGenerics>\n    column: Column<TGenerics>\n  }>\n  cell?: Renderable<{\n    instance: TableInstance<TGenerics>\n    row: Row<TGenerics>\n    column: Column<TGenerics>\n    cell: Cell<TGenerics>\n    value: TGenerics['Value']\n  }>\n  defaultIsVisible?: boolean\n  [Please_use_the_create_table_column_utilities_to_define_columns]: true\n}\n\nexport type CoreColumn<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends PartialGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating React Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  let listeners: (() => void)[] = []\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, (feature as any).getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, (feature as any).getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (columnDef, depth: number, parent) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumnSizing,\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(\n          obj,\n          (feature as any).createColumn?.(column, instance)\n        )\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[React Table] Column with id ${columnId} does not exist.`\n          )\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    getColumnWidth: (columnId: string) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const columnSize = instance.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.minWidth ?? defaultColumnSizing.minWidth,\n          columnSize ?? column.width ?? defaultColumnSizing.width\n        ),\n        column.maxWidth ?? defaultColumnSizing.maxWidth\n      )\n    },\n\n    createCell: (row, column, value) => {\n      const cell: Cell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          flexRender(column.cell, { instance, column, row, cell, value }),\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          (feature as any).createCell?.(\n            cell as Cell<TGenerics> & GroupingCell,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        leafRows: [],\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, (feature as any).createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              // Keep the new subRows array on the row\n              row.subRows = subRows\n              row.leafRows = flattenBy(subRows, d => d.leafRows)\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyRowSelectionReset()\n          instance._notifyFiltersReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[React Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[React Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n","import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  DefaultGenerics,\n  PartialGenerics,\n  _NonGenerated,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreatTableFactory<TGenerics extends Partial<DefaultGenerics>> = <\n  TRow\n>() => TableFactory<Overwrite<TGenerics, { Row: TRow }>>\n\nexport type CreateTableFactoryOptions<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport function createTableFactory<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n>(\n  opts: CreateTableFactoryOptions<TFilterFns, TSortingFns, TAggregationFns>\n): CreatTableFactory<\n  Overwrite<\n    PartialGenerics,\n    {\n      FilterFns: TFilterFns\n      SortingFns: TSortingFns\n      AggregationFns: TAggregationFns\n    }\n  >\n> {\n  return () => _createTable(undefined, undefined, opts)\n}\n\nexport type TableFactory<TGenerics extends Partial<DefaultGenerics>> = {\n  __options: CreateTableFactoryOptions<any, any, any>\n  createColumns: (columns: ColumnDef<TGenerics>[]) => ColumnDef<TGenerics>[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            id: string\n            header?: string | ColumnDef<TGenerics>['header']\n          }\n        >,\n      { accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: PartialKeys<\n      _NonGenerated<ColumnDef<TGenerics>>,\n      'accessorFn' | 'accessorKey'\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          _NonGenerated<ColumnDef<TGenerics>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            _NonGenerated<ColumnDef<TGenerics>>,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\nexport function createTable<TRow>() {\n  return _createTable<Overwrite<PartialGenerics, { Row: TRow }>>()\n}\n\nfunction _createTable<TGenerics extends PartialGenerics>(\n  _?: undefined,\n  __?: undefined,\n  __options?: CreateTableFactoryOptions<any, any, any>\n): TableFactory<TGenerics> {\n  return {\n    __options: __options || {},\n    createColumns: columns => columns,\n    createDisplayColumn: column => column as any,\n    createGroup: column => column as any,\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function expandRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const { expandSubRows } = instance.options\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function columnFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const columnFilters = instance.getState().columnFilters\n\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterRows = (rowsToFilter: Row<TGenerics>[], depth: number) => {\n    columnFilters.forEach(({ id: columnId, value: filterValue }) => {\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `React-Table: Could not find a column with id: ${columnId}`\n          )\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        return\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    })\n\n    return rowsToFilter\n  }\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterRows(rowsToFilter, depth)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function globalFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const globalFilter = instance.getState().globalFilter\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { flattenBy } from '../utils'\n\nexport function groupRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const groupingState = instance.getState().grouping\n  // Filter the grouping list down to columns that exist\n  const existingGrouping = groupingState.filter(columnId =>\n    instance.getColumn(columnId)\n  )\n\n  // Find the columns that can or are aggregating\n  // Uses each column to aggregate rows into a single value\n  const aggregateRowsToValues = (\n    leafRows: Row<TGenerics>[],\n    groupedRows: Row<TGenerics>[],\n    depth: number\n  ) => {\n    const values: Record<string, unknown> = {}\n\n    instance.getAllLeafColumns().forEach(column => {\n      // Don't aggregate columns that are in the grouping\n      if (existingGrouping.includes(column.id)) {\n        values[column.id] = groupedRows[0]\n          ? groupedRows[0].values[column.id]\n          : null\n        return\n      }\n\n      // Aggregate the values\n      const aggregateFn = instance.getColumnAggregationFn(column.id)\n\n      if (aggregateFn) {\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            columnValue = column.aggregateValue(columnValue)\n          }\n\n          return columnValue\n        })\n\n        values[column.id] = aggregateFn(leafValues, groupedValues)\n      } else if (column.aggregationType) {\n        console.info({ column })\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `React Table: Invalid column.aggregateType option for column listed above`\n            : ''\n        )\n      } else {\n        values[column.id] = null\n      }\n    })\n\n    return values\n  }\n\n  const groupedFlatRows: Row<TGenerics>[] = []\n  const groupedRowsById: Record<string, Row<TGenerics>> = {}\n  // const onlyGroupedFlatRows: Row[] = [];\n  // const onlyGroupedRowsById: Record<RowId, Row> = {};\n  // const nonGroupedFlatRows: Row[] = [];\n  // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n  // Recursively group the data\n  const groupUpRecursively = (\n    rows: Row<TGenerics>[],\n    depth = 0,\n    parentId: string\n  ) => {\n    // This is the last level, just return the rows\n    if (depth === existingGrouping.length) {\n      return rows\n    }\n\n    const columnId = existingGrouping[depth]!\n\n    // Group the rows together for this level\n    const rowGroupsMap = groupBy(rows, columnId)\n\n    // Peform aggregations for each group\n    const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n      ([groupingValue, groupedRows], index) => {\n        let id = `${columnId}:${groupingValue}`\n        id = parentId ? `${parentId}>${id}` : id\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth\n          ? flattenBy(groupedRows, row => row.leafRows)\n          : groupedRows\n\n        const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n        const row = instance.createRow(id, undefined, index, depth, values)\n\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n        })\n\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return row\n      }\n    )\n\n    return aggregatedGroupedRows\n  }\n\n  const groupedRows = groupUpRecursively(sortedRowModel.rows, 0, '')\n\n  groupedRows.forEach(subRow => {\n    groupedFlatRows.push(subRow)\n    groupedRowsById[subRow.id] = subRow\n    // if (subRow.getIsGrouped?.()) {\n    //   onlyGroupedFlatRows.push(subRow);\n    //   onlyGroupedRowsById[subRow.id] = subRow;\n    // } else {\n    //   nonGroupedFlatRows.push(subRow);\n    //   nonGroupedRowsById[subRow.id] = subRow;\n    // }\n  })\n\n  return {\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n  }\n}\n\nfunction groupBy<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.values[columnId]}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { PartialGenerics, TableInstance, RowModel } from '../types'\nimport { expandRowsFn } from './expandRowsFn'\n\nexport function paginateRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const { pageSize, pageIndex } = instance.getState().pagination\n  let { rows, flatRows, rowsById } = rowModel\n  const pageStart = pageSize * pageIndex\n  const pageEnd = pageStart + pageSize\n\n  rows = rows.slice(pageStart, pageEnd)\n\n  if (!instance.options.paginateExpandedRows) {\n    return expandRowsFn(instance, {\n      rows,\n      flatRows,\n      rowsById,\n    })\n  }\n\n  return {\n    rows,\n    flatRows,\n    rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { SortingFn } from '../features/Sorting'\n\nexport function sortRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const sortingState = instance.getState().sorting\n\n  const sortedFlatRows: Row<TGenerics>[] = []\n\n  // Filter out sortings that correspond to non existing columns\n  const availableSorting = sortingState.filter(sort =>\n    instance.getColumnCanSort(sort.id)\n  )\n\n  const columnInfoById: Record<\n    string,\n    {\n      sortUndefined?: false | -1 | 1\n      invertSorting?: boolean\n      sortingFn: SortingFn<TGenerics>\n    }\n  > = {}\n\n  availableSorting.forEach(sortEntry => {\n    const column = instance.getColumn(sortEntry.id)!\n\n    columnInfoById[sortEntry.id] = {\n      sortUndefined: column.sortUndefined,\n      invertSorting: column.invertSorting,\n      sortingFn: instance.getColumnSortingFn(sortEntry.id)!,\n    }\n  })\n\n  const sortData = (rows: Row<TGenerics>[]) => {\n    // This will also perform a stable sorting using the row index\n    // if needed.\n    const sortedData = rows.slice()\n\n    sortedData.sort((rowA, rowB) => {\n      for (let i = 0; i < availableSorting.length; i += 1) {\n        const sortEntry = availableSorting[i]!\n        const columnInfo = columnInfoById[sortEntry.id]!\n        const isDesc = sortEntry?.desc ?? false\n\n        if (columnInfo.sortUndefined) {\n          const aValue = rowA.values[sortEntry.id]\n          const bValue = rowB.values[sortEntry.id]\n\n          const aUndefined = typeof aValue === 'undefined'\n          const bUndefined = typeof bValue === 'undefined'\n\n          if (aUndefined || bUndefined) {\n            return aUndefined && bUndefined ? 0 : aUndefined ? 1 : -1\n          }\n        }\n\n        // This function should always return in ascending order\n        let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n        if (sortInt !== 0) {\n          if (isDesc) {\n            sortInt *= -1\n          }\n\n          if (columnInfo.invertSorting) {\n            sortInt *= -1\n          }\n\n          return sortInt\n        }\n      }\n\n      return rowA.index - rowB.index\n    })\n\n    // If there are sub-rows, sort them\n    sortedData.forEach(row => {\n      sortedFlatRows.push(row)\n      if (!row.subRows || row.subRows.length <= 1) {\n        return\n      }\n      row.subRows = sortData(row.subRows)\n    })\n\n    return sortedData\n  }\n\n  return {\n    rows: sortData(rowModel.rows),\n    flatRows: sortedFlatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n"],"names":["functionalUpdate","updater","input","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","propGetter","initial","getter","memo","getDeps","fn","opts","result","deps","depTime","debug","performance","now","newDeps","some","dep","index","resultTime","oldResult","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","map","_","filter","Boolean","reduce","accu","a","b","parent","undefined","flexRender","Comp","props","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","React","Please_use_the_create_table_column_utilities_to_define_columns","Symbol","Visibility","getInitialState","columnVisibility","getDefaultOptions","onColumnVisibilityChange","getDefaultColumn","defaultIsVisible","createColumn","column","getCanHide","getColumnCanHide","id","getIsVisible","getColumnIsVisible","toggleVisibility","value","toggleColumnVisibility","getToggleVisibilityProps","userProps","type","checked","title","e","target","getInstance","getVisibleFlatColumns","getAllFlatColumns","join","allFlatColumns","options","debugAll","debugColumns","getVisibleLeafColumns","getAllLeafColumns","setColumnVisibility","getState","columnId","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","getColumn","Error","_instance$getState$co2","enableHiding","defaultCanHide","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","_e$target","indeterminate","aggregationTypes","sum","_leafValues","childValues","next","extent","mean","leafValues","count","median","values","unique","Array","from","Set","uniqueCount","size","Grouping","aggregationType","grouping","onGroupingChange","autoResetGrouping","groupedColumnMode","getCanGroup","getColumnCanGroup","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","registered","_notifyGroupingReset","autoResetAll","resetGrouping","getColumnAutoAggregationFn","firstRow","getCoreRowModel","flatRows","toString","call","getColumnAggregationFn","userAggregationTypes","getColumnAutoFilterFn","setGrouping","enableGrouping","defaultCanGroup","accessorFn","_instance$getState$gr","_instance$getState$gr2","indexOf","initialState","_instance$initialStat2","canGroup","onClick","persist","getRowIsGrouped","rowId","getRow","_instance$getRow","groupingColumnId","getPreGroupedRowModel","getSortedRowModel","getGroupedRowModel","groupRowsFn","rowModel","debugTable","_notifyExpandedReset","createRow","row","createCell","cell","_instance","getIsPlaceholder","getIsAggregated","subRows","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","g","find","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","getOrderColumnsFn","columns","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","splice","Pinning","columnPinning","left","right","onColumnPinningChange","getCanPin","getColumnCanPin","getPinnedIndex","getColumnPinnedIndex","getIsPinned","getColumnIsPinned","pin","position","pinColumn","setColumnPinning","resetColumnPinning","columnIds","getLeafColumns","enablePinning","defaultCanPin","leafColumnIds","isLeft","isRight","_instance$getState$co3","_instance$getState$co4","defaultColumnSizing","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","ColumnSizing","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","setColumnSizing","setColumnSizingInfo","resetColumnSizing","resetHeaderSizeInfo","resetColumnSize","resetHeaderSize","headerId","header","getHeader","getHeaderCanResize","getColumnCanResize","enableResizing","enableColumnResizing","defaultCanResize","getColumnIsResizing","getHeaderIsResizing","getHeaderResizerProps","canResize","getCanResize","onResizeStart","isTouchStartEvent","touches","getWidth","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","headerWidth","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","draggable","role","onMouseDown","onTouchStart","getIsResizing","resetSize","createHeader","getResizerProps","passiveSupported","supported","noop","window","err","Headers","_getAllVisibleCells","getAllCells","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","center","allCells","leftAndRight","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","leafHeaders","recurseHeader","h","getHeaderProps","getFooterProps","renderHeader","renderFooter","footer","assign","getHeaderGroups","getAllColumns","allColumns","leftColumns","rightColumns","centerColumns","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","headerGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","_header$subHeaders","getLeftLeafHeaders","_header$subHeaders2","getRightLeafHeaders","_header$subHeaders3","_left$","_center$","_right$","getHeaderGroupProps","getFooterGroupProps","initialProps","getTotalWidth","columnsToGroup","headerFamily","maxDepth","findMaxDepth","_column$columns","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","recurseHeadersForSpans","childRowSpans","childColSpan","childRowSpan","_headerGroups$","filterTypes","includesString","includesStringSensitive","equalsString","equalsStringSensitive","arrIncludes","arrIncludesAll","equals","weakEquals","betweenNumberRange","rows","filterValue","search","toLowerCase","rowValue","every","val","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","testFalsey","autoRemove","Filters","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","autoResetColumnFilters","filterFromChildrenUp","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","_instance$getCoreRowM","getAllCellsByColumnId","_instance$getCoreRowM2","getFacetInfo","getPreFilteredRows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","_rows$","_rows$2","i","_rows$i","has","set","get","filterType","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","_notifyFiltersReset","resetSorting","resetColumnFilters","resetGlobalFilter","isArray","getGlobalAutoFilterFn","getColumnFilterFn","userFilterTypes","getGlobalFilterFn","setColumnFilters","updateFn","_functionalUpdate","shouldAutoRemoveFilter","setGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","enableGlobalFilter","defaultCanGlobalFilter","_instance$getState$co","filterFn","previousfilter","newFilter","newFilterObj","getPreFilteredRowModel","getPreColumnFilteredRowModel","getColumnFilteredRowModel","columnFilterRowsFn","columnFiltersFn","columnFilteredRowModel","_instance$getState$co5","getPreGlobalFilteredRowModel","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","_instance$getState$co6","_notifySortingReset","reSplitAlphaNumeric","sortTypes","alphanumeric","rowA","rowB","compareAlphanumeric","alphanumericCaseSensitive","text","compareBasic","textCaseSensitive","datetime","getTime","basic","aStr","bStr","split","aa","bb","an","parseInt","bn","combo","sort","Sorting","sortType","sorting","onSortingChange","autoResetSorting","isMultiSortEvent","shiftKey","getCanSort","getColumnCanSort","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","desc","isMulti","toggleColumnSorting","getToggleSortingProps","getColumnAutoSortingFn","isString","slice","getColumnAutoSortDir","getColumnSortingFn","userSortTypes","setSorting","multi","sortAction","existingSorting","existingIndex","hasDescDefined","newSorting","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","enableSorting","defaultCanSort","enableMultiSort","columnSort","_instance$getState$so","_instance$getState$so3","canSort","getPreSortedRowModel","sortRowsFn","sortingFn","Expanding","expanded","onExpandedChange","autoResetExpanded","getIsRowExpanded","original","expandSubRows","paginateExpandedRows","resetExpanded","setExpanded","toggleRowExpanded","exists","oldExpanded","keys","getRowModel","rowsById","toggleAllRowsExpanded","getIsAllRowsExpanded","getRowCanExpand","enableExpanded","defaultCanExpand","_row$subRows","getToggleExpandedProps","canExpand","getToggleAllRowsExpandedProps","getExpandedDepth","splitId","getExpandedRowModel","expandRowsFn","_notifyPageIndexReset","getPreExpandedRowModel","toggleExpanded","getIsExpanded","getCanExpand","Pagination","pagination","pageCount","pageIndex","pageSize","onPaginationChange","autoResetPageIndex","resetPageIndex","setPagination","safeUpdater","resetPagination","setPageIndex","maxPageIndex","resetPageSize","setPageSize","_instance$initialStat3","_instance$initialStat4","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","getCanPreviousPage","getCanNextPage","ceil","getPrePaginationRowModel","previousPage","nextPage","getPaginationRowModel","paginateRowsFn","_pagination","getPageCount","RowSelection","rowSelection","onRowSelectionChange","autoResetRowSelection","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","_notifyRowSelectionReset","resetRowSelection","setRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","toggleRowSelected","isSelected","getIsSelected","selectedRowIds","getPreSelectedRowModel","getSelectedRowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","getRowIsSelected","isRowSelected","getRowIsSomeSelected","getRowCanSelect","getRowCanSelectSubRows","getRowCanMultiSelect","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleRowSelectedProps","isSomeSelected","getIsSomeSelected","canSelect","getCanSelect","toggleSelected","getToggleAllRowsSelectedProps","isSomeRowsSelected","getToggleAllPageRowsSelectedProps","isSomePageRowsSelected","getToggleSelectedProps","getCanMultiSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","_row$subRows2","selection","allChildrenSelected","someSelected","subRow","features","_createTable","__","__options","createColumns","createDisplayColumn","createGroup","createDataColumn","accessor","accessorKey","sortedRowModel","expandedRows","handleRow","newFilteredFlatRows","newFilteredRowsById","filterRows","rowsToFilter","preFilteredRows","recurseFilterRows","defaultOptions","feature","buildOptions","finalInstance","reset","setOptions","getRowId","state","onStateChange","defaultColumn","getColumnDefs","columnDef","originalRow","getColumnWidth","getFlatColumns","flatMap","_column$columns2","columnDefs","recurseColumns","getAllFlatColumnsById","flatColumns","acc","columnSize","getCellProps","renderCell","rowIndex","leafRows","getRowProps","data","accessRow","parentRows","getSubRows","originalSubRows","getCell","getTableProps","getTableBodyProps","getTableWidth","_instance$getHeaderGr2","getLeftTableWidth","_instance$getLeftHead2","getCenterTableWidth","_instance$getCenterHe2","getRightTableWidth","_instance$getRightHea2","filterableColumnIds","existingGrouping","groupedFlatRows","groupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","groupMap","resKey","previous","groupBy","aggregatedGroupedRows","entries","groupingValue","aggregateFn","groupedValues","columnValue","aggregateValue","aggregateRowsToValues","pageStart","pageEnd","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aUndefined","bUndefined","sortInt"],"mappings":"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"}