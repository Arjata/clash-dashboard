{"version":3,"file":"index.development.js","sources":["../../src/utils.tsx","../../src/types.ts","../../src/features/Visibility.ts","../../src/aggregationTypes.ts","../../src/features/Grouping.ts","../../src/features/Ordering.ts","../../src/features/Pinning.ts","../../src/features/ColumnSizing.ts","../../src/features/Headers.ts","../../src/filterTypes.ts","../../src/features/Filters.ts","../../src/sortTypes.ts","../../src/features/Sorting.ts","../../src/features/Expanding.ts","../../src/features/Pagination.ts","../../src/features/RowSelection.ts","../../src/core.tsx","../../src/createTable.tsx","../../src/utils/columnFilterRowsFn.ts","../../src/utils/globalFilterRowsFn.ts","../../src/utils/sortRowsFn.ts","../../src/utils/groupRowsFn.ts","../../src/utils/expandRowsFn.ts","../../src/utils/paginateRowsFn.ts"],"sourcesContent":["import React from 'react'\nimport {\n  Getter,\n  NoInfer,\n  PropGetterValue,\n  Renderable,\n  TableState,\n  Updater,\n} from './types'\n\nexport type IsAny<T> = 0 extends 1 & T ? true : false\nexport type PartialKeys<T, K extends keyof T> = Omit<T, K> & Partial<Pick<T, K>>\nexport type RequiredKeys<T, K extends keyof T> = Omit<T, K> &\n  Required<Pick<T, K>>\nexport type Overwrite<T, U> = Omit<T, keyof U> & U\n\nexport type DataUpdateFunction<T> = (input: T) => T\n\nexport function functionalUpdate<T>(updater: Updater<T>, input: T): T {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<T>)(input)\n    : updater\n}\n\nexport function noop() {\n  //\n}\n\nexport function makeStateUpdater(key: keyof TableState, instance: unknown) {\n  return (updater: Updater<any>) => {\n    ;(instance as any).setState(<TTableState,>(old: TTableState) => {\n      return {\n        ...old,\n        [key]: functionalUpdate(updater, (old as any)[key]),\n      }\n    })\n  }\n}\n\ntype AnyFunction = (...args: any) => any\n\nexport function isFunction<T extends AnyFunction>(d: any): d is T {\n  return d instanceof Function\n}\n\nexport function flattenBy<TNode>(\n  arr: TNode[],\n  getChildren: (item: TNode) => TNode[]\n) {\n  const flat: TNode[] = []\n\n  const recurse = (subArr: TNode[]) => {\n    subArr.forEach(item => {\n      flat.push(item)\n      const children = getChildren(item)\n      if (children?.length) {\n        recurse(children)\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\ntype PropGetterImpl = <TBaseProps, TGetter extends Getter<TBaseProps>>(\n  initial: TBaseProps,\n  userProps?: TGetter\n) => PropGetterValue<TBaseProps, TGetter>\n\n// @ts-ignore // Just rely on the type, not the implementation\nexport const propGetter: PropGetterImpl = (initial, getter) => {\n  if (isFunction(getter)) {\n    return getter(initial)\n  }\n\n  return {\n    ...initial,\n    ...(getter ?? {}),\n  }\n}\n\nexport function memo<TDeps extends readonly any[], TResult>(\n  getDeps: () => [...TDeps],\n  fn: (...args: NoInfer<[...TDeps]>) => TResult,\n  opts: {\n    key: string\n    debug?: () => any\n    onChange?: (result: TResult, previousResult?: TResult) => void\n  }\n): () => TResult {\n  let deps: any[] = []\n  let result: TResult | undefined\n\n  return () => {\n    let depTime: number\n    if (opts.key && opts.debug) depTime = performance.now()\n\n    const newDeps = getDeps()\n\n    const depsChanged =\n      newDeps.length !== deps.length ||\n      newDeps.some((dep: any, index: number) => deps[index] !== dep)\n\n    if (depsChanged) {\n      let oldResult = result\n      let resultTime: number\n      if (opts.key && opts.debug) resultTime = performance.now()\n      result = fn(...newDeps)\n      deps = newDeps\n      opts?.onChange?.(result, oldResult)\n\n      if (opts.key && opts.debug) {\n        if (opts?.debug()) {\n          const depEndTime =\n            Math.round((performance.now() - depTime!) * 100) / 100\n          const resultEndTime =\n            Math.round((performance.now() - resultTime!) * 100) / 100\n          const resultFpsPercentage = resultEndTime / 16\n\n          const pad = (str: number | string, num: number) => {\n            str = String(str)\n            while (str.length < num) {\n              str = ' ' + str\n            }\n            return str\n          }\n\n          console.info(\n            `%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`,\n            `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(\n              0,\n              Math.min(120 - 120 * resultFpsPercentage, 120)\n            )}deg 100% 31%);`,\n            opts?.key,\n            {\n              length: `${deps.length} -> ${newDeps.length}`,\n              ...newDeps\n                .map((_, index) => {\n                  if (deps[index] !== newDeps[index]) {\n                    return [index, deps[index], newDeps[index]]\n                  }\n\n                  return false\n                })\n                .filter(Boolean)\n                .reduce(\n                  (accu, [a, b]: any) => ({\n                    ...accu,\n                    [a]: b,\n                  }),\n                  {}\n                ),\n              parent,\n            }\n          )\n        }\n      }\n\n      oldResult = undefined\n    }\n\n    return result!\n  }\n}\n\nexport type Render = typeof flexRender\n\nexport function flexRender<TProps extends {}>(\n  Comp: Renderable<TProps>,\n  props: TProps\n): React.ReactNode {\n  return !Comp ? null : isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component: unknown): component is React.FC {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component: any) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component: any) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n\n// export function hashString(str: string, seed = 0): string {\n//   let h1 = 0xdeadbeef ^ seed,\n//     h2 = 0x41c6ce57 ^ seed\n//   for (let i = 0, ch; i < str.length; i++) {\n//     ch = str.charCodeAt(i)\n//     h1 = Math.imul(h1 ^ ch, 2654435761)\n//     h2 = Math.imul(h2 ^ ch, 1597334677)\n//   }\n//   h1 =\n//     Math.imul(h1 ^ (h1 >>> 16), 2246822507) ^\n//     Math.imul(h2 ^ (h2 >>> 13), 3266489909)\n//   h2 =\n//     Math.imul(h2 ^ (h2 >>> 16), 2246822507) ^\n//     Math.imul(h1 ^ (h1 >>> 13), 3266489909)\n//   return (4294967296 * (2097151 & h2) + (h1 >>> 0)).toString()\n// }\n","import React from 'react'\nimport {\n  CoreColumn,\n  CoreColumnDef,\n  CoreOptions,\n  CoreRow,\n  TableCore,\n} from './core'\nimport {\n  VisibilityInstance,\n  VisibilityTableState,\n  VisibilityColumn as ColumnVisibilityColumn,\n  VisibilityOptions,\n  VisibilityColumnDef,\n  VisibilityRow,\n} from './features/Visibility'\nimport {\n  ColumnOrderInstance,\n  ColumnOrderOptions,\n  ColumnOrderTableState,\n} from './features/Ordering'\nimport {\n  ColumnPinningColumn,\n  ColumnPinningColumnDef,\n  ColumnPinningInstance,\n  ColumnPinningOptions,\n  ColumnPinningTableState,\n} from './features/Pinning'\nimport { HeadersInstance, HeadersRow } from './features/Headers'\nimport {\n  FiltersColumn,\n  FiltersColumnDef,\n  FiltersInstance,\n  FiltersOptions,\n  FiltersTableState,\n} from './features/Filters'\nimport {\n  SortingColumn,\n  SortingColumnDef,\n  SortingInstance,\n  SortingOptions,\n  SortingTableState,\n} from './features/Sorting'\nimport {\n  GroupingColumn,\n  GroupingColumnDef,\n  GroupingInstance,\n  GroupingOptions,\n  GroupingRow,\n  GroupingTableState,\n} from './features/Grouping'\nimport {\n  ExpandedInstance,\n  ExpandedOptions,\n  ExpandedTableState,\n  ExpandedRow,\n} from './features/Expanding'\nimport { Overwrite } from './utils'\nimport {\n  ColumnSizingColumn,\n  ColumnSizingColumnDef,\n  ColumnSizingHeader,\n  ColumnSizingInstance,\n  ColumnSizingOptions,\n  ColumnSizingTableState,\n} from './features/ColumnSizing'\nimport {\n  PaginationInstance,\n  PaginationOptions,\n  PaginationTableState,\n} from './features/Pagination'\nimport {\n  RowSelectionInstance,\n  RowSelectionOptions,\n  RowSelectionRow,\n  RowSelectionTableState,\n} from './features/RowSelection'\n\n// declare global {\n//   const process.env.NODE_ENV !== 'production': boolean\n// }\n\nexport type DefaultGenerics = {\n  Row: unknown\n  Value: unknown\n  FilterFns: object\n  SortingFns: object\n  AggregationFns: object\n}\n\nexport type PartialGenerics = Partial<DefaultGenerics>\n\nexport type TableInstance<TGenerics extends PartialGenerics> =\n  TableCore<TGenerics> &\n    VisibilityInstance<TGenerics> &\n    ColumnOrderInstance<TGenerics> &\n    ColumnPinningInstance<TGenerics> &\n    HeadersInstance<TGenerics> &\n    FiltersInstance<TGenerics> &\n    SortingInstance<TGenerics> &\n    GroupingInstance<TGenerics> &\n    ColumnSizingInstance<TGenerics> &\n    ExpandedInstance<TGenerics> &\n    PaginationInstance<TGenerics> &\n    RowSelectionInstance<TGenerics>\n\nexport type Renderable<TProps> =\n  | React.ReactNode\n  | React.FunctionComponent<TProps>\n  | React.Component<TProps>\n\n//\n\nexport type Options<TGenerics extends PartialGenerics> =\n  CoreOptions<TGenerics> &\n    VisibilityOptions &\n    ColumnOrderOptions &\n    ColumnPinningOptions &\n    FiltersOptions<TGenerics> &\n    SortingOptions<TGenerics> &\n    GroupingOptions<TGenerics> &\n    ExpandedOptions<TGenerics> &\n    ColumnSizingOptions &\n    PaginationOptions<TGenerics> &\n    RowSelectionOptions<TGenerics>\n\nexport type Updater<T> = T | ((old: T) => T)\nexport type OnChangeFn<T> = (updaterOrValue: Updater<T>, value: T) => void\n\nexport type TableState = VisibilityTableState &\n  ColumnOrderTableState &\n  ColumnPinningTableState &\n  FiltersTableState &\n  SortingTableState &\n  ExpandedTableState &\n  GroupingTableState &\n  ColumnSizingTableState &\n  PaginationTableState &\n  RowSelectionTableState\n\nexport type Row<TGenerics extends PartialGenerics> = CoreRow<TGenerics> &\n  VisibilityRow<TGenerics> &\n  HeadersRow<TGenerics> &\n  GroupingRow &\n  RowSelectionRow &\n  ExpandedRow\n\nexport type RowValues = {\n  [key: string]: any\n}\n\nexport type RowModel<TGenerics extends PartialGenerics> = {\n  rows: Row<TGenerics>[]\n  flatRows: Row<TGenerics>[]\n  rowsById: Record<string, Row<TGenerics>>\n}\n\nexport type AccessorFn<TData> = (originalRow: TData, index: number) => any\n\nexport const Please_use_the_create_table_column_utilities_to_define_columns: unique symbol =\n  Symbol()\n\nexport type _NonGenerated<T> = Overwrite<\n  T,\n  {\n    [Please_use_the_create_table_column_utilities_to_define_columns]?: never\n  }\n>\n\nexport type ColumnDef<TGenerics extends PartialGenerics> =\n  CoreColumnDef<TGenerics> &\n    VisibilityColumnDef &\n    ColumnPinningColumnDef &\n    FiltersColumnDef<TGenerics> &\n    SortingColumnDef<TGenerics> &\n    GroupingColumnDef<TGenerics> &\n    ColumnSizingColumnDef\n\nexport type Column<TGenerics extends PartialGenerics> = ColumnDef<TGenerics> &\n  CoreColumn<TGenerics> &\n  ColumnVisibilityColumn &\n  ColumnPinningColumn &\n  FiltersColumn<TGenerics> &\n  SortingColumn<TGenerics> &\n  GroupingColumn<TGenerics> &\n  ColumnSizingColumn<TGenerics>\n\nexport type Cell<TGenerics extends PartialGenerics> = {\n  id: string\n  rowId: string\n  columnId: string\n  value: TGenerics['Value']\n  row: Row<TGenerics>\n  column: Column<TGenerics>\n  getCellProps: PropGetter<CellProps>\n  renderCell: () => React.ReactNode\n}\n\nexport type Header<TGenerics extends PartialGenerics> = CoreHeader<TGenerics> &\n  ColumnSizingHeader<TGenerics>\n\nexport type CoreHeader<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  column: Column<TGenerics>\n  getWidth: () => number\n  subHeaders: Header<TGenerics>[]\n  colSpan?: number\n  rowSpan?: number\n  getHeaderProps: PropGetter<HeaderProps>\n  getFooterProps: PropGetter<HeaderProps>\n  getLeafHeaders: () => Header<TGenerics>[]\n  isPlaceholder?: boolean\n  placeholderId?: string\n  renderHeader: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n  renderFooter: (options?: { renderPlaceholder?: boolean }) => React.ReactNode\n}\n\nexport type HeaderGroup<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  headers: Header<TGenerics>[]\n  getHeaderGroupProps: PropGetter<HeaderGroupProps>\n  getFooterGroupProps: PropGetter<FooterGroupProps>\n}\n\nexport type HeaderRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type FooterRenderProps<THeader> = {\n  header: THeader\n}\n\nexport type CellRenderProps<TCell, TRow> = {\n  cell: TCell\n  row: TRow\n}\n\nexport type TableProps = {\n  role: string\n}\n\nexport type TableBodyProps = {\n  role: string\n}\n\nexport type TableHeadProps = {\n  key: string\n  role: string\n}\n\nexport type TableFooterProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderGroupProps = {\n  key: string\n  role: string\n}\n\nexport type FooterGroupProps = {\n  key: string\n  role: string\n}\n\nexport type HeaderProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type FooterProps = {\n  key: string\n  role: string\n  colSpan?: number\n  rowSpan?: number\n}\n\nexport type RowProps = {\n  key: string\n  role: string\n}\n\nexport type CellProps = {\n  key: string\n  role: string\n}\n\n//\n\nexport type PropGetter<TBase> = <TGetter extends Getter<TBase>>(\n  userProps?: TGetter\n) => PropGetterValue<TBase, TGetter>\n\nexport type Getter<TInitial> =\n  | ((initial: TInitial) => object)\n  | object\n  | undefined\n\nexport type PropGetterValue<TBase, TGetter> = TGetter extends undefined\n  ? TBase\n  : TGetter extends (...args: any[]) => infer TReturn\n  ? Overwrite<TBase, TReturn>\n  : TGetter extends object\n  ? Overwrite<TBase, TGetter>\n  : never\n\nexport type NoInfer<A extends any> = [A][A extends any ? 0 : never]\n","import {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type VisibilityOptions = {\n  onColumnVisibilityChange?: OnChangeFn<VisibilityState>\n  enableHiding?: boolean\n}\n\nexport type VisibilityDefaultOptions = {\n  onColumnVisibilityChange: OnChangeFn<VisibilityState>\n}\n\nexport type VisibilityState = Record<string, boolean>\n\nexport type VisibilityTableState = {\n  columnVisibility: VisibilityState\n}\n\nexport type VisibilityInstance<TGenerics extends PartialGenerics> = {\n  getVisibleFlatColumns: () => Column<TGenerics>[]\n  getVisibleLeafColumns: () => Column<TGenerics>[]\n  setColumnVisibility: (updater: Updater<VisibilityState>) => void\n  toggleColumnVisibility: (columnId: string, value?: boolean) => void\n  toggleAllColumnsVisible: (value?: boolean) => void\n  getColumnIsVisible: (columId: string) => boolean\n  getColumnCanHide: (columnId: string) => boolean\n  getIsAllColumnsVisible: () => boolean\n  getIsSomeColumnsVisible: () => boolean\n  getToggleAllColumnsVisibilityProps: <\n    TGetter extends Getter<ToggleAllColumnsVisibilityProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleAllColumnsVisibilityProps, TGetter>\n}\n\ntype ToggleVisibilityProps = {}\ntype ToggleAllColumnsVisibilityProps = {}\n\nexport type VisibilityColumnDef = {\n  enableHiding?: boolean\n  defaultCanHide?: boolean\n}\n\nexport type VisibilityRow<TGenerics extends PartialGenerics> = {\n  getVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type VisibilityColumn = {\n  getCanHide: () => boolean\n  getIsVisible: () => boolean\n  toggleVisibility: (value?: boolean) => void\n  getToggleVisibilityProps: <TGetter extends Getter<ToggleVisibilityProps>>(\n    userProps?: TGetter\n  ) => PropGetterValue<ToggleVisibilityProps, TGetter>\n}\n\n//\n\nexport const Visibility = {\n  getInitialState: (): VisibilityTableState => {\n    return {\n      columnVisibility: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityDefaultOptions => {\n    return {\n      onColumnVisibilityChange: makeStateUpdater('columnVisibility', instance),\n    }\n  },\n\n  getDefaultColumn: () => {\n    return {\n      defaultIsVisible: true,\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): VisibilityColumn => {\n    return {\n      getCanHide: () => instance.getColumnCanHide(column.id),\n      getIsVisible: () => instance.getColumnIsVisible(column.id),\n      toggleVisibility: value =>\n        instance.toggleColumnVisibility(column.id, value),\n      getToggleVisibilityProps: userProps => {\n        const props: ToggleVisibilityProps = {\n          type: 'checkbox',\n          checked: column.getIsVisible?.(),\n          title: 'Toggle Column Visibility',\n          onChange: (e: MouseEvent | TouchEvent) => {\n            column.toggleVisibility?.((e.target as HTMLInputElement).checked)\n          },\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): VisibilityInstance<TGenerics> => {\n    return {\n      getVisibleFlatColumns: memo(\n        () => [\n          instance.getAllFlatColumns(),\n          instance\n            .getAllFlatColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleFlatColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      getVisibleLeafColumns: memo(\n        () => [\n          instance.getAllLeafColumns(),\n          instance\n            .getAllLeafColumns()\n            .filter(d => d.getIsVisible?.())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        allFlatColumns => {\n          return allFlatColumns.filter(d => d.getIsVisible?.())\n        },\n        {\n          key: 'getVisibleLeafColumns',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugColumns,\n        }\n      ),\n\n      setColumnVisibility: updater =>\n        instance.options.onColumnVisibilityChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnVisibility)\n        ),\n\n      toggleColumnVisibility: (columnId, value) => {\n        if (!columnId) return\n\n        if (instance.getColumnCanHide(columnId)) {\n          instance.setColumnVisibility(old => ({\n            ...old,\n            [columnId]: value ?? !instance.getColumnIsVisible(columnId),\n          }))\n        }\n      },\n\n      toggleAllColumnsVisible: value => {\n        value = value ?? !instance.getIsAllColumnsVisible()\n\n        instance.setColumnVisibility(\n          instance.getAllLeafColumns().reduce(\n            (obj, column) => ({\n              ...obj,\n              [column.id]: !value ? !column.getCanHide?.() : value,\n            }),\n            {}\n          )\n        )\n      },\n\n      getColumnIsVisible: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnVisibility?.[columnId] ??\n          column.defaultIsVisible ??\n          true\n        )\n      },\n\n      getColumnCanHide: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.options.enableHiding ??\n          column.enableHiding ??\n          column.defaultCanHide ??\n          true\n        )\n      },\n\n      getIsAllColumnsVisible: () =>\n        !instance.getAllLeafColumns().some(column => !column.getIsVisible?.()),\n\n      getIsSomeColumnsVisible: () =>\n        instance.getAllLeafColumns().some(column => column.getIsVisible?.()),\n\n      getToggleAllColumnsVisibilityProps: userProps => {\n        const props: ToggleAllColumnsVisibilityProps = {\n          onChange: (e: MouseEvent) => {\n            instance.toggleAllColumnsVisible(\n              (e.target as HTMLInputElement)?.checked\n            )\n          },\n          type: 'checkbox',\n          title: 'Toggle visibility for all columns',\n          checked: instance.getIsAllColumnsVisible(),\n          indeterminate:\n            !instance.getIsAllColumnsVisible() &&\n            instance.getIsSomeColumnsVisible()\n              ? 'indeterminate'\n              : undefined,\n        }\n\n        return propGetter(props, userProps)\n      },\n    }\n  },\n}\n","export const aggregationTypes = {\n  sum,\n  min,\n  max,\n  extent,\n  mean,\n  median,\n  unique,\n  uniqueCount,\n  count,\n}\n\nexport type BuiltInAggregationType = keyof typeof aggregationTypes\n\nfunction sum(_leafValues: unknown[], childValues: unknown[]) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return childValues.reduce(\n    (sum: number, next: unknown) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nfunction min(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (min! > value || (min === undefined && value >= value))\n    ) {\n      min = value\n    }\n  }\n\n  return min\n}\n\nfunction max(_leafValues: unknown[], childValues: unknown[]) {\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (\n      value != null &&\n      (max! < value || (max === undefined && value >= value))\n    ) {\n      max = value\n    }\n  }\n\n  return max\n}\n\nfunction extent(_leafValues: unknown[], childValues: unknown[]) {\n  let min: number | undefined\n  let max: number | undefined\n\n  for (const value of childValues as number[]) {\n    if (value != null) {\n      if (min === undefined) {\n        if (value >= value) min = max = value\n      } else {\n        if (min > value) min = value\n        if (max! < value) max = value\n      }\n    }\n  }\n\n  return [min, max]\n}\n\nfunction mean(leafValues: unknown[]) {\n  let count = 0\n  let sum = 0\n\n  for (let value of leafValues as number[]) {\n    if (value != null && (value = +value) >= value) {\n      ++count, (sum += value)\n    }\n  }\n\n  if (count) return sum / count\n\n  return\n}\n\nfunction median(values: unknown[]) {\n  if (!values.length) {\n    return\n  }\n\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return (min + max) / 2\n}\n\nfunction unique<T>(values: T[]) {\n  return Array.from(new Set(values).values())\n}\n\nfunction uniqueCount(values: unknown[]) {\n  return new Set(values).size\n}\n\nfunction count(values: unknown[]) {\n  return values.length\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInAggregationType, aggregationTypes } from '../aggregationTypes'\nimport {\n  Cell,\n  Column,\n  Getter,\n  OnChangeFn,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n  PartialGenerics,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type GroupingState = string[]\n\nexport type AggregationFn<TGenerics extends PartialGenerics> = (\n  leafValues: TGenerics['Row'][],\n  childValues: TGenerics['Row'][]\n) => any\n\nexport type CustomAggregationTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  AggregationFn<TGenerics>\n>\n\nexport type AggregationType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInAggregationType\n  | keyof TGenerics['AggregationFns']\n  | AggregationFn<TGenerics>\n\nexport type GroupingTableState = {\n  grouping: GroupingState\n}\n\nexport type GroupingColumnDef<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  aggregateValue?: (columnValue: unknown) => any\n  renderAggregatedCell?: () => React.ReactNode\n  enableGrouping?: boolean\n  defaultCanGroup?: boolean\n}\n\nexport type GroupingColumn<TGenerics extends PartialGenerics> = {\n  aggregationType?: AggregationType<Overwrite<TGenerics, { Value: any }>>\n  getCanGroup: () => boolean\n  getIsGrouped: () => boolean\n  getGroupedIndex: () => number\n  toggleGrouping: () => void\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n}\n\nexport type GroupingRow = {\n  groupingColumnId?: string\n  groupingValue?: any\n  getIsGrouped: () => boolean\n}\n\nexport type GroupingCell = {\n  getIsGrouped: () => boolean\n  getIsPlaceholder: () => boolean\n  getIsAggregated: () => boolean\n}\n\nexport type ColumnDefaultOptions = {\n  // Column\n  onGroupingChange: OnChangeFn<GroupingState>\n  autoResetGrouping: boolean\n  enableGrouping: boolean\n}\n\nexport type GroupingOptions<TGenerics extends PartialGenerics> = {\n  aggregationTypes?: TGenerics['AggregationFns']\n  onGroupingChange?: OnChangeFn<GroupingState>\n  autoResetGrouping?: boolean\n  enableGrouping?: boolean\n  enableGroupingRemoval?: boolean\n  groupRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n\n  groupedColumnMode?: false | 'reorder' | 'remove'\n}\n\nexport type GroupingColumnMode = false | 'reorder' | 'remove'\n\nexport type ToggleGroupingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type GroupingInstance<TGenerics extends PartialGenerics> = {\n  _notifyGroupingReset: () => void\n  getColumnAutoAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  getColumnAggregationFn: (\n    columnId: string\n  ) => AggregationFn<TGenerics> | undefined\n  setGrouping: (updater: Updater<GroupingState>) => void\n  resetGrouping: () => void\n  toggleColumnGrouping: (columnId: string) => void\n  getColumnCanGroup: (columnId: string) => boolean\n  getColumnIsGrouped: (columnId: string) => boolean\n  getColumnGroupedIndex: (columnId: string) => number\n  getToggleGroupingProps: <TGetter extends Getter<ToggleGroupingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleGroupingProps, TGetter>\n  getRowIsGrouped: (rowId: string) => boolean\n  getPreGroupedRowModel: () => RowModel<TGenerics>\n  getGroupedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Grouping = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): GroupingColumnDef<TGenerics> => {\n    return {\n      aggregationType: 'auto',\n    }\n  },\n\n  getInitialState: (): GroupingTableState => {\n    return {\n      grouping: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingOptions<TGenerics> => {\n    return {\n      onGroupingChange: makeStateUpdater('grouping', instance),\n      autoResetGrouping: true,\n      groupedColumnMode: 'reorder',\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingColumn<TGenerics> => {\n    return {\n      aggregationType: column.aggregationType,\n      getCanGroup: () => instance.getColumnCanGroup(column.id),\n      getGroupedIndex: () => instance.getColumnGroupedIndex(column.id),\n      getIsGrouped: () => instance.getColumnIsGrouped(column.id),\n      toggleGrouping: () => instance.toggleColumnGrouping(column.id),\n      getToggleGroupingProps: userProps =>\n        instance.getToggleGroupingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): GroupingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyGroupingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetGrouping\n        ) {\n          instance.resetGrouping()\n        }\n      },\n      getColumnAutoAggregationFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'number') {\n          return aggregationTypes.sum\n        }\n\n        if (Object.prototype.toString.call(value) === '[object Date]') {\n          return aggregationTypes.extent\n        }\n\n        return aggregationTypes.count\n      },\n      getColumnAggregationFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userAggregationTypes = instance.options.aggregationTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.aggregationType)\n          ? column.aggregationType\n          : column.aggregationType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userAggregationTypes as Record<string, any>)?.[\n              column.aggregationType as string\n            ] ??\n            (aggregationTypes[\n              column.aggregationType as BuiltInAggregationType\n            ] as AggregationFn<TGenerics>)\n      },\n\n      setGrouping: updater =>\n        instance.options.onGroupingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().grouping)\n        ),\n\n      toggleColumnGrouping: columnId => {\n        instance.setGrouping(old => {\n          // Find any existing grouping for this column\n          if (old?.includes(columnId)) {\n            return old.filter(d => d !== columnId)\n          }\n\n          return [...(old ?? []), columnId]\n        })\n      },\n\n      getColumnCanGroup: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableGrouping ??\n          instance.options.enableGrouping ??\n          column.defaultCanGroup ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsGrouped: columnId => {\n        return instance.getState().grouping?.includes(columnId)\n      },\n\n      getColumnGroupedIndex: columnId =>\n        instance.getState().grouping?.indexOf(columnId),\n\n      resetGrouping: () => {\n        instance.setGrouping(instance.initialState?.grouping ?? [])\n      },\n\n      getToggleGroupingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        const canGroup = column.getCanGroup()\n\n        const initialProps: ToggleGroupingProps = {\n          title: canGroup ? 'Toggle Grouping' : undefined,\n          onClick: canGroup\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleGrouping?.()\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getRowIsGrouped: rowId => !!instance.getRow(rowId)?.groupingColumnId,\n\n      getPreGroupedRowModel: () => instance.getSortedRowModel(),\n      getGroupedRowModel: memo(\n        () => [\n          instance.getState().grouping,\n          instance.getSortedRowModel(),\n          instance.options.groupRowsFn,\n        ],\n        (grouping, rowModel, groupRowsFn) => {\n          if (!groupRowsFn || !grouping.length) {\n            return rowModel\n          }\n\n          return groupRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): GroupingRow => {\n    return {\n      getIsGrouped: () => instance.getRowIsGrouped(row.id),\n    }\n  },\n\n  createCell: <TGenerics extends PartialGenerics>(\n    cell: Cell<TGenerics> & GroupingCell,\n    column: Column<TGenerics>,\n    row: Row<TGenerics>,\n    _instance: TableInstance<TGenerics>\n  ): GroupingCell => {\n    return {\n      getIsGrouped: () =>\n        column.getIsGrouped() && column.id === row.groupingColumnId,\n      getIsPlaceholder: () => !cell.getIsGrouped() && column.getIsGrouped(),\n      getIsAggregated: () =>\n        !cell.getIsGrouped() &&\n        !cell.getIsPlaceholder() &&\n        row.subRows?.length > 1,\n    }\n  },\n\n  orderColumns: <TGenerics extends PartialGenerics>(\n    leafColumns: Column<TGenerics>[],\n    grouping: string[],\n    groupedColumnMode?: GroupingColumnMode\n  ) => {\n    if (!grouping?.length || !groupedColumnMode) {\n      return leafColumns\n    }\n\n    const nonGroupingColumns = leafColumns.filter(\n      col => !grouping.includes(col.id)\n    )\n\n    if (groupedColumnMode === 'remove') {\n      return nonGroupingColumns\n    }\n\n    const groupingColumns = grouping\n      .map(g => leafColumns.find(col => col.id === g)!)\n      .filter(Boolean)\n\n    return [...groupingColumns, ...nonGroupingColumns]\n  },\n}\n","import { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nimport {\n  TableInstance,\n  OnChangeFn,\n  Updater,\n  Column,\n  PartialGenerics,\n} from '../types'\n\nimport { Grouping } from './Grouping'\n\nexport type ColumnOrderState = string[]\n\nexport type ColumnOrderTableState = {\n  columnOrder: ColumnOrderState\n}\n\nexport type ColumnOrderOptions = {\n  onColumnOrderChange?: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderDefaultOptions = {\n  onColumnOrderChange: OnChangeFn<ColumnOrderState>\n}\n\nexport type ColumnOrderInstance<TGenerics extends PartialGenerics> = {\n  setColumnOrder: (updater: Updater<ColumnOrderState>) => void\n  resetColumnOrder: () => void\n  getOrderColumnsFn: () => (columns: Column<TGenerics>[]) => Column<TGenerics>[]\n}\n\n//\n\nexport const Ordering = {\n  getInitialState: (): ColumnOrderTableState => {\n    return {\n      columnOrder: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderDefaultOptions => {\n    return {\n      onColumnOrderChange: makeStateUpdater('columnOrder', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnOrderInstance<TGenerics> => {\n    return {\n      setColumnOrder: updater =>\n        instance.options.onColumnOrderChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnOrder)\n        ),\n      resetColumnOrder: () => {\n        instance.setColumnOrder(instance.initialState.columnOrder ?? [])\n      },\n      getOrderColumnsFn: memo(\n        () => [\n          instance.getState().columnOrder,\n          instance.getState().grouping,\n          instance.options.groupedColumnMode,\n        ],\n        (columnOrder, grouping, groupedColumnMode) => columns => {\n          // Sort grouped columns to the start of the column list\n          // before the headers are built\n          let orderedColumns: Column<TGenerics>[] = []\n\n          // If there is no order, return the normal columns\n          if (!columnOrder?.length) {\n            orderedColumns = columns\n          } else {\n            const columnOrderCopy = [...columnOrder]\n\n            // If there is an order, make a copy of the columns\n            const columnsCopy = [...columns]\n\n            // And make a new ordered array of the columns\n\n            // Loop over the columns and place them in order into the new array\n            while (columnsCopy.length && columnOrderCopy.length) {\n              const targetColumnId = columnOrderCopy.shift()\n              const foundIndex = columnsCopy.findIndex(\n                d => d.id === targetColumnId\n              )\n              if (foundIndex > -1) {\n                orderedColumns.push(columnsCopy.splice(foundIndex, 1)[0]!)\n              }\n            }\n\n            // If there are any columns left, add them to the end\n            orderedColumns = [...orderedColumns, ...columnsCopy]\n          }\n\n          return Grouping.orderColumns(\n            orderedColumns,\n            grouping,\n            groupedColumnMode\n          )\n        },\n        {\n          key: 'getOrderColumnsFn',\n          // debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  Updater,\n  TableInstance,\n  Column,\n  PartialGenerics,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater } from '../utils'\n\ntype ColumnPinningPosition = false | 'left' | 'right'\n\nexport type ColumnPinningState = {\n  left?: string[]\n  right?: string[]\n}\n\nexport type ColumnPinningTableState = {\n  columnPinning: ColumnPinningState\n}\n\nexport type ColumnPinningOptions = {\n  onColumnPinningChange?: OnChangeFn<ColumnPinningState>\n  enablePinning?: boolean\n}\n\nexport type ColumnPinningDefaultOptions = {\n  onColumnPinningChange: OnChangeFn<ColumnPinningState>\n}\n\nexport type ColumnPinningColumnDef = {\n  enablePinning?: boolean\n  defaultCanPin?: boolean\n}\n\nexport type ColumnPinningColumn = {\n  getCanPin: () => boolean\n  getPinnedIndex: () => number\n  getIsPinned: () => ColumnPinningPosition\n  pin: (position: ColumnPinningPosition) => void\n}\n\nexport type ColumnPinningInstance<TGenerics extends PartialGenerics> = {\n  setColumnPinning: (updater: Updater<ColumnPinningState>) => void\n  resetColumnPinning: () => void\n  pinColumn: (columnId: string, position: ColumnPinningPosition) => void\n  getColumnCanPin: (columnId: string) => boolean\n  getColumnIsPinned: (columnId: string) => ColumnPinningPosition\n  getColumnPinnedIndex: (columnId: string) => number\n}\n\n//\n\nexport const Pinning = {\n  getInitialState: (): ColumnPinningTableState => {\n    return {\n      columnPinning: {\n        left: [],\n        right: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningDefaultOptions => {\n    return {\n      onColumnPinningChange: makeStateUpdater('columnPinning', instance),\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningColumn => {\n    return {\n      getCanPin: () => instance.getColumnCanPin(column.id),\n      getPinnedIndex: () => instance.getColumnPinnedIndex(column.id),\n      getIsPinned: () => instance.getColumnIsPinned(column.id),\n      pin: position => instance.pinColumn(column.id, position),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnPinningInstance<TGenerics> => {\n    return {\n      setColumnPinning: updater =>\n        instance.options.onColumnPinningChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnPinning)\n        ),\n\n      resetColumnPinning: () =>\n        instance.setColumnPinning(instance.initialState?.columnPinning ?? {}),\n\n      pinColumn: (columnId, position) => {\n        const column = instance.getColumn(columnId)\n\n        const columnIds = column\n          ?.getLeafColumns()\n          .map(d => d.id)\n          .filter(Boolean) as string[]\n\n        instance.setColumnPinning(old => {\n          if (position === 'right') {\n            return {\n              left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n              right: [\n                ...(old?.right ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n            }\n          }\n\n          if (position === 'left') {\n            return {\n              left: [\n                ...(old?.left ?? []).filter(d => !columnIds?.includes(d)),\n                ...columnIds,\n              ],\n              right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n            }\n          }\n\n          return {\n            left: (old?.left ?? []).filter(d => !columnIds?.includes(d)),\n            right: (old?.right ?? []).filter(d => !columnIds?.includes(d)),\n          }\n        })\n      },\n\n      getColumnCanPin: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumns = column.getLeafColumns()\n\n        return leafColumns.some(\n          d =>\n            d.enablePinning ??\n            instance.options.enablePinning ??\n            d.defaultCanPin ??\n            !!d.accessorFn\n        )\n      },\n\n      getColumnIsPinned: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const leafColumnIds = column.getLeafColumns().map(d => d.id)\n\n        const { left, right } = instance.getState().columnPinning\n\n        const isLeft = leafColumnIds.some(d => left?.includes(d))\n        const isRight = leafColumnIds.some(d => right?.includes(d))\n\n        return isLeft ? 'left' : isRight ? 'right' : false\n      },\n\n      getColumnPinnedIndex: columnId => {\n        const position = instance.getColumnIsPinned(columnId)\n\n        return position\n          ? instance.getState().columnPinning?.[position]?.indexOf(columnId) ??\n              -1\n          : 0\n      },\n    }\n  },\n}\n","import {\n  MouseEvent as ReactMouseEvent,\n  TouchEvent as ReactTouchEvent,\n} from 'react'\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\n//\n\nexport type ColumnSizing = Record<string, number>\n\nexport type ColumnSizingInfoState = {\n  startOffset: null | number\n  startSize: null | number\n  deltaOffset: null | number\n  deltaPercentage: null | number\n  isResizingColumn: false | string\n  columnSizingStart: [string, number][]\n}\n\nexport type ColumnSizingTableState = {\n  columnSizing: ColumnSizing\n  columnSizingInfo: ColumnSizingInfoState\n}\n\nexport type ColumnResizeMode = 'onChange' | 'onEnd'\n\nexport type ColumnSizingOptions = {\n  enableColumnResizing?: boolean\n  columnResizeMode?: ColumnResizeMode\n  onColumnSizingChange?: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange?: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnSizingDefaultOptions = {\n  columnResizeMode: ColumnResizeMode\n  onColumnSizingChange: OnChangeFn<ColumnSizing>\n  onColumnSizingInfoChange: OnChangeFn<ColumnSizingInfoState>\n}\n\nexport type ColumnResizerProps = {\n  title?: string\n  onMouseDown?: (e: ReactMouseEvent) => void\n  onTouchStart?: (e: ReactTouchEvent) => void\n  draggable?: boolean\n  role?: string\n}\n\nexport type ColumnSizingInstance<TGenerics extends PartialGenerics> = {\n  setColumnSizing: (updater: Updater<ColumnSizing>) => void\n  setColumnSizingInfo: (updater: Updater<ColumnSizingInfoState>) => void\n  resetColumnSizing: () => void\n  resetColumnSize: (columnId: string) => void\n  resetHeaderSize: (headerId: string) => void\n  resetHeaderSizeInfo: () => void\n  getColumnCanResize: (columnId: string) => boolean\n  getHeaderCanResize: (headerId: string) => boolean\n  getHeaderResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  getColumnIsResizing: (columnId: string) => boolean\n  getHeaderIsResizing: (headerId: string) => boolean\n}\n\nexport type ColumnSizingColumnDef = {\n  enableResizing?: boolean\n  defaultCanResize?: boolean\n}\n\nexport type ColumnSizingColumn<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  resetSize: () => void\n}\n\nexport type ColumnSizingHeader<TGenerics extends PartialGenerics> = {\n  getCanResize: () => boolean\n  getIsResizing: () => boolean\n  getResizerProps: <TGetter extends Getter<ColumnResizerProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ColumnResizerProps, TGetter>\n  resetSize: () => void\n}\n\n//\n\nexport const defaultColumnSizing = {\n  width: 150,\n  minWidth: 20,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nexport const ColumnSizing = {\n  getInitialState: (): ColumnSizingTableState => {\n    return {\n      columnSizing: {},\n      columnSizingInfo: {\n        startOffset: null,\n        startSize: null,\n        deltaOffset: null,\n        deltaPercentage: null,\n        isResizingColumn: false,\n        columnSizingStart: [],\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingDefaultOptions => {\n    return {\n      columnResizeMode: 'onEnd',\n      onColumnSizingChange: makeStateUpdater('columnSizing', instance),\n      onColumnSizingInfoChange: makeStateUpdater('columnSizingInfo', instance),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingInstance<TGenerics> => {\n    return {\n      setColumnSizing: updater =>\n        instance.options.onColumnSizingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizing)\n        ),\n      setColumnSizingInfo: updater =>\n        instance.options.onColumnSizingInfoChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().columnSizingInfo)\n        ),\n      resetColumnSizing: () => {\n        instance.setColumnSizing(instance.initialState.columnSizing ?? {})\n      },\n      resetHeaderSizeInfo: () => {\n        instance.setColumnSizingInfo(\n          instance.initialState.columnSizingInfo ?? {}\n        )\n      },\n      resetColumnSize: columnId => {\n        instance.setColumnSizing(({ [columnId]: _, ...rest }) => {\n          return rest\n        })\n      },\n      resetHeaderSize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        return instance.resetColumnSize(header.column.id)\n      },\n      getHeaderCanResize: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnCanResize(header.column.id)\n      },\n      getColumnCanResize: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableResizing ??\n          instance.options.enableColumnResizing ??\n          column.defaultCanResize ??\n          true\n        )\n      },\n      getColumnIsResizing: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          instance.getState().columnSizingInfo.isResizingColumn === columnId\n        )\n      },\n      getHeaderIsResizing: headerId => {\n        const header = instance.getHeader(headerId)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        return instance.getColumnIsResizing(header.column.id)\n      },\n\n      getHeaderResizerProps: (headerId, userProps) => {\n        const header = instance.getHeader(headerId)\n        const column = instance.getColumn(header.column.id)\n\n        const canResize = column.getCanResize()\n\n        const onResizeStart = (e: ReactMouseEvent | ReactTouchEvent) => {\n          if (isTouchStartEvent(e)) {\n            // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n            if (e.touches && e.touches.length > 1) {\n              return\n            }\n          }\n\n          const header = headerId ? instance.getHeader(headerId) : undefined\n\n          const startSize = header ? header.getWidth() : column.getWidth()\n\n          const columnSizingStart: [string, number][] = header\n            ? header.getLeafHeaders().map(d => [d.column.id, d.getWidth()])\n            : [[column.id, column.getWidth()]]\n\n          const clientX = isTouchStartEvent(e)\n            ? Math.round(e.touches[0].clientX)\n            : e.clientX\n\n          const updateOffset = (\n            eventType: 'move' | 'end',\n            clientXPos?: number\n          ) => {\n            if (typeof clientXPos !== 'number') {\n              return\n            }\n\n            let newColumnSizing: ColumnSizing = {}\n\n            instance.setColumnSizingInfo(old => {\n              const deltaOffset = clientXPos - (old?.startOffset ?? 0)\n              const deltaPercentage = Math.max(\n                deltaOffset / (old?.startSize ?? 0),\n                -0.999999\n              )\n\n              old.columnSizingStart.forEach(([columnId, headerWidth]) => {\n                newColumnSizing[columnId] =\n                  Math.round(\n                    Math.max(headerWidth + headerWidth * deltaPercentage, 0) *\n                      100\n                  ) / 100\n              })\n\n              return {\n                ...old,\n                deltaOffset,\n                deltaPercentage,\n              }\n            })\n\n            if (\n              instance.options.columnResizeMode === 'onChange' ||\n              eventType === 'end'\n            ) {\n              instance.setColumnSizing(old => ({\n                ...old,\n                ...newColumnSizing,\n              }))\n            }\n          }\n\n          const onMove = (clientXPos?: number) =>\n            updateOffset('move', clientXPos)\n\n          const onEnd = (clientXPos?: number) => {\n            updateOffset('end', clientXPos)\n\n            instance.setColumnSizingInfo(old => ({\n              ...old,\n              isResizingColumn: false,\n              startOffset: null,\n              startSize: null,\n              deltaOffset: null,\n              deltaPercentage: null,\n              columnSizingStart: [],\n            }))\n          }\n\n          const mouseEvents = {\n            moveHandler: (e: MouseEvent) => onMove(e.clientX),\n            upHandler: (e: MouseEvent) => {\n              document.removeEventListener('mousemove', mouseEvents.moveHandler)\n              document.removeEventListener('mouseup', mouseEvents.upHandler)\n              onEnd(e.clientX)\n            },\n          }\n\n          const touchEvents = {\n            moveHandler: (e: TouchEvent) => {\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onMove(e.touches[0].clientX)\n              return false\n            },\n            upHandler: (e: TouchEvent) => {\n              document.removeEventListener('touchmove', touchEvents.moveHandler)\n              document.removeEventListener('touchend', touchEvents.upHandler)\n              if (e.cancelable) {\n                e.preventDefault()\n                e.stopPropagation()\n              }\n              onEnd(e.touches[0].clientX)\n            },\n          }\n\n          const passiveIfSupported = passiveEventSupported()\n            ? { passive: false }\n            : false\n\n          if (isTouchStartEvent(e)) {\n            document.addEventListener(\n              'touchmove',\n              touchEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'touchend',\n              touchEvents.upHandler,\n              passiveIfSupported\n            )\n          } else {\n            document.addEventListener(\n              'mousemove',\n              mouseEvents.moveHandler,\n              passiveIfSupported\n            )\n            document.addEventListener(\n              'mouseup',\n              mouseEvents.upHandler,\n              passiveIfSupported\n            )\n          }\n\n          instance.setColumnSizingInfo(old => ({\n            ...old,\n            startOffset: clientX,\n            startSize,\n            deltaOffset: 0,\n            deltaPercentage: 0,\n            columnSizingStart,\n            isResizingColumn: column.id,\n          }))\n        }\n\n        const initialProps: ColumnResizerProps = canResize\n          ? {\n              title: 'Toggle Grouping',\n              draggable: false,\n              role: 'separator',\n              onMouseDown: (e: ReactMouseEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n              onTouchStart: (e: ReactTouchEvent) => {\n                e.persist()\n                onResizeStart(e)\n              },\n            }\n          : {}\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingColumn<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(column.id),\n      getCanResize: () => instance.getColumnCanResize(column.id),\n      resetSize: () => instance.resetColumnSize(column.id),\n    }\n  },\n\n  createHeader: <TGenerics extends PartialGenerics>(\n    header: Header<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ColumnSizingHeader<TGenerics> => {\n    return {\n      getIsResizing: () => instance.getColumnIsResizing(header.column.id),\n      getCanResize: () => instance.getColumnCanResize(header.column.id),\n      resetSize: () => instance.resetColumnSize(header.column.id),\n      getResizerProps: userProps =>\n        instance.getHeaderResizerProps(header.id, userProps),\n    }\n  },\n}\n\nlet passiveSupported: boolean | null = null\nexport function passiveEventSupported() {\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    const noop = () => {}\n\n    window.addEventListener('test', noop, options)\n    window.removeEventListener('test', noop)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\nfunction isTouchStartEvent(\n  e: ReactTouchEvent | ReactMouseEvent\n): e is ReactTouchEvent {\n  return e.type === 'touchstart'\n}\n","import {\n  Cell,\n  Column,\n  CoreHeader,\n  FooterGroupProps,\n  FooterProps,\n  Getter,\n  Header,\n  HeaderGroup,\n  HeaderGroupProps,\n  HeaderProps,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n} from '../types'\nimport { propGetter, memo, flexRender } from '../utils'\nimport { ColumnSizing } from './ColumnSizing'\n\nexport type HeadersRow<TGenerics extends PartialGenerics> = {\n  _getAllVisibleCells: () => Cell<TGenerics>[]\n  getVisibleCells: () => Cell<TGenerics>[]\n  getLeftVisibleCells: () => Cell<TGenerics>[]\n  getCenterVisibleCells: () => Cell<TGenerics>[]\n  getRightVisibleCells: () => Cell<TGenerics>[]\n}\n\nexport type HeadersInstance<TGenerics extends PartialGenerics> = {\n  createHeader: (\n    column: Column<TGenerics>,\n    options: {\n      id?: string\n      isPlaceholder?: boolean\n      placeholderId?: string\n      depth: number\n    }\n  ) => Header<TGenerics>\n  getHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getLeftHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getCenterHeaderGroups: () => HeaderGroup<TGenerics>[]\n  getRightHeaderGroups: () => HeaderGroup<TGenerics>[]\n\n  getFooterGroups: () => HeaderGroup<TGenerics>[]\n  getLeftFooterGroups: () => HeaderGroup<TGenerics>[]\n  getCenterFooterGroups: () => HeaderGroup<TGenerics>[]\n  getRightFooterGroups: () => HeaderGroup<TGenerics>[]\n\n  getFlatHeaders: () => Header<TGenerics>[]\n  getLeftFlatHeaders: () => Header<TGenerics>[]\n  getCenterFlatHeaders: () => Header<TGenerics>[]\n  getRightFlatHeaders: () => Header<TGenerics>[]\n\n  getLeafHeaders: () => Header<TGenerics>[]\n  getLeftLeafHeaders: () => Header<TGenerics>[]\n  getCenterLeafHeaders: () => Header<TGenerics>[]\n  getRightLeafHeaders: () => Header<TGenerics>[]\n\n  getHeader: (id: string) => Header<TGenerics>\n\n  getHeaderGroupProps: <TGetter extends Getter<HeaderGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderGroupProps, TGetter>\n  getFooterGroupProps: <TGetter extends Getter<FooterGroupProps>>(\n    id: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterGroupProps, TGetter>\n  getHeaderProps: <TGetter extends Getter<HeaderProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<HeaderProps, TGetter>\n  getFooterProps: <TGetter extends Getter<FooterProps>>(\n    headerId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<FooterProps, TGetter>\n  getTotalWidth: () => number\n}\n\n//\n\nexport const Headers = {\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): HeadersRow<TGenerics> => {\n    return {\n      _getAllVisibleCells: memo(\n        () => [\n          row\n            .getAllCells()\n            .filter(cell => cell.column.getIsVisible())\n            .map(d => d.id)\n            .join('_'),\n        ],\n        _ => {\n          return row.getAllCells().filter(cell => cell.column.getIsVisible())\n        },\n        {\n          key: 'row._getAllVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getVisibleCells: memo(\n        () => [\n          row.getLeftVisibleCells(),\n          row.getCenterVisibleCells(),\n          row.getRightVisibleCells(),\n        ],\n        (left, center, right) => [...left, ...center, ...right],\n        {\n          key: 'row.getVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getCenterVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, left, right) => {\n          const leftAndRight = [...(left ?? []), ...(right ?? [])]\n\n          return allCells.filter(d => !leftAndRight.includes(d.columnId))\n        },\n        {\n          key: 'row.getCenterVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getLeftVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.left,\n          ,\n        ],\n        (allCells, left) => {\n          const cells = (left ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getLeftVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n      getRightVisibleCells: memo(\n        () => [\n          row._getAllVisibleCells(),\n          instance.getState().columnPinning.right,\n        ],\n        (allCells, right) => {\n          const cells = (right ?? [])\n            .map(columnId => allCells.find(cell => cell.columnId === columnId)!)\n            .filter(Boolean)\n\n          return cells\n        },\n        {\n          key: 'row.getRightVisibleCells',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      ),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): HeadersInstance<TGenerics> => {\n    return {\n      createHeader: (\n        column: Column<TGenerics>,\n        options: {\n          id?: string\n          isPlaceholder?: boolean\n          placeholderId?: string\n          depth: number\n        }\n      ) => {\n        const id = options.id ?? column.id\n\n        let header: CoreHeader<TGenerics> = {\n          id,\n          column,\n          isPlaceholder: options.isPlaceholder,\n          placeholderId: options.placeholderId,\n          depth: options.depth,\n          subHeaders: [],\n          colSpan: 0,\n          rowSpan: 0,\n          getWidth: () => {\n            let sum = 0\n\n            const recurse = (header: CoreHeader<TGenerics>) => {\n              if (header.subHeaders.length) {\n                header.subHeaders.forEach(recurse)\n              } else {\n                sum += header.column.getWidth() ?? 0\n              }\n            }\n\n            recurse(header)\n\n            return sum\n          },\n          getLeafHeaders: (): Header<TGenerics>[] => {\n            const leafHeaders: CoreHeader<TGenerics>[] = []\n\n            const recurseHeader = (h: CoreHeader<TGenerics>) => {\n              if (h.subHeaders && h.subHeaders.length) {\n                h.subHeaders.map(recurseHeader)\n              }\n              leafHeaders.push(h)\n            }\n\n            recurseHeader(header)\n\n            return leafHeaders as Header<TGenerics>[]\n          },\n          getHeaderProps: userProps =>\n            instance.getHeaderProps(header.id, userProps)!,\n          getFooterProps: userProps =>\n            instance.getFooterProps(header.id, userProps)!,\n          renderHeader: () =>\n            flexRender(column.header, { instance, header, column }),\n          renderFooter: () =>\n            flexRender(column.footer, { instance, header, column }),\n        }\n\n        // Yes, we have to convert instance to unknown, because we know more than the compiler here.\n        return Object.assign(\n          header,\n          ColumnSizing.createHeader(header as Header<TGenerics>, instance)\n        ) as Header<TGenerics>\n      },\n\n      // Header Groups\n\n      getHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          const leftColumns = leafColumns.filter(column =>\n            left?.includes(column.id)\n          )\n          const rightColumns = leafColumns.filter(column =>\n            right?.includes(column.id)\n          )\n          const centerColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          const headerGroups = buildHeaderGroups(\n            allColumns,\n            [...leftColumns, ...centerColumns, ...rightColumns],\n            instance\n          )\n\n          return headerGroups\n        },\n        {\n          key: 'getHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, left, right) => {\n          leafColumns = leafColumns.filter(\n            column => !left?.includes(column.id) && !right?.includes(column.id)\n          )\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'center')\n        },\n        {\n          key: 'getCenterHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.left,\n        ],\n        (allColumns, leafColumns, left) => {\n          leafColumns = leafColumns.filter(column => left?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'left')\n        },\n        {\n          key: 'getLeftHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightHeaderGroups: memo(\n        () => [\n          instance.getAllColumns(),\n          instance.getVisibleLeafColumns(),\n          instance.getState().columnPinning.right,\n        ],\n        (allColumns, leafColumns, right) => {\n          leafColumns = leafColumns.filter(column => right?.includes(column.id))\n          return buildHeaderGroups(allColumns, leafColumns, instance, 'right')\n        },\n        {\n          key: 'getRightHeaderGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Footer Groups\n\n      getFooterGroups: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFooterGroups: memo(\n        () => [instance.getLeftHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getLeftFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFooterGroups: memo(\n        () => [instance.getCenterHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getCenterFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFooterGroups: memo(\n        () => [instance.getRightHeaderGroups()],\n        headerGroups => {\n          return [...headerGroups].reverse()\n        },\n        {\n          key: 'getRightFooterGroups',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Flat Headers\n\n      getFlatHeaders: memo(\n        () => [instance.getHeaderGroups()],\n        headerGroups => {\n          return headerGroups\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftFlatHeaders: memo(\n        () => [instance.getLeftHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getLeftFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getCenterFlatHeaders: memo(\n        () => [instance.getCenterHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getCenterFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightFlatHeaders: memo(\n        () => [instance.getRightHeaderGroups()],\n        left => {\n          return left\n            .map(headerGroup => {\n              return headerGroup.headers\n            })\n            .flat()\n        },\n        {\n          key: 'getRightFlatHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      // Leaf Headers\n\n      getCenterLeafHeaders: memo(\n        () => [instance.getCenterFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getCenterLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeftLeafHeaders: memo(\n        () => [instance.getLeftFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getLeftLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getRightLeafHeaders: memo(\n        () => [instance.getRightFlatHeaders()],\n        flatHeaders => {\n          return flatHeaders.filter(header => !header.subHeaders?.length)\n        },\n        {\n          key: 'getRightLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getLeafHeaders: memo(\n        () => [\n          instance.getLeftHeaderGroups(),\n          instance.getCenterHeaderGroups(),\n          instance.getRightHeaderGroups(),\n        ],\n        (left, center, right) => {\n          return [\n            ...(left[0]?.headers ?? []),\n            ...(center[0]?.headers ?? []),\n            ...(right[0]?.headers ?? []),\n          ]\n            .map(header => {\n              return header.getLeafHeaders()\n            })\n            .flat()\n        },\n        {\n          key: 'getLeafHeaders',\n          debug: () =>\n            instance.options.debugAll ?? instance.options.debugHeaders,\n        }\n      ),\n\n      getHeader: (id: string) => {\n        const header = [\n          ...instance.getFlatHeaders(),\n          ...instance.getCenterFlatHeaders(),\n          ...instance.getLeftFlatHeaders(),\n          ...instance.getRightFlatHeaders(),\n        ].find(d => d.id === id)\n\n        if (!header) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(`Could not find header with id: ${id}`)\n          }\n          throw new Error()\n        }\n\n        return header\n      },\n\n      getHeaderGroupProps: (id, userProps) => {\n        const headerGroup = instance.getHeaderGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        return propGetter(\n          {\n            key: headerGroup.id,\n            role: 'row',\n          },\n          userProps\n        )\n      },\n\n      getFooterGroupProps: (id, userProps) => {\n        const headerGroup = instance.getFooterGroups().find(d => d.id === id)\n\n        if (!headerGroup) {\n          return\n        }\n\n        const initialProps = {\n          key: headerGroup.id,\n          role: 'row',\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getHeaderProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        if (!header) {\n          throw new Error()\n        }\n\n        const initialProps: HeaderProps = {\n          key: header.id,\n          role: 'columnheader',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getFooterProps: (id, userProps) => {\n        const header = instance.getHeader(id)\n\n        const initialProps: FooterProps = {\n          key: header.id,\n          role: 'columnfooter',\n          colSpan: header.colSpan,\n          rowSpan: header.rowSpan,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getTotalWidth: () => {\n        let width = 0\n\n        instance.getVisibleLeafColumns().forEach(column => {\n          width += column.getWidth() ?? 0\n        })\n\n        return width\n      },\n    }\n  },\n}\n\nexport function buildHeaderGroups<TGenerics extends PartialGenerics>(\n  allColumns: Column<TGenerics>[],\n  columnsToGroup: Column<TGenerics>[],\n  instance: TableInstance<TGenerics>,\n  headerFamily?: 'center' | 'left' | 'right'\n) {\n  // Find the max depth of the columns:\n  // build the leaf column row\n  // build each buffer row going up\n  //    placeholder for non-existent level\n  //    real column for existing level\n\n  let maxDepth = 0\n\n  const findMaxDepth = (columns: Column<TGenerics>[], depth = 1) => {\n    maxDepth = Math.max(maxDepth, depth)\n\n    columns\n      .filter(column => column.getIsVisible())\n      .forEach(column => {\n        if (column.columns?.length) {\n          findMaxDepth(column.columns, depth + 1)\n        }\n      }, 0)\n  }\n\n  findMaxDepth(allColumns)\n\n  let headerGroups: HeaderGroup<TGenerics>[] = []\n\n  const createHeaderGroup = (\n    headersToGroup: Header<TGenerics>[],\n    depth: number\n  ) => {\n    // The header group we are creating\n    const headerGroup: HeaderGroup<TGenerics> = {\n      depth,\n      id: [headerFamily, `${depth}`].filter(Boolean).join('_'),\n      headers: [],\n      getHeaderGroupProps: getterValue =>\n        instance.getHeaderGroupProps(`${depth}`, getterValue)!,\n      getFooterGroupProps: getterValue =>\n        instance.getFooterGroupProps(`${depth}`, getterValue)!,\n    }\n\n    // The parent columns we're going to scan next\n    const parentHeaders: Header<TGenerics>[] = []\n\n    // Scan each column for parents\n    headersToGroup.forEach(headerToGroup => {\n      // What is the latest (last) parent column?\n\n      const latestParentHeader = [...parentHeaders].reverse()[0]\n\n      const isLeafHeader = headerToGroup.column.depth === headerGroup.depth\n\n      let column: Column<TGenerics>\n      let isPlaceholder = false\n\n      if (isLeafHeader && headerToGroup.column.parent) {\n        // The parent header is new\n        column = headerToGroup.column.parent\n      } else {\n        // The parent header is repeated\n        column = headerToGroup.column\n        isPlaceholder = true\n      }\n\n      const header = instance.createHeader(column, {\n        id: [headerFamily, depth, column.id, headerToGroup?.id]\n          .filter(Boolean)\n          .join('_'),\n        isPlaceholder,\n        placeholderId: isPlaceholder\n          ? `${parentHeaders.filter(d => d.column === column).length}`\n          : undefined,\n        depth,\n      })\n\n      if (!latestParentHeader || latestParentHeader.column !== header.column) {\n        header.subHeaders.push(headerToGroup)\n        parentHeaders.push(header)\n      } else {\n        latestParentHeader.subHeaders.push(headerToGroup)\n      }\n\n      // if (!headerToGroup.isPlaceholder) {\n      //   headerToGroup.column.header = headerToGroup;\n      // }\n\n      headerGroup.headers.push(headerToGroup)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (depth > 0) {\n      createHeaderGroup(parentHeaders, depth - 1)\n    }\n  }\n\n  const bottomHeaders = columnsToGroup.map(column =>\n    instance.createHeader(column, {\n      depth: maxDepth,\n    })\n  )\n\n  createHeaderGroup(bottomHeaders, maxDepth - 1)\n\n  headerGroups.reverse()\n\n  // headerGroups = headerGroups.filter(headerGroup => {\n  //   return !headerGroup.headers.every(header => header.isPlaceholder)\n  // })\n\n  const recurseHeadersForSpans = (headers: Header<TGenerics>[]) => {\n    const filteredHeaders = headers.filter(header =>\n      header.column.getIsVisible()\n    )\n\n    return filteredHeaders.map(header => {\n      let colSpan = 0\n      let rowSpan = 0\n      let childRowSpans = [0]\n\n      if (header.subHeaders && header.subHeaders.length) {\n        childRowSpans = []\n\n        recurseHeadersForSpans(header.subHeaders).forEach(\n          ({ colSpan: childColSpan, rowSpan: childRowSpan }) => {\n            colSpan += childColSpan\n            childRowSpans.push(childRowSpan)\n          }\n        )\n      } else {\n        colSpan = 1\n      }\n\n      const minChildRowSpan = Math.min(...childRowSpans)\n      rowSpan = rowSpan + minChildRowSpan\n\n      header.colSpan = colSpan > 0 ? colSpan : undefined\n      header.rowSpan = rowSpan > 0 ? rowSpan : undefined\n\n      return { colSpan, rowSpan }\n    })\n  }\n\n  recurseHeadersForSpans(headerGroups[0]?.headers ?? [])\n\n  return headerGroups\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const filterTypes = {\n  includesString,\n  includesStringSensitive,\n  equalsString,\n  equalsStringSensitive,\n  arrIncludes,\n  arrIncludesAll,\n  equals,\n  weakEquals,\n  betweenNumberRange,\n}\n\nexport type BuiltInFilterType = keyof typeof filterTypes\n\nfunction includesString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).toLowerCase().includes(search)\n    })\n  })\n  return rows\n}\n\nincludesString.autoRemove = (val: any) => testFalsey(val)\n\nfunction includesStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n\n  rows = rows.filter(row => {\n    return columnIds.some(id => {\n      return String(row.values[id]).includes(search)\n    })\n  })\n  return rows\n}\n\nincludesStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsString<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue).toLowerCase()\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === search\n        : true\n    })\n  })\n}\n\nequalsString.autoRemove = (val: any) => testFalsey(val)\n\nfunction equalsStringSensitive<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  const search = String(filterValue)\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined ? String(rowValue) === search : true\n    })\n  })\n}\n\nequalsStringSensitive.autoRemove = (val: any) => testFalsey(val)\n\nfunction arrIncludes<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\narrIncludes.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction arrIncludesAll<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown[]\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\narrIncludesAll.autoRemove = (val: any) => testFalsey(val) || !val?.length\n\nfunction equals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nequals.autoRemove = (val: any) => testFalsey(val)\n\nfunction weakEquals<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: unknown\n) {\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nweakEquals.autoRemove = (val: any) => testFalsey(val)\n\nfunction betweenNumberRange<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnIds: string[],\n  filterValue: [unknown, unknown]\n) {\n  let [unsafeMin, unsafeMax] = filterValue || []\n\n  let parsedMin =\n    typeof unsafeMin !== 'number' ? parseFloat(unsafeMin as string) : unsafeMin\n  let parsedMax =\n    typeof unsafeMax !== 'number' ? parseFloat(unsafeMax as string) : unsafeMax\n\n  let min =\n    unsafeMin === null || Number.isNaN(parsedMin) ? -Infinity : parsedMin\n  let max = unsafeMax === null || Number.isNaN(parsedMax) ? Infinity : parsedMax\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return columnIds.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetweenNumberRange.autoRemove = (val: any) =>\n  testFalsey(val) || (testFalsey(val[0]) && testFalsey(val[1]))\n\n// Utils\n\nfunction testFalsey(val: any) {\n  return val === undefined || val === null || val === ''\n}\n","import { RowModel } from '..'\nimport { BuiltInFilterType, filterTypes } from '../filterTypes'\nimport {\n  Column,\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n} from '../utils'\n\nexport type ColumnFilter = {\n  id: string\n  value: unknown\n}\n\nexport type ColumnFiltersState = ColumnFilter[]\n\nexport type FilterFn<TGenerics extends PartialGenerics> = {\n  (rows: Row<TGenerics>[], columnIds: string[], filterValue: any): any\n  autoRemove?: ColumnFilterAutoRemoveTestFn<TGenerics>\n}\n\nexport type ColumnFilterAutoRemoveTestFn<TGenerics extends PartialGenerics> = (\n  value: unknown,\n  column?: Column<TGenerics>\n) => boolean\n\nexport type CustomFilterTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  FilterFn<TGenerics>\n>\n\nexport type FiltersTableState = {\n  columnFilters: ColumnFiltersState\n  globalFilter: any\n}\n\nexport type FilterType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInFilterType\n  | TGenerics['FilterFns']\n  | FilterFn<TGenerics>\n\nexport type FiltersColumnDef<TGenerics extends PartialGenerics> = {\n  filterType?: FilterType<Overwrite<TGenerics, { Value: any }>>\n  enableAllFilters?: boolean\n  enableColumnFilter?: boolean\n  enableGlobalFilter?: boolean\n  defaultCanFilter?: boolean\n  defaultCanColumnFilter?: boolean\n  defaultCanGlobalFilter?: boolean\n}\n\nexport type FiltersColumn<TGenerics extends PartialGenerics> = {\n  filterType: FilterType<Overwrite<TGenerics, { Value: any }>>\n  getCanColumnFilter: () => boolean\n  getCanGlobalFilter: () => boolean\n  getColumnFilterIndex: () => number\n  getIsColumnFiltered: () => boolean\n  getColumnFilterValue: () => unknown\n  setColumnFilterValue: (value: any) => void\n  getPreFilteredRows: () => Row<TGenerics>[] | undefined\n  getPreFilteredUniqueValues: () => Map<any, number>\n  getPreFilteredMinMaxValues: () => [any, any]\n}\n\nexport type FiltersOptions<TGenerics extends PartialGenerics> = {\n  filterFromChildrenUp?: boolean\n  filterTypes?: TGenerics['FilterFns']\n  enableFilters?: boolean\n  // Column\n  onColumnFiltersChange?: OnChangeFn<ColumnFiltersState>\n  autoResetColumnFilters?: boolean\n  enableColumnFilters?: boolean\n  columnFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    coreRowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  // Global\n  globalFilterType?: FilterType<TGenerics>\n  onGlobalFilterChange?: OnChangeFn<any>\n  enableGlobalFilters?: boolean\n  autoResetGlobalFilter?: boolean\n  enableGlobalFilter?: boolean\n  globalFilterRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n}\n\nexport type FiltersInstance<TGenerics extends PartialGenerics> = {\n  _notifyFiltersReset: () => void\n  getColumnAutoFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  getColumnFilterFn: (columnId: string) => FilterFn<TGenerics> | undefined\n\n  setColumnFilters: (updater: Updater<ColumnFiltersState>) => void\n  setColumnFilterValue: (columnId: string, value: any) => void\n  resetColumnFilters: () => void\n  getColumnCanColumnFilter: (columnId: string) => boolean\n  getColumnCanGlobalFilterFn?: (column: Column<TGenerics>) => boolean\n\n  getColumnIsFiltered: (columnId: string) => boolean\n  getColumnFilterValue: (columnId: string) => unknown\n  getColumnFilterIndex: (columnId: string) => number\n\n  // All\n  getPreFilteredRowModel: () => RowModel<TGenerics>\n\n  // Column Filters\n  getPreColumnFilteredRowModel: () => RowModel<TGenerics>\n  getColumnFilteredRowModel: () => RowModel<TGenerics>\n\n  // Global Filters\n  setGlobalFilter: (updater: Updater<any>) => void\n  resetGlobalFilter: () => void\n  getGlobalAutoFilterFn: () => FilterFn<TGenerics> | undefined\n  getGlobalFilterFn: () => FilterFn<TGenerics> | undefined\n  getColumnCanGlobalFilter: (columnId: string) => boolean\n  getPreGlobalFilteredRowModel: () => RowModel<TGenerics>\n  getGlobalFilteredRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport function getDefaultColumn<\n  TGenerics extends PartialGenerics\n>(): FiltersColumnDef<TGenerics> {\n  return {\n    filterType: 'auto',\n  }\n}\n\nexport const Filters = {\n  getInitialState: (): FiltersTableState => {\n    return {\n      columnFilters: [],\n      globalFilter: undefined,\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersOptions<TGenerics> => {\n    return {\n      onColumnFiltersChange: makeStateUpdater('columnFilters', instance),\n      onGlobalFilterChange: makeStateUpdater('globalFilter', instance),\n      autoResetColumnFilters: true,\n      filterFromChildrenUp: true,\n      autoResetGlobalFilter: true,\n      globalFilterType: 'auto',\n      getColumnCanGlobalFilterFn: column => {\n        const value = instance\n          .getCoreRowModel()\n          .flatRows[0]?.getAllCellsByColumnId()[column.id]?.value\n\n        return typeof value === 'string'\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): FiltersColumn<TGenerics> => {\n    const getFacetInfo = memo(\n      () => [column.getPreFilteredRows()],\n      (rows = []) => {\n        let preFilteredUniqueValues = new Map<any, number>()\n\n        let preFilteredMinMaxValues: [any, any] = [\n          rows[0]?.values[column.id] ?? null,\n          rows[0]?.values[column.id] ?? null,\n        ]\n\n        for (let i = 0; i < rows.length; i++) {\n          const value = rows[i]?.values[column.id]\n\n          if (preFilteredUniqueValues.has(value)) {\n            preFilteredUniqueValues.set(\n              value,\n              (preFilteredUniqueValues.get(value) ?? 0) + 1\n            )\n          } else {\n            preFilteredUniqueValues.set(value, 1)\n          }\n\n          if (value < preFilteredMinMaxValues[0]) {\n            preFilteredMinMaxValues[0] = value\n          } else if (value > preFilteredMinMaxValues[1]) {\n            preFilteredMinMaxValues[1] = value\n          }\n        }\n\n        return {\n          preFilteredUniqueValues,\n          preFilteredMinMaxValues,\n        }\n      },\n      {\n        key: 'column.getFacetInfo',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    )\n\n    return {\n      filterType: column.filterType,\n      getCanColumnFilter: () => instance.getColumnCanColumnFilter(column.id),\n      getCanGlobalFilter: () => instance.getColumnCanGlobalFilter(column.id),\n      getColumnFilterIndex: () => instance.getColumnFilterIndex(column.id),\n      getIsColumnFiltered: () => instance.getColumnIsFiltered(column.id),\n      getColumnFilterValue: () => instance.getColumnFilterValue(column.id),\n      setColumnFilterValue: val =>\n        instance.setColumnFilterValue(column.id, val),\n      getPreFilteredUniqueValues: () => getFacetInfo().preFilteredUniqueValues,\n      getPreFilteredMinMaxValues: () => getFacetInfo().preFilteredMinMaxValues,\n      getPreFilteredRows: () => undefined,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): FiltersInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyFiltersReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (instance.options.autoResetAll === true) {\n          instance.resetSorting()\n        } else {\n          if (instance.options.autoResetColumnFilters) {\n            instance.resetColumnFilters()\n          }\n          if (instance.options.autoResetGlobalFilter) {\n            instance.resetGlobalFilter()\n          }\n        }\n      },\n      getColumnAutoFilterFn: columnId => {\n        const firstRow = instance.getCoreRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return filterTypes.includesString\n        }\n\n        if (typeof value === 'number') {\n          return filterTypes.betweenNumberRange\n        }\n\n        if (value !== null && typeof value === 'object') {\n          return filterTypes.equals\n        }\n\n        if (Array.isArray(value)) {\n          return filterTypes.arrIncludes\n        }\n\n        return filterTypes.weakEquals\n      },\n      getGlobalAutoFilterFn: () => {\n        return filterTypes.includesString\n      },\n      getColumnFilterFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userFilterTypes = instance.options.filterTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.filterType)\n          ? column.filterType\n          : column.filterType === 'auto'\n          ? instance.getColumnAutoFilterFn(columnId)\n          : (userFilterTypes as Record<string, any>)?.[\n              column.filterType as string\n            ] ??\n            (filterTypes[\n              column.filterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      getGlobalFilterFn: () => {\n        const { filterTypes: userFilterTypes, globalFilterType } =\n          instance.options\n\n        return isFunction(globalFilterType)\n          ? globalFilterType\n          : globalFilterType === 'auto'\n          ? instance.getGlobalAutoFilterFn()\n          : (userFilterTypes as Record<string, any>)?.[\n              globalFilterType as string\n            ] ??\n            (filterTypes[\n              globalFilterType as BuiltInFilterType\n            ] as FilterFn<TGenerics>)\n      },\n\n      setColumnFilters: (updater: Updater<ColumnFiltersState>) => {\n        const leafColumns = instance.getAllLeafColumns()\n\n        const updateFn = (old: ColumnFiltersState) => {\n          return functionalUpdate(updater, old)?.filter(filter => {\n            const column = leafColumns.find(d => d.id === filter.id)\n\n            if (column) {\n              const filterFn = instance.getColumnFilterFn(column.id)\n\n              if (shouldAutoRemoveFilter(filterFn, filter.value, column)) {\n                return false\n              }\n            }\n\n            return true\n          })\n        }\n\n        instance.options.onColumnFiltersChange?.(\n          updateFn,\n          updateFn(instance.getState().columnFilters)\n        )\n      },\n\n      setGlobalFilter: updater => {\n        instance.options.onGlobalFilterChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().globalFilter)\n        )\n      },\n\n      resetGlobalFilter: () => {\n        instance.setGlobalFilter(undefined)\n      },\n\n      getColumnCanColumnFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableAllFilters ??\n          column.enableColumnFilter ??\n          instance.options.enableFilters ??\n          instance.options.enableColumnFilters ??\n          column.defaultCanFilter ??\n          column.defaultCanColumnFilter ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnCanGlobalFilter: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          ((instance.options.enableFilters ??\n            instance.options.enableGlobalFilter ??\n            column.enableAllFilters ??\n            column.enableGlobalFilter ??\n            column.defaultCanFilter ??\n            column.defaultCanGlobalFilter ??\n            !!column.accessorFn) &&\n            instance.options.getColumnCanGlobalFilterFn?.(column)) ??\n          true\n        )\n      },\n\n      getColumnIsFiltered: columnId =>\n        instance.getColumnFilterIndex(columnId) > -1,\n\n      getColumnFilterValue: columnId =>\n        instance.getState().columnFilters?.find(d => d.id === columnId)?.value,\n\n      getColumnFilterIndex: columnId =>\n        instance.getState().columnFilters?.findIndex(d => d.id === columnId) ??\n        -1,\n\n      setColumnFilterValue: (columnId, value) => {\n        if (!columnId) return\n\n        instance.setColumnFilters(old => {\n          const column = instance.getColumn(columnId)\n\n          if (!column) {\n            if (process.env.NODE_ENV !== 'production') {\n              console.warn(\n                `React-Table: Could not find a column with id: ${columnId}`\n              )\n            }\n            throw new Error()\n          }\n\n          const filterFn = instance.getColumnFilterFn(column.id)\n          const previousfilter = old?.find(d => d.id === columnId)\n\n          const newFilter = functionalUpdate(\n            value,\n            previousfilter ? previousfilter.value : undefined\n          )\n\n          //\n          if (\n            shouldAutoRemoveFilter(\n              filterFn as FilterFn<TGenerics>,\n              newFilter,\n              column\n            )\n          ) {\n            return old?.filter(d => d.id !== columnId) ?? []\n          }\n\n          const newFilterObj = { id: columnId, value: newFilter }\n\n          if (previousfilter) {\n            return (\n              old?.map(d => {\n                if (d.id === columnId) {\n                  return newFilterObj\n                }\n                return d\n              }) ?? []\n            )\n          }\n\n          if (old?.length) {\n            return [...old, newFilterObj]\n          }\n\n          return [newFilterObj]\n        })\n      },\n\n      resetColumnFilters: () => {\n        instance.setColumnFilters(instance.initialState?.columnFilters ?? [])\n      },\n\n      getPreFilteredRowModel: () => instance.getCoreRowModel(),\n      getPreColumnFilteredRowModel: () => instance.getCoreRowModel(),\n      getColumnFilteredRowModel: memo(\n        () => [\n          instance.getState().columnFilters,\n          instance.getCoreRowModel(),\n          instance.options.columnFilterRowsFn,\n        ],\n        (columnFilters, rowModel, columnFiltersFn) => {\n          const columnFilteredRowModel = (() => {\n            if (!columnFilters?.length || !columnFiltersFn) {\n              return rowModel\n            }\n\n            return columnFiltersFn(instance as any, rowModel)\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => columnFilteredRowModel.rows\n          })\n\n          return columnFilteredRowModel\n        },\n        {\n          key: 'getColumnFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n      getPreGlobalFilteredRowModel: () => instance.getColumnFilteredRowModel(),\n      getGlobalFilteredRowModel: memo(\n        () => [\n          instance.getState().globalFilter,\n          instance.getColumnFilteredRowModel(),\n          instance.options.globalFilterRowsFn,\n        ],\n        (globalFilterValue, columnFilteredRowModel, globalFiltersFn) => {\n          const globalFilteredRowModel = (() => {\n            if (!globalFiltersFn || !globalFilterValue) {\n              return columnFilteredRowModel\n            }\n\n            return globalFiltersFn(\n              instance as TableInstance<TGenerics>,\n              columnFilteredRowModel\n            )\n          })()\n\n          // Now that each filtered column has it's partially filtered rows,\n          // lets assign the final filtered rows to all of the other columns\n          const nonFilteredColumns = instance\n            .getAllLeafColumns()\n            .filter(\n              column =>\n                !instance\n                  .getState()\n                  .columnFilters?.find(d => d.id === column.id)\n            )\n\n          // This essentially enables faceted filter options to be built easily\n          // using every column's preFilteredRows value\n\n          nonFilteredColumns.forEach(column => {\n            column.getPreFilteredRows = () => globalFilteredRowModel.rows\n          })\n\n          return globalFilteredRowModel\n        },\n        {\n          key: 'getGlobalFilteredRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifySortingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n\nexport function shouldAutoRemoveFilter<TGenerics extends PartialGenerics>(\n  filterFn?: FilterFn<TGenerics>,\n  value?: any,\n  column?: Column<TGenerics>\n) {\n  return (\n    (filterFn && filterFn.autoRemove\n      ? filterFn.autoRemove(value, column)\n      : false) ||\n    typeof value === 'undefined' ||\n    (typeof value === 'string' && !value)\n  )\n}\n","import { PartialGenerics, Row } from './types'\n\nexport const reSplitAlphaNumeric = /([0-9]+)/gm\n\nexport const sortTypes = {\n  alphanumeric,\n  alphanumericCaseSensitive,\n  text,\n  textCaseSensitive,\n  datetime,\n  basic,\n}\n\nexport type BuiltInSortType = keyof typeof sortTypes\n\nfunction alphanumeric<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\nfunction alphanumericCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareAlphanumeric(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nfunction compareAlphanumeric(aStr: string, bStr: string) {\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  const a = aStr.split(reSplitAlphaNumeric).filter(Boolean)\n  const b = bStr.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    const aa = a.shift()!\n    const bb = b.shift()!\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0]!)) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1]!)) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction text<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]).toLowerCase(),\n    toString(rowB.values[columnId]).toLowerCase()\n  )\n}\n\n// The text filter is more basic (less numeric support)\n// but is much faster\nfunction textCaseSensitive<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    toString(rowA.values[columnId]),\n    toString(rowB.values[columnId])\n  )\n}\n\nfunction datetime<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(\n    (rowA.values[columnId] as Date).getTime(),\n    (rowB.values[columnId] as Date).getTime()\n  )\n}\n\nfunction basic<TGenerics extends PartialGenerics>(\n  rowA: Row<TGenerics>,\n  rowB: Row<TGenerics>,\n  columnId: string\n) {\n  return compareBasic(rowA.values[columnId], rowB.values[columnId])\n}\n\n// Utils\n\nfunction compareBasic(a: any, b: any) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction toString(a: any) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport { BuiltInSortType, reSplitAlphaNumeric, sortTypes } from '../sortTypes'\n\nimport {\n  Column,\n  Getter,\n  Header,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\n\nimport {\n  functionalUpdate,\n  isFunction,\n  makeStateUpdater,\n  memo,\n  Overwrite,\n  propGetter,\n} from '../utils'\n\nexport type SortDirection = 'asc' | 'desc'\n\nexport type ColumnSort = {\n  id: string\n  desc: boolean\n}\n\nexport type SortingState = ColumnSort[]\n\nexport type SortingFn<TGenerics extends PartialGenerics> = {\n  (rowA: Row<TGenerics>, rowB: Row<TGenerics>, columnId: string): number\n}\n\nexport type CustomSortingTypes<TGenerics extends PartialGenerics> = Record<\n  string,\n  SortingFn<TGenerics>\n>\n\nexport type SortingTableState = {\n  sorting: SortingState\n}\n\nexport type SortType<TGenerics extends PartialGenerics> =\n  | 'auto'\n  | BuiltInSortType\n  | keyof TGenerics['SortingFns']\n  | SortingFn<TGenerics>\n\nexport type SortingColumnDef<TGenerics extends PartialGenerics> = {\n  sortType?: SortType<Overwrite<TGenerics, { Value: any }>>\n  sortDescFirst?: boolean\n  enableSorting?: boolean\n  enableMultiSort?: boolean\n  defaultCanSort?: boolean\n  invertSorting?: boolean\n  sortUndefined?: false | -1 | 1\n}\n\nexport type SortingColumn<TGenerics extends PartialGenerics> = {\n  sortType: SortType<Overwrite<TGenerics, { Value: any }>>\n  getCanSort: () => boolean\n  getCanMultiSort: () => boolean\n  getSortIndex: () => number\n  getIsSorted: () => false | SortDirection\n  toggleSorting: (desc?: boolean, isMulti?: boolean) => void\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n}\n\nexport type SortingOptions<TGenerics extends PartialGenerics> = {\n  sortTypes?: TGenerics['SortingFns']\n  onSortingChange?: OnChangeFn<SortingState>\n  autoResetSorting?: boolean\n  enableSorting?: boolean\n  enableSortingRemoval?: boolean\n  enableMultiRemove?: boolean\n  enableMultiSort?: boolean\n  sortDescFirst?: boolean\n  sortRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  maxMultiSortColCount?: number\n  isMultiSortEvent?: (e: MouseEvent | TouchEvent) => boolean\n}\n\nexport type ToggleSortingProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type SortingInstance<TGenerics extends PartialGenerics> = {\n  _notifySortingReset: () => void\n  getColumnAutoSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n  getColumnAutoSortDir: (columnId: string) => SortDirection\n\n  getColumnSortingFn: (columnId: string) => SortingFn<TGenerics> | undefined\n\n  setSorting: (updater: Updater<SortingState>) => void\n  toggleColumnSorting: (\n    columnId: string,\n    desc?: boolean,\n    multi?: boolean\n  ) => void\n  resetSorting: () => void\n  getColumnCanSort: (columnId: string) => boolean\n  getColumnCanMultiSort: (columnId: string) => boolean\n  getColumnIsSorted: (columnId: string) => false | 'asc' | 'desc'\n  getColumnSortIndex: (columnId: string) => number\n  getToggleSortingProps: <TGetter extends Getter<ToggleSortingProps>>(\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleSortingProps, TGetter>\n  getPreSortedRowModel: () => RowModel<TGenerics>\n  getSortedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Sorting = {\n  getDefaultColumn: <\n    TGenerics extends PartialGenerics\n  >(): SortingColumnDef<TGenerics> => {\n    return {\n      sortType: 'auto',\n    }\n  },\n\n  getInitialState: (): SortingTableState => {\n    return {\n      sorting: [],\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingOptions<TGenerics> => {\n    return {\n      onSortingChange: makeStateUpdater('sorting', instance),\n      autoResetSorting: true,\n      isMultiSortEvent: (e: MouseEvent | TouchEvent) => {\n        return e.shiftKey\n      },\n    }\n  },\n\n  createColumn: <TGenerics extends PartialGenerics>(\n    column: Column<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): SortingColumn<TGenerics> => {\n    return {\n      sortType: column.sortType,\n      getCanSort: () => instance.getColumnCanSort(column.id),\n      getCanMultiSort: () => instance.getColumnCanMultiSort(column.id),\n      getSortIndex: () => instance.getColumnSortIndex(column.id),\n      getIsSorted: () => instance.getColumnIsSorted(column.id),\n      toggleSorting: (desc, isMulti) =>\n        instance.toggleColumnSorting(column.id, desc, isMulti),\n      getToggleSortingProps: userProps =>\n        instance.getToggleSortingProps(column.id, userProps),\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): SortingInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifySortingReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetSorting\n        ) {\n          instance.resetSorting()\n        }\n      },\n      getColumnAutoSortingFn: columnId => {\n        const firstRows = instance\n          .getGlobalFilteredRowModel()\n          .flatRows.slice(100)\n\n        let isString = false\n\n        for (const row of firstRows) {\n          const value = row?.values[columnId]\n\n          if (Object.prototype.toString.call(value) === '[object Date]') {\n            return sortTypes.datetime\n          }\n\n          if (typeof value === 'string') {\n            isString = true\n\n            if (value.split(reSplitAlphaNumeric).length > 1) {\n              return sortTypes.alphanumeric\n            }\n          }\n        }\n\n        if (isString) {\n          return sortTypes.text\n        }\n\n        return sortTypes.basic\n      },\n      getColumnAutoSortDir: columnId => {\n        const firstRow = instance.getGlobalFilteredRowModel().flatRows[0]\n\n        const value = firstRow?.values[columnId]\n\n        if (typeof value === 'string') {\n          return 'asc'\n        }\n\n        return 'desc'\n      },\n      getColumnSortingFn: columnId => {\n        const column = instance.getColumn(columnId)\n        const userSortTypes = instance.options.sortTypes\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return isFunction(column.sortType)\n          ? column.sortType\n          : column.sortType === 'auto'\n          ? instance.getColumnAutoSortingFn(columnId)\n          : (userSortTypes as Record<string, any>)?.[\n              column.sortType as string\n            ] ??\n            (sortTypes[\n              column.sortType as BuiltInSortType\n            ] as SortingFn<TGenerics>)\n      },\n\n      setSorting: updater =>\n        instance.options.onSortingChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().sorting)\n        ),\n\n      toggleColumnSorting: (columnId, desc, multi) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        // if (column.columns.length) {\n        //   column.columns.forEach((c, i) => {\n        //     if (c.id) {\n        //       instance.toggleColumnSorting(c.id, undefined, multi || !!i)\n        //     }\n        //   })\n        //   return\n        // }\n\n        instance.setSorting(old => {\n          // Find any existing sorting for this column\n          const existingSorting = old?.find(d => d.id === columnId)\n          const existingIndex = old?.findIndex(d => d.id === columnId)\n          const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n          let newSorting: SortingState = []\n\n          // What should we do with this sort action?\n          let sortAction\n\n          if (column.getCanMultiSort() && multi) {\n            if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'add'\n            }\n          } else {\n            // Normal mode\n            if (old?.length && existingIndex !== old.length - 1) {\n              sortAction = 'replace'\n            } else if (existingSorting) {\n              sortAction = 'toggle'\n            } else {\n              sortAction = 'replace'\n            }\n          }\n\n          const sortDescFirst =\n            column.sortDescFirst ??\n            instance.options.sortDescFirst ??\n            instance.getColumnAutoSortDir(columnId) === 'desc'\n\n          // Handle toggle states that will remove the sorting\n          if (\n            sortAction === 'toggle' && // Must be toggling\n            (instance.options.enableSortingRemoval ?? true) && // If enableSortRemove, enable in general\n            !hasDescDefined && // Must not be setting desc\n            (multi ? instance.options.enableMultiRemove ?? true : true) && // If multi, don't allow if enableMultiRemove\n            (existingSorting?.desc // Finally, detect if it should indeed be removed\n              ? !sortDescFirst\n              : sortDescFirst)\n          ) {\n            sortAction = 'remove'\n          }\n\n          if (sortAction === 'replace') {\n            newSorting = [\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n          } else if (sortAction === 'add' && old?.length) {\n            newSorting = [\n              ...old,\n              {\n                id: columnId,\n                desc: hasDescDefined ? desc! : !!sortDescFirst,\n              },\n            ]\n            // Take latest n columns\n            newSorting.splice(\n              0,\n              newSorting.length -\n                (instance.options.maxMultiSortColCount ??\n                  Number.MAX_SAFE_INTEGER)\n            )\n          } else if (sortAction === 'toggle' && old?.length) {\n            // This flips (or sets) the\n            newSorting = old.map(d => {\n              if (d.id === columnId) {\n                return {\n                  ...d,\n                  desc: hasDescDefined ? desc! : !existingSorting?.desc,\n                }\n              }\n              return d\n            })\n          } else if (sortAction === 'remove' && old?.length) {\n            newSorting = old.filter(d => d.id !== columnId)\n          }\n\n          return newSorting\n        })\n      },\n\n      getColumnCanSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableSorting ??\n          instance.options.enableSorting ??\n          column.defaultCanSort ??\n          !!column.accessorFn\n          // (!!column.accessorFn ||\n          //   column.columns?.some(c => c.id && instance.getColumnCanSort(c.id))) ??\n          // false\n        )\n      },\n\n      getColumnCanMultiSort: columnId => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        return (\n          column.enableMultiSort ??\n          instance.options.enableMultiSort ??\n          !!column.accessorFn\n        )\n      },\n\n      getColumnIsSorted: columnId => {\n        const columnSort = instance\n          .getState()\n          .sorting?.find(d => d.id === columnId)\n\n        return !columnSort ? false : columnSort.desc ? 'desc' : 'asc'\n      },\n\n      getColumnSortIndex: columnId =>\n        instance.getState().sorting?.findIndex(d => d.id === columnId) ?? -1,\n\n      resetSorting: () => {\n        instance.setSorting(instance.initialState?.sorting ?? [])\n      },\n\n      getToggleSortingProps: (columnId, userProps) => {\n        const column = instance.getColumn(columnId)\n\n        if (!column) {\n          throw new Error()\n        }\n\n        const canSort = column.getCanSort()\n\n        const initialProps: ToggleSortingProps = {\n          title: canSort ? 'Toggle Sorting' : undefined,\n          onClick: canSort\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                column.toggleSorting?.(\n                  undefined,\n                  column.getCanMultiSort()\n                    ? instance.options.isMultiSortEvent?.(e)\n                    : false\n                )\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getPreSortedRowModel: () => instance.getGlobalFilteredRowModel(),\n      getSortedRowModel: memo(\n        () => [\n          instance.getState().sorting,\n          instance.getGlobalFilteredRowModel(),\n          instance.options.sortRowsFn,\n        ],\n        (sorting, rowModel, sortingFn) => {\n          if (!sortingFn || !sorting?.length) {\n            return rowModel\n          }\n\n          return sortingFn(instance, rowModel)\n        },\n        {\n          key: 'getSortedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyGroupingReset()\n          },\n        }\n      ),\n    }\n  },\n}\n","import { MouseEvent, TouchEvent } from 'react'\nimport { RowModel } from '..'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type ExpandedStateList = Record<string, boolean>\nexport type ExpandedState = true | Record<string, boolean>\nexport type ExpandedTableState = {\n  expanded: ExpandedState\n}\n\nexport type ExpandedRow = {\n  toggleExpanded: (expanded?: boolean) => void\n  getIsExpanded: () => boolean\n  getCanExpand: () => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n}\n\nexport type ExpandedOptions<TGenerics extends PartialGenerics> = {\n  onExpandedChange?: OnChangeFn<ExpandedState>\n  autoResetExpanded?: boolean\n  enableExpanded?: boolean\n  expandRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n  expandSubRows?: boolean\n  defaultCanExpand?: boolean\n  getIsRowExpanded?: (row: Row<TGenerics>) => boolean\n  getRowCanExpand?: (row: Row<TGenerics>) => boolean\n  paginateExpandedRows?: boolean\n}\n\nexport type ToggleExpandedProps = {\n  title?: string\n  onClick?: (event: MouseEvent | TouchEvent) => void\n}\n\nexport type ExpandedInstance<TGenerics extends PartialGenerics> = {\n  _notifyExpandedReset: () => void\n  setExpanded: (updater: Updater<ExpandedState>) => void\n  toggleRowExpanded: (rowId: string, expanded?: boolean) => void\n  toggleAllRowsExpanded: (expanded?: boolean) => void\n  resetExpanded: () => void\n  getRowCanExpand: (rowId: string) => boolean\n  getIsRowExpanded: (rowId: string) => boolean\n  getToggleExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getToggleAllRowsExpandedProps: <TGetter extends Getter<ToggleExpandedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleExpandedProps, TGetter>\n  getIsAllRowsExpanded: () => boolean\n  getExpandedDepth: () => number\n  getExpandedRowModel: () => RowModel<TGenerics>\n  getPreExpandedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const Expanding = {\n  getInitialState: (): ExpandedTableState => {\n    return {\n      expanded: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedOptions<TGenerics> => {\n    return {\n      onExpandedChange: makeStateUpdater('expanded', instance),\n      autoResetExpanded: true,\n      getIsRowExpanded: row => !!(row?.original as { expanded?: any }).expanded,\n      expandSubRows: true,\n      paginateExpandedRows: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): ExpandedInstance<TGenerics> => {\n    let registered = false\n\n    return {\n      _notifyExpandedReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetExpanded\n        ) {\n          instance.resetExpanded()\n        }\n      },\n      setExpanded: updater =>\n        instance.options.onExpandedChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().expanded)\n        ),\n      toggleRowExpanded: (rowId, expanded) => {\n        if (!rowId) return\n\n        instance.setExpanded(old => {\n          const exists = old === true ? true : !!old?.[rowId]\n\n          let oldExpanded: ExpandedStateList = {}\n\n          if (old === true) {\n            Object.keys(instance.getRowModel().rowsById).forEach(rowId => {\n              oldExpanded[rowId] = true\n            })\n          } else {\n            oldExpanded = old\n          }\n\n          expanded = expanded ?? !exists\n\n          if (!exists && expanded) {\n            return {\n              ...oldExpanded,\n              [rowId]: true,\n            }\n          }\n\n          if (exists && !expanded) {\n            const { [rowId]: _, ...rest } = oldExpanded\n            return rest\n          }\n\n          return old\n        })\n      },\n      toggleAllRowsExpanded: expanded => {\n        if (expanded ?? !instance.getIsAllRowsExpanded()) {\n          instance.setExpanded(true)\n        } else {\n          instance.setExpanded({})\n        }\n      },\n      resetExpanded: () => {\n        instance.setExpanded(instance.initialState?.expanded ?? {})\n      },\n      getIsRowExpanded: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getIsRowExpanded: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        const expanded = instance.getState().expanded\n\n        return !!(\n          instance.options.getIsRowExpanded?.(row) ??\n          (expanded || expanded?.[rowId])\n        )\n      },\n      getRowCanExpand: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          if (process.env.NODE_ENV !== 'production') {\n            console.warn(\n              `[ReactTable] getRowCanExpand: no row found with id ${rowId}`\n            )\n          }\n          throw new Error()\n        }\n\n        return (\n          instance.options.getRowCanExpand?.(row) ??\n          instance.options.enableExpanded ??\n          instance.options.defaultCanExpand ??\n          !!row.subRows?.length\n        )\n      },\n      getToggleExpandedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          return\n        }\n\n        const canExpand = instance.getRowCanExpand(rowId)\n\n        const initialProps: ToggleExpandedProps = {\n          title: canExpand ? 'Toggle Expanded' : undefined,\n          onClick: canExpand\n            ? (e: MouseEvent | TouchEvent) => {\n                e.persist()\n                instance.toggleRowExpanded(rowId)\n              }\n            : undefined,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getToggleAllRowsExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle All Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.persist()\n            instance.toggleAllRowsExpanded()\n          },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n      getIsAllRowsExpanded: () => {\n        const expanded = instance.getState().expanded\n\n        // If expanded is true, save some cycles and return true\n        if (expanded === true) {\n          return true\n        }\n\n        // If any row is not expanded, return false\n        if (\n          Object.keys(instance.getRowModel().rowsById).some(\n            id => !instance.getIsRowExpanded(id)\n          )\n        ) {\n          return false\n        }\n\n        // They must all be expanded :shrug:\n        return true\n      },\n      getExpandedDepth: () => {\n        let maxDepth = 0\n\n        const rowIds =\n          instance.getState().expanded === true\n            ? Object.keys(instance.getRowModel().rowsById)\n            : Object.keys(instance.getState().expanded)\n\n        rowIds.forEach(id => {\n          const splitId = id.split('.')\n          maxDepth = Math.max(maxDepth, splitId.length)\n        })\n\n        return maxDepth\n      },\n      getExpandedRowModel: memo(\n        () => [\n          instance.getState().expanded,\n          instance.getGroupedRowModel(),\n          instance.options.expandRowsFn,\n          instance.options.paginateExpandedRows,\n        ],\n        (expanded, rowModel, expandRowsFn, paginateExpandedRows) => {\n          if (\n            !expandRowsFn ||\n            // Do not expand if rows are not included in pagination\n            !paginateExpandedRows ||\n            !Object.keys(expanded ?? {}).length\n          ) {\n            return rowModel\n          }\n\n          return expandRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getExpandedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => {\n            instance._notifyPageIndexReset()\n          },\n        }\n      ),\n\n      getPreExpandedRowModel: () => instance.getGroupedRowModel(),\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): ExpandedRow => {\n    return {\n      toggleExpanded: expanded =>\n        void instance.toggleRowExpanded(row.id, expanded),\n      getIsExpanded: () => instance.getIsRowExpanded(row.id),\n      getCanExpand: () => row.subRows && !!row.subRows.length,\n      getToggleExpandedProps: userProps => {\n        const initialProps: ToggleExpandedProps = {\n          title: 'Toggle Row Expanded',\n          onClick: (e: MouseEvent | TouchEvent) => {\n            e.stopPropagation()\n            instance.toggleRowExpanded(row.id)\n          },\n        }\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n}\n","import {\n  OnChangeFn,\n  PartialGenerics,\n  TableInstance,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo } from '../utils'\n\nexport type PaginationState = {\n  pageIndex: number\n  pageSize: number\n  pageCount: number\n}\n\nexport type PaginationTableState = {\n  pagination: PaginationState\n}\n\nexport type PaginationOptions<TGenerics extends PartialGenerics> = {\n  onPaginationChange?: OnChangeFn<PaginationState>\n  autoResetPageIndex?: boolean\n  paginateRowsFn?: (\n    instance: TableInstance<TGenerics>,\n    rowModel: RowModel<TGenerics>\n  ) => RowModel<TGenerics>\n}\n\nexport type PaginationDefaultOptions = {\n  onPaginationChange: OnChangeFn<PaginationState>\n  autoResetPageIndex: boolean\n}\n\nexport type PaginationInstance<TGenerics extends PartialGenerics> = {\n  _notifyPageIndexReset: () => void\n  setPagination: (updater: Updater<PaginationState>) => void\n  resetPagination: () => void\n  setPageIndex: (updater: Updater<number>) => void\n  resetPageIndex: () => void\n  setPageSize: (updater: Updater<number>) => void\n  resetPageSize: () => void\n  setPageCount: (updater: Updater<number>) => void\n  getPageOptions: () => number[]\n  getCanPreviousPage: () => boolean\n  getCanNextPage: () => boolean\n  previousPage: () => void\n  nextPage: () => void\n  getPrePaginationRowModel: () => RowModel<TGenerics>\n  getPaginationRowModel: () => RowModel<TGenerics>\n  getPageCount: () => number\n}\n\n//\n\nexport const Pagination = {\n  getInitialState: (): PaginationTableState => {\n    return {\n      pagination: {\n        pageCount: -1,\n        pageIndex: 0,\n        pageSize: 10,\n      },\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationDefaultOptions => {\n    return {\n      onPaginationChange: makeStateUpdater('pagination', instance),\n      autoResetPageIndex: true,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): PaginationInstance<TGenerics> => {\n    let registered = false\n    return {\n      _notifyPageIndexReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetPageIndex\n        ) {\n          instance.resetPageIndex()\n        }\n      },\n      setPagination: updater => {\n        const safeUpdater: Updater<PaginationState> = old => {\n          let newState = functionalUpdate(updater, old)\n\n          return newState\n        }\n\n        return instance.options.onPaginationChange?.(\n          safeUpdater,\n          functionalUpdate(safeUpdater, instance.getState().pagination)\n        )\n      },\n      resetPagination: () => {\n        instance.setPagination(\n          instance.initialState.pagination ?? {\n            pageIndex: 0,\n            pageSize: 10,\n            pageCount: -1,\n          }\n        )\n      },\n      setPageIndex: updater => {\n        instance.setPagination(old => {\n          let pageIndex = functionalUpdate(updater, old.pageIndex)\n\n          const maxPageIndex =\n            old.pageCount && old.pageCount > 0\n              ? old.pageCount - 1\n              : Number.MAX_SAFE_INTEGER\n\n          pageIndex = Math.min(Math.max(0, pageIndex), maxPageIndex)\n\n          return {\n            ...old,\n            pageIndex,\n          }\n        })\n      },\n      resetPageIndex: () => {\n        instance.setPageIndex(0)\n      },\n      resetPageSize: () => {\n        instance.setPageSize(instance.initialState?.pagination?.pageSize ?? 10)\n      },\n      setPageSize: updater => {\n        instance.setPagination(old => {\n          const pageSize = Math.max(1, functionalUpdate(updater, old.pageSize))\n          const topRowIndex = old.pageSize * old.pageIndex!\n          const pageIndex = Math.floor(topRowIndex / pageSize)\n\n          return {\n            ...old,\n            pageIndex,\n            pageSize,\n          }\n        })\n      },\n      setPageCount: updater =>\n        instance.setPagination(old => {\n          let newPageCount = functionalUpdate(updater, old.pageCount)\n\n          if (typeof newPageCount === 'number') {\n            newPageCount = Math.max(-1, newPageCount)\n          }\n\n          return {\n            ...old,\n            pageCount: newPageCount,\n          }\n        }),\n\n      getPageOptions: memo(\n        () => [\n          instance.getState().pagination.pageSize,\n          instance.getState().pagination.pageCount,\n        ],\n        (pageSize, pageCount) => {\n          let pageOptions: number[] = []\n          if (pageCount && pageCount > 0) {\n            pageOptions = [...new Array(pageCount)].fill(null).map((_, i) => i)\n          }\n          return pageOptions\n        },\n        {\n          key: 'getPageOptions',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getCanPreviousPage: () => instance.getState().pagination.pageIndex > 0,\n\n      getCanNextPage: () => {\n        const { pageIndex, pageCount, pageSize } =\n          instance.getState().pagination\n\n        if (pageCount === -1) {\n          return true\n        }\n\n        if (pageCount === 0) {\n          return false\n        }\n\n        return (\n          pageIndex <\n          Math.ceil(\n            instance.getPrePaginationRowModel().rows.length / pageSize\n          ) -\n            1\n        )\n      },\n\n      previousPage: () => {\n        return instance.setPageIndex(old => old - 1)\n      },\n\n      nextPage: () => {\n        return instance.setPageIndex(old => {\n          return old + 1\n        })\n      },\n\n      getPrePaginationRowModel: () => instance.getExpandedRowModel(),\n      getPaginationRowModel: memo(\n        () => [\n          instance.getState().pagination,\n          instance.getExpandedRowModel(),\n          instance.options.paginateRowsFn,\n        ],\n        (_pagination, rowModel, paginateRowsFn) => {\n          if (!paginateRowsFn || !rowModel.rows.length) {\n            return rowModel\n          }\n\n          return paginateRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getPaginationRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        }\n      ),\n\n      getPageCount: () => {\n        const { pageCount } = instance.getState().pagination\n        if (pageCount > 0) {\n          return pageCount\n        }\n\n        return Math.ceil(\n          instance.getPrePaginationRowModel().rows.length /\n            instance.getState().pagination.pageSize\n        )\n      },\n    }\n  },\n}\n","import React, { MouseEvent, TouchEvent } from 'react'\nimport {\n  Getter,\n  OnChangeFn,\n  PartialGenerics,\n  PropGetterValue,\n  TableInstance,\n  Row,\n  RowModel,\n  Updater,\n} from '../types'\nimport { functionalUpdate, makeStateUpdater, memo, propGetter } from '../utils'\n\nexport type RowSelectionState = Record<string, boolean>\n\nexport type RowSelectionTableState = {\n  rowSelection: RowSelectionState\n}\n\nexport type RowSelectionOptions<TGenerics extends PartialGenerics> = {\n  onRowSelectionChange?: OnChangeFn<RowSelectionState>\n  autoResetRowSelection?: boolean\n  enableRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableMultiRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  enableSubRowSelection?: boolean | ((row: Row<TGenerics>) => boolean)\n  // enableGroupingRowSelection?:\n  //   | boolean\n  //   | ((\n  //       row: Row<TGenerics>\n  //     ) => boolean)\n  // isAdditiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // isInclusiveSelectEvent?: (e: MouseEvent | TouchEvent) => boolean\n  // selectRowsFn?: (\n  //   instance: TableInstance<\n  //     TData,\n  //     TValue,\n  //     TFilterFns,\n  //     TSortingFns,\n  //     TAggregationFns\n  //   >,\n  //   rowModel: RowModel<TGenerics>\n  // ) => RowModel<TGenerics>\n}\n\ntype ToggleRowSelectedProps = {\n  onChange?: (e: MouseEvent | TouchEvent) => void\n  checked?: boolean\n  title?: string\n  indeterminate?: boolean\n}\n\nexport type RowSelectionRow = {\n  getIsSelected: () => boolean\n  getIsSomeSelected: () => boolean\n  getCanSelect: () => boolean\n  getCanMultiSelect: () => boolean\n  toggleSelected: (value?: boolean) => void\n  getToggleSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n}\n\nexport type RowSelectionInstance<TGenerics extends PartialGenerics> = {\n  _notifyRowSelectionReset: () => void\n  getToggleRowSelectedProps: <TGetter extends Getter<ToggleRowSelectedProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  getToggleAllPageRowsSelectedProps: <\n    TGetter extends Getter<ToggleRowSelectedProps>\n  >(\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<ToggleRowSelectedProps, TGetter>\n  setRowSelection: (updater: Updater<RowSelectionState>) => void\n  resetRowSelection: () => void\n  toggleRowSelected: (rowId: string, value?: boolean) => void\n  getRowCanSelect: (rowId: string) => boolean\n  getRowCanSelectSubRows: (rowId: string) => boolean\n  getRowCanMultiSelect: (rowId: string) => boolean\n  // getGroupingRowCanSelect: (rowId: string) => boolean\n  getRowIsSelected: (rowId: string) => boolean\n  getRowIsSomeSelected: (rowId: string) => boolean\n  getIsAllRowsSelected: () => boolean\n  getIsAllPageRowsSelected: () => boolean\n  getIsSomeRowsSelected: () => boolean\n  getIsSomePageRowsSelected: () => boolean\n  toggleAllRowsSelected: (value: boolean) => void\n  toggleAllPageRowsSelected: (value: boolean) => void\n  getPreSelectedRowModel: () => RowModel<TGenerics>\n  getSelectedRowModel: () => RowModel<TGenerics>\n  getFilteredSelectedRowModel: () => RowModel<TGenerics>\n  getGroupedSelectedRowModel: () => RowModel<TGenerics>\n}\n\n//\n\nexport const RowSelection = {\n  getInitialState: (): RowSelectionTableState => {\n    return {\n      rowSelection: {},\n    }\n  },\n\n  getDefaultOptions: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionOptions<TGenerics> => {\n    return {\n      onRowSelectionChange: makeStateUpdater('rowSelection', instance),\n      autoResetRowSelection: true,\n      enableRowSelection: true,\n      enableMultiRowSelection: true,\n      enableSubRowSelection: true,\n      // enableGroupingRowSelection: false,\n      // isAdditiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.metaKey,\n      // isInclusiveSelectEvent: (e: MouseEvent | TouchEvent) => !!e.shiftKey,\n    }\n  },\n\n  getInstance: <TGenerics extends PartialGenerics>(\n    instance: TableInstance<TGenerics>\n  ): RowSelectionInstance<TGenerics> => {\n    let registered = false\n\n    // const pageRows = instance.getPageRows()\n\n    return {\n      _notifyRowSelectionReset: () => {\n        if (!registered) {\n          registered = true\n          return\n        }\n\n        if (instance.options.autoResetAll === false) {\n          return\n        }\n\n        if (\n          instance.options.autoResetAll === true ||\n          instance.options.autoResetRowSelection\n        ) {\n          instance.resetRowSelection()\n        }\n      },\n      setRowSelection: updater =>\n        instance.options.onRowSelectionChange?.(\n          updater,\n          functionalUpdate(updater, instance.getState().rowSelection)\n        ),\n      resetRowSelection: () =>\n        instance.setRowSelection(instance.initialState.rowSelection ?? {}),\n      toggleAllRowsSelected: value => {\n        instance.setRowSelection(old => {\n          value =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllRowsSelected()\n\n          // Only remove/add the rows that are visible on the screen\n          //  Leave all the other rows that are selected alone.\n          const rowSelection = Object.assign({}, old)\n\n          const preGroupedFlatRows = instance.getPreGroupedRowModel().flatRows\n\n          // We don't use `mutateRowIsSelected` here for performance reasons.\n          // All of the rows are flat already, so it wouldn't be worth it\n          if (value) {\n            preGroupedFlatRows.forEach(row => {\n              rowSelection[row.id] = true\n            })\n          } else {\n            preGroupedFlatRows.forEach(row => {\n              delete rowSelection[row.id]\n            })\n          }\n\n          return rowSelection\n        })\n      },\n      toggleAllPageRowsSelected: value =>\n        instance.setRowSelection(old => {\n          const selectAll =\n            typeof value !== 'undefined'\n              ? value\n              : !instance.getIsAllPageRowsSelected()\n\n          const rowSelection: RowSelectionState = { ...old }\n\n          instance.getRowModel().rows.forEach(row => {\n            mutateRowIsSelected(rowSelection, row.id, value, instance)\n          })\n\n          return rowSelection\n        }),\n      toggleRowSelected: (rowId, value) => {\n        const row = instance.getRow(rowId)\n        const isSelected = row.getIsSelected()\n\n        instance.setRowSelection(old => {\n          value = typeof value !== 'undefined' ? value : !isSelected\n\n          if (isSelected === value) {\n            return old\n          }\n\n          const selectedRowIds = { ...old }\n\n          mutateRowIsSelected(selectedRowIds, rowId, value, instance)\n\n          return selectedRowIds\n        })\n      },\n      // addRowSelectionRange: rowId => {\n      //   const {\n      //     rows,\n      //     rowsById,\n      //     options: { selectGroupingRows, selectSubRows },\n      //   } = instance\n\n      //   const findSelectedRow = (rows: Row[]) => {\n      //     let found\n      //     rows.find(d => {\n      //       if (d.getIsSelected()) {\n      //         found = d\n      //         return true\n      //       }\n      //       const subFound = findSelectedRow(d.subRows || [])\n      //       if (subFound) {\n      //         found = subFound\n      //         return true\n      //       }\n      //       return false\n      //     })\n      //     return found\n      //   }\n\n      //   const firstRow = findSelectedRow(rows) || rows[0]\n      //   const lastRow = rowsById[rowId]\n\n      //   let include = false\n      //   const selectedRowIds = {}\n\n      //   const addRow = (row: Row) => {\n      //     mutateRowIsSelected(selectedRowIds, row.id, true, {\n      //       rowsById,\n      //       selectGroupingRows: selectGroupingRows!,\n      //       selectSubRows: selectSubRows!,\n      //     })\n      //   }\n\n      //   instance.rows.forEach(row => {\n      //     const isFirstRow = row.id === firstRow.id\n      //     const isLastRow = row.id === lastRow.id\n\n      //     if (isFirstRow || isLastRow) {\n      //       if (!include) {\n      //         include = true\n      //       } else if (include) {\n      //         addRow(row)\n      //         include = false\n      //       }\n      //     }\n\n      //     if (include) {\n      //       addRow(row)\n      //     }\n      //   })\n\n      //   instance.setRowSelection(selectedRowIds)\n      // },\n      getPreSelectedRowModel: () => instance.getCoreRowModel(),\n      getSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getCoreRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getFilteredSelectedRowModel: memo(\n        () => [\n          instance.getState().rowSelection,\n          instance.getGlobalFilteredRowModel(),\n        ],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getFilteredSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      getGroupedSelectedRowModel: memo(\n        () => [instance.getState().rowSelection, instance.getGroupedRowModel()],\n        (rowSelection, rowModel) => {\n          if (!Object.keys(rowSelection).length) {\n            return {\n              rows: [],\n              flatRows: [],\n              rowsById: {},\n            }\n          }\n\n          return selectRowsFn(instance, rowModel)\n        },\n        {\n          key: 'getGroupedSelectedRowModel',\n          debug: () => instance.options.debugAll ?? instance.options.debugTable,\n          onChange: () => instance._notifyExpandedReset(),\n        }\n      ),\n\n      ///\n\n      getRowIsSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === true\n      },\n\n      getRowIsSomeSelected: rowId => {\n        const { rowSelection } = instance.getState()\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        return isRowSelected(row, rowSelection, instance) === 'some'\n      },\n\n      getRowCanSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableRowSelection === 'function') {\n          return instance.options.enableRowSelection(row)\n        }\n\n        return instance.options.enableRowSelection ?? true\n      },\n\n      getRowCanSelectSubRows: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableSubRowSelection === 'function') {\n          return instance.options.enableSubRowSelection(row)\n        }\n\n        return instance.options.enableSubRowSelection ?? true\n      },\n\n      getRowCanMultiSelect: rowId => {\n        const row = instance.getRow(rowId)\n\n        if (!row) {\n          throw new Error()\n        }\n\n        if (typeof instance.options.enableMultiRowSelection === 'function') {\n          return instance.options.enableMultiRowSelection(row)\n        }\n\n        return instance.options.enableMultiRowSelection ?? true\n      },\n\n      // getGroupingRowCanSelect: rowId => {\n      //   const row = instance.getRow(rowId)\n\n      //   if (!row) {\n      //     throw new Error()\n      //   }\n\n      //   if (typeof instance.options.enableGroupingRowSelection === 'function') {\n      //     return instance.options.enableGroupingRowSelection(row)\n      //   }\n\n      //   return instance.options.enableGroupingRowSelection ?? false\n      // },\n\n      getIsAllRowsSelected: () => {\n        const preFilteredFlatRows =\n          instance.getPreGlobalFilteredRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllRowsSelected = Boolean(\n          preFilteredFlatRows.length && Object.keys(rowSelection).length\n        )\n\n        if (isAllRowsSelected) {\n          if (preFilteredFlatRows.some(row => !rowSelection[row.id])) {\n            isAllRowsSelected = false\n          }\n        }\n\n        return isAllRowsSelected\n      },\n\n      getIsAllPageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        const { rowSelection } = instance.getState()\n\n        let isAllPageRowsSelected = !!paginationFlatRows.length\n\n        if (\n          isAllPageRowsSelected &&\n          paginationFlatRows.some(row => !rowSelection[row.id])\n        ) {\n          isAllPageRowsSelected = false\n        }\n\n        return isAllPageRowsSelected\n      },\n\n      getIsSomeRowsSelected: () => {\n        return (\n          !instance.getIsAllRowsSelected() &&\n          !!Object.keys(instance.getState().rowSelection ?? {}).length\n        )\n      },\n\n      getIsSomePageRowsSelected: () => {\n        const paginationFlatRows = instance.getPaginationRowModel().flatRows\n        return instance.getIsAllPageRowsSelected()\n          ? false\n          : !!paginationFlatRows?.length\n      },\n\n      getToggleRowSelectedProps: (rowId, userProps) => {\n        const row = instance.getRow(rowId)\n\n        const isSelected = row.getIsSelected()\n        const isSomeSelected = row.getIsSomeSelected()\n        const canSelect = row.getCanSelect()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: canSelect\n            ? (e: MouseEvent | TouchEvent) => {\n                row.toggleSelected((e.target as HTMLInputElement).checked)\n              }\n            : undefined,\n          checked: isSelected,\n          title: 'Toggle Row Selected',\n          indeterminate: isSomeSelected,\n          // onChange: forInput\n          //   ? (e: Event) => e.stopPropagation()\n          //   : (e: Event) => {\n          //       if (instance.options.isAdditiveSelectEvent(e)) {\n          //         row.toggleSelected()\n          //       } else if (instance.options.isInclusiveSelectEvent(e)) {\n          //         instance.addRowSelectionRange(row.id)\n          //       } else {\n          //         instance.setRowSelection({})\n          //         row.toggleSelected()\n          //       }\n\n          //       if (props.onClick) props.onClick(e)\n          //     },\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllRowsSelectedProps: userProps => {\n        const isSomeRowsSelected = instance.getIsSomeRowsSelected()\n        const isAllRowsSelected = instance.getIsAllRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllRowsSelected,\n          title: 'Toggle All Rows Selected',\n          indeterminate: isSomeRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n\n      getToggleAllPageRowsSelectedProps: userProps => {\n        const isSomePageRowsSelected = instance.getIsSomePageRowsSelected()\n        const isAllPageRowsSelected = instance.getIsAllPageRowsSelected()\n\n        const initialProps: ToggleRowSelectedProps = {\n          onChange: (e: MouseEvent | TouchEvent) => {\n            instance.toggleAllPageRowsSelected(\n              (e.target as HTMLInputElement).checked\n            )\n          },\n          checked: isAllPageRowsSelected,\n          title: 'Toggle All Current Page Rows Selected',\n          indeterminate: isSomePageRowsSelected,\n        }\n\n        return propGetter(initialProps, userProps)\n      },\n    }\n  },\n\n  createRow: <TGenerics extends PartialGenerics>(\n    row: Row<TGenerics>,\n    instance: TableInstance<TGenerics>\n  ): RowSelectionRow => {\n    return {\n      getIsSelected: () => instance.getRowIsSelected(row.id),\n      getIsSomeSelected: () => instance.getRowIsSomeSelected(row.id),\n      toggleSelected: value => instance.toggleRowSelected(row.id, value),\n      getToggleSelectedProps: userProps =>\n        instance.getToggleRowSelectedProps(row.id, userProps),\n      getCanMultiSelect: () => instance.getRowCanMultiSelect(row.id),\n      getCanSelect: () => instance.getRowCanSelect(row.id),\n    }\n  },\n}\n\nconst mutateRowIsSelected = <TGenerics extends PartialGenerics>(\n  selectedRowIds: Record<string, boolean>,\n  id: string,\n  value: boolean,\n  instance: TableInstance<TGenerics>\n) => {\n  const row = instance.getRow(id)\n\n  const isGrouped = row.getIsGrouped()\n\n  // if ( // TODO: enforce grouping row selection rules\n  //   !isGrouped ||\n  //   (isGrouped && instance.options.enableGroupingRowSelection)\n  // ) {\n  if (value) {\n    selectedRowIds[id] = true\n  } else {\n    delete selectedRowIds[id]\n  }\n  // }\n\n  if (row.subRows?.length && instance.getRowCanSelectSubRows(row.id)) {\n    row.subRows.forEach(row =>\n      mutateRowIsSelected(selectedRowIds, row.id, value, instance)\n    )\n  }\n}\n\nexport function selectRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const rowSelection = instance.getState().rowSelection\n\n  const newSelectedFlatRows: Row<TGenerics>[] = []\n  const newSelectedRowsById: Record<string, Row<TGenerics>> = {}\n\n  // Filters top level and nested rows\n  const recurseRows = (rows: Row<TGenerics>[], depth = 0) => {\n    return rows\n      .map(row => {\n        const isSelected = isRowSelected(row, rowSelection, instance) === true\n\n        if (isSelected) {\n          newSelectedFlatRows.push(row)\n          newSelectedRowsById[row.id] = row\n        }\n\n        if (row.subRows?.length) {\n          row = {\n            ...row,\n            subRows: recurseRows(row.subRows, depth + 1),\n          }\n        }\n\n        if (isSelected) {\n          return row\n        }\n      })\n      .filter(Boolean) as Row<TGenerics>[]\n  }\n\n  return {\n    rows: recurseRows(rowModel.rows),\n    flatRows: newSelectedFlatRows,\n    rowsById: newSelectedRowsById,\n  }\n}\n\nexport function isRowSelected<TGenerics extends PartialGenerics>(\n  row: Row<TGenerics>,\n  selection: Record<string, boolean>,\n  instance: TableInstance<TGenerics>\n): boolean | 'some' {\n  if (selection[row.id]) {\n    return true\n  }\n\n  if (row.subRows && row.subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    row.subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (isRowSelected(subRow, selection, instance)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n\n    return allChildrenSelected ? true : someSelected ? 'some' : false\n  }\n\n  return false\n}\n","import {\n  flattenBy,\n  functionalUpdate,\n  propGetter,\n  memo,\n  flexRender,\n  RequiredKeys,\n} from './utils'\n\nimport {\n  Updater,\n  PropGetterValue,\n  Options,\n  TableState,\n  ColumnDef,\n  Row,\n  Column,\n  Cell,\n  Header,\n  AccessorFn,\n  HeaderRenderProps,\n  TableProps,\n  TableBodyProps,\n  PropGetter,\n  Getter,\n  RowProps,\n  CellProps,\n  TableInstance,\n  RowValues,\n  Renderable,\n  Please_use_the_create_table_column_utilities_to_define_columns,\n  PartialGenerics,\n} from './types'\n\nimport { Visibility } from './features/Visibility'\nimport { Ordering } from './features/Ordering'\nimport { Pinning } from './features/Pinning'\nimport { Headers } from './features/Headers'\nimport { Filters } from './features/Filters'\nimport { Sorting } from './features/Sorting'\nimport { Grouping, GroupingCell } from './features/Grouping'\nimport { Expanding } from './features/Expanding'\nimport { ColumnSizing, defaultColumnSizing } from './features/ColumnSizing'\nimport { Pagination } from './features/Pagination'\nimport { RowSelection } from './features/RowSelection'\nimport { RowModel } from '.'\n\nconst features = [\n  Visibility,\n  Ordering,\n  Pinning,\n  Headers,\n  Filters,\n  Sorting,\n  Grouping,\n  Expanding,\n  ColumnSizing,\n  Pagination,\n  RowSelection,\n]\n\nexport type CoreOptions<TGenerics extends PartialGenerics> = {\n  data: TGenerics['Row'][]\n  columns: ColumnDef<TGenerics>[]\n  state: Partial<TableState>\n  onStateChange: (updater: Updater<TableState>) => void\n  debugAll?: boolean\n  debugTable?: boolean\n  debugHeaders?: boolean\n  debugColumns?: boolean\n  debugRows?: boolean\n  defaultColumn?: Partial<ColumnDef<TGenerics>>\n  initialState?: Partial<TableState>\n  getSubRows?: (\n    originalRow: TGenerics['Row'],\n    index: number\n  ) => TGenerics['Row'][]\n  getRowId?: (\n    originalRow: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  autoResetAll?: boolean\n}\n\nexport type TableCore<TGenerics extends PartialGenerics> = {\n  initialState: TableState\n  reset: () => void\n  options: RequiredKeys<Options<TGenerics>, 'state'>\n  setOptions: (newOptions: Updater<Options<TGenerics>>) => void\n  getRowId: (\n    _: TGenerics['Row'],\n    index: number,\n    parent?: Row<TGenerics>\n  ) => string\n  getState: () => TableState\n  setState: (updater: Updater<TableState>) => void\n  getDefaultColumn: () => Partial<ColumnDef<TGenerics>>\n  getColumnDefs: () => ColumnDef<TGenerics>[]\n  createColumn: (\n    columnDef: ColumnDef<TGenerics>,\n    depth: number,\n    parent?: Column<TGenerics>\n  ) => Column<TGenerics>\n  getAllColumns: () => Column<TGenerics>[]\n  getAllFlatColumns: () => Column<TGenerics>[]\n  getAllFlatColumnsById: () => Record<string, Column<TGenerics>>\n  getAllLeafColumns: () => Column<TGenerics>[]\n  getColumn: (columnId: string) => Column<TGenerics>\n  getColumnWidth: (columnId: string) => number\n  getTotalWidth: () => number\n  createCell: (\n    row: Row<TGenerics>,\n    column: Column<TGenerics>,\n    value: any\n  ) => Cell<TGenerics>\n  createRow: (\n    id: string,\n    original: TGenerics['Row'] | undefined,\n    rowIndex: number,\n    depth: number,\n    values: Record<string, any>\n  ) => Row<TGenerics>\n  getCoreRowModel: () => RowModel<TGenerics>\n  getRowModel: () => RowModel<TGenerics>\n  getRow: (id: string) => Row<TGenerics>\n  getCell: (rowId: string, columnId: string) => Cell<TGenerics>\n  getTableProps: PropGetter<TableProps>\n  getTableBodyProps: PropGetter<TableBodyProps>\n  getRowProps: <TGetter extends Getter<RowProps>>(\n    rowId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<RowProps, TGetter>\n  getCellProps: <TGetter extends Getter<CellProps>>(\n    rowId: string,\n    columnId: string,\n    userProps?: TGetter\n  ) => undefined | PropGetterValue<CellProps, TGetter>\n  getTableWidth: () => number\n  getLeftTableWidth: () => number\n  getCenterTableWidth: () => number\n  getRightTableWidth: () => number\n}\n\nexport type CoreRow<TGenerics extends PartialGenerics> = {\n  id: string\n  index: number\n  original?: TGenerics['Row']\n  depth: number\n  values: RowValues\n  leafRows: Row<TGenerics>[]\n  subRows: Row<TGenerics>[]\n  getRowProps: PropGetter<RowProps>\n  originalSubRows?: TGenerics['Row'][]\n  getAllCells: () => Cell<TGenerics>[]\n  getAllCellsByColumnId: () => Record<string, Cell<TGenerics>>\n}\n\nexport type CoreColumnDef<TGenerics extends PartialGenerics> = {\n  id: string\n  accessorKey?: string & keyof TGenerics['Row']\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  header?:\n    | string\n    | Renderable<{\n        instance: TableInstance<TGenerics>\n        header: Header<TGenerics>\n        column: Column<TGenerics>\n      }>\n  width?: number\n  minWidth?: number\n  maxWidth?: number\n  columns?: ColumnDef<TGenerics>[]\n  footer?: Renderable<{\n    instance: TableInstance<TGenerics>\n    header: Header<TGenerics>\n    column: Column<TGenerics>\n  }>\n  cell?: Renderable<{\n    instance: TableInstance<TGenerics>\n    row: Row<TGenerics>\n    column: Column<TGenerics>\n    cell: Cell<TGenerics>\n    value: TGenerics['Value']\n  }>\n  defaultIsVisible?: boolean\n  [Please_use_the_create_table_column_utilities_to_define_columns]: true\n}\n\nexport type CoreColumn<TGenerics extends PartialGenerics> = {\n  id: string\n  depth: number\n  accessorFn?: AccessorFn<TGenerics['Row']>\n  columnDef: ColumnDef<TGenerics>\n  getWidth: () => number\n  columns: Column<TGenerics>[]\n  parent?: Column<TGenerics>\n  getFlatColumns: () => Column<TGenerics>[]\n  getLeafColumns: () => Column<TGenerics>[]\n}\n\nexport function createTableInstance<TGenerics extends PartialGenerics>(\n  options: Options<TGenerics>\n): TableInstance<TGenerics> {\n  if (options.debugAll || options.debugTable) {\n    console.info('Creating React Table Instance...')\n  }\n\n  let instance = {} as TableInstance<TGenerics>\n\n  let listeners: (() => void)[] = []\n\n  const defaultOptions = features.reduce((obj, feature) => {\n    return Object.assign(obj, (feature as any).getDefaultOptions?.(instance))\n  }, {})\n\n  const buildOptions = (options: Options<TGenerics>) => ({\n    ...defaultOptions,\n    ...options,\n  })\n\n  instance.options = buildOptions(options)\n\n  const initialState = {\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInitialState?.())\n    }, {}),\n    ...(options.initialState ?? {}),\n  } as TableState\n\n  const finalInstance: TableInstance<TGenerics> = {\n    ...instance,\n    ...features.reduce((obj, feature) => {\n      return Object.assign(obj, (feature as any).getInstance?.(instance))\n    }, {}),\n    initialState,\n    reset: () => {\n      instance.setState(instance.initialState)\n    },\n    setOptions: updater => {\n      instance.options = buildOptions(\n        functionalUpdate(updater, instance.options)\n      )\n    },\n\n    getRowId: (_: TGenerics['Row'], index: number, parent?: Row<TGenerics>) =>\n      `${parent ? [parent.id, index].join('.') : index}`,\n\n    getState: () => {\n      return instance.options.state as TableState\n    },\n\n    setState: (updater: Updater<TableState>) => {\n      instance.options.onStateChange?.(updater)\n    },\n\n    getDefaultColumn: memo(\n      () => [instance.options.defaultColumn],\n      defaultColumn => {\n        defaultColumn = (defaultColumn ?? {}) as Partial<ColumnDef<TGenerics>>\n\n        return {\n          header: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          footer: (props: HeaderRenderProps<Header<TGenerics>>) =>\n            props.header.column.id,\n          cell: ({ value = '' }: { value: any }): JSX.Element =>\n            typeof value === 'boolean' ? value.toString() : value,\n          ...features.reduce((obj, feature) => {\n            return Object.assign(obj, (feature as any).getDefaultColumn?.())\n          }, {}),\n          ...defaultColumn,\n        } as Partial<ColumnDef<TGenerics>>\n      },\n      {\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n        key: 'getDefaultColumn',\n      }\n    ),\n\n    getColumnDefs: () => instance.options.columns,\n\n    createColumn: (columnDef, depth: number, parent) => {\n      const defaultColumn = instance.getDefaultColumn()\n\n      let id =\n        columnDef.id ??\n        columnDef.accessorKey ??\n        (typeof columnDef.header === 'string' ? columnDef.header : undefined)\n\n      let accessorFn: AccessorFn<TGenerics['Row']> | undefined\n\n      if (columnDef.accessorFn) {\n        accessorFn = columnDef.accessorFn\n      } else if (columnDef.accessorKey) {\n        accessorFn = (originalRow?: TGenerics['Row']) =>\n          (originalRow as any)[columnDef.accessorKey]\n      }\n\n      if (!id) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            columnDef.accessorFn\n              ? `Columns require an id when using an accessorFn`\n              : `Columns require an id when using a non-string header`\n          )\n        }\n        throw new Error()\n      }\n\n      let column: CoreColumn<TGenerics> = {\n        ...defaultColumnSizing,\n        ...defaultColumn,\n        ...columnDef,\n        id: `${id}`,\n        accessorFn,\n        parent: parent as any,\n        depth,\n        columnDef,\n        columns: [],\n        getWidth: () => instance.getColumnWidth(column.id),\n        getFlatColumns: memo(\n          () => [true],\n          () => {\n            return [\n              column as Column<TGenerics>,\n              ...column.columns?.flatMap(d => d.getFlatColumns()),\n            ]\n          },\n          {\n            key: 'column.getFlatColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n        getLeafColumns: memo(\n          () => [instance.getOrderColumnsFn()],\n          orderColumns => {\n            if (column.columns?.length) {\n              let leafColumns = column.columns.flatMap(column =>\n                column.getLeafColumns()\n              )\n\n              return orderColumns(leafColumns)\n            }\n\n            return [column as Column<TGenerics>]\n          },\n          {\n            key: 'column.getLeafColumns',\n            debug: () =>\n              instance.options.debugAll ?? instance.options.debugColumns,\n          }\n        ),\n      }\n\n      column = features.reduce((obj, feature) => {\n        return Object.assign(\n          obj,\n          (feature as any).createColumn?.(column, instance)\n        )\n      }, column)\n\n      // Yes, we have to convert instance to uknown, because we know more than the compiler here.\n      return column as Column<TGenerics>\n    },\n\n    getAllColumns: memo(\n      () => [instance.getColumnDefs()],\n      columnDefs => {\n        const recurseColumns = (\n          columnDefs: ColumnDef<TGenerics>[],\n          parent?: Column<TGenerics>,\n          depth = 0\n        ): Column<TGenerics>[] => {\n          return columnDefs.map(columnDef => {\n            const column = instance.createColumn(columnDef, depth, parent)\n\n            column.columns = columnDef.columns\n              ? recurseColumns(columnDef.columns, column, depth + 1)\n              : []\n\n            return column\n          })\n        }\n\n        return recurseColumns(columnDefs)\n      },\n      {\n        key: 'getAllColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumns: memo(\n      () => [instance.getAllColumns()],\n      allColumns => {\n        return allColumns.flatMap(column => {\n          return column.getFlatColumns()\n        })\n      },\n      {\n        key: 'getAllFlatColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllFlatColumnsById: memo(\n      () => [instance.getAllFlatColumns()],\n      flatColumns => {\n        return flatColumns.reduce((acc, column) => {\n          acc[column.id] = column\n          return acc\n        }, {} as Record<string, Column<TGenerics>>)\n      },\n      {\n        key: 'getAllFlatColumnsById',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getAllLeafColumns: memo(\n      () => [instance.getAllColumns(), instance.getOrderColumnsFn()],\n      (allColumns, orderColumns) => {\n        let leafColumns = allColumns.flatMap(column => column.getLeafColumns())\n        return orderColumns(leafColumns)\n      },\n      {\n        key: 'getAllLeafColumns',\n        debug: () => instance.options.debugAll ?? instance.options.debugColumns,\n      }\n    ),\n\n    getColumn: columnId => {\n      const column = instance.getAllFlatColumnsById()[columnId]\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `[React Table] Column with id ${columnId} does not exist.`\n          )\n        }\n        throw new Error()\n      }\n\n      return column\n    },\n\n    getColumnWidth: (columnId: string) => {\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        throw new Error()\n      }\n\n      const columnSize = instance.getState().columnSizing[column.id]\n\n      return Math.min(\n        Math.max(\n          column.minWidth ?? defaultColumnSizing.minWidth,\n          columnSize ?? column.width ?? defaultColumnSizing.width\n        ),\n        column.maxWidth ?? defaultColumnSizing.maxWidth\n      )\n    },\n\n    createCell: (row, column, value) => {\n      const cell: Cell<TGenerics> = {\n        id: `${row.id}_${column.id}`,\n        rowId: row.id,\n        columnId: column.id,\n        row,\n        column,\n        value,\n        getCellProps: userProps =>\n          instance.getCellProps(row.id, column.id, userProps)!,\n        renderCell: () =>\n          flexRender(column.cell, { instance, column, row, cell, value }),\n      }\n\n      features.forEach(feature => {\n        Object.assign(\n          cell,\n          (feature as any).createCell?.(\n            cell as Cell<TGenerics> & GroupingCell,\n            column,\n            row as Row<TGenerics>,\n            instance\n          )\n        )\n      }, {})\n\n      return cell\n    },\n\n    createRow: (id, original, rowIndex, depth, values) => {\n      let row: CoreRow<TGenerics> = {\n        id,\n        index: rowIndex,\n        original,\n        depth,\n        values,\n        subRows: [],\n        leafRows: [],\n        getRowProps: userProps => instance.getRowProps(row.id, userProps)!,\n        getAllCells: undefined!,\n        getAllCellsByColumnId: undefined!,\n      }\n\n      row.getAllCells = memo(\n        () => [instance.getAllLeafColumns()],\n        leafColumns => {\n          return leafColumns.map(column => {\n            return instance.createCell(\n              row as Row<TGenerics>,\n              column,\n              row.values[column.id]\n            )\n          })\n        },\n        {\n          key: process.env.NODE_ENV !== 'production' ? 'row.getAllCells' : '',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      row.getAllCellsByColumnId = memo(\n        () => [row.getAllCells()],\n        allCells => {\n          return allCells.reduce((acc, cell) => {\n            acc[cell.columnId] = cell\n            return acc\n          }, {} as Record<string, Cell<TGenerics>>)\n        },\n        {\n          key: 'row.getAllCellsByColumnId',\n          debug: () => instance.options.debugAll ?? instance.options.debugRows,\n        }\n      )\n\n      for (let i = 0; i < features.length; i++) {\n        const feature = features[i]\n        Object.assign(row, (feature as any).createRow?.(row, instance))\n      }\n\n      return row as Row<TGenerics>\n    },\n\n    getCoreRowModel: memo(\n      () => [instance.options.data],\n      (\n        data\n      ): {\n        rows: Row<TGenerics>[]\n        flatRows: Row<TGenerics>[]\n        rowsById: Record<string, Row<TGenerics>>\n      } => {\n        // Access the row model using initial columns\n        const rows: Row<TGenerics>[] = []\n        const flatRows: Row<TGenerics>[] = []\n        const rowsById: Record<string, Row<TGenerics>> = {}\n\n        const leafColumns = instance.getAllLeafColumns()\n\n        const accessRow = (\n          originalRow: TGenerics['Row'],\n          rowIndex: number,\n          depth = 0,\n          parentRows: Row<TGenerics>[],\n          parent?: Row<TGenerics>\n        ) => {\n          const id = instance.getRowId(originalRow, rowIndex, parent)\n\n          if (!id) {\n            if (process.env.NODE_ENV !== 'production') {\n              throw new Error(`getRowId expected an ID, but got ${id}`)\n            }\n          }\n\n          const values: Record<string, any> = {}\n\n          for (let i = 0; i < leafColumns.length; i++) {\n            const column = leafColumns[i]\n            if (column && column.accessorFn) {\n              values[column.id] = column.accessorFn(originalRow, rowIndex)\n            }\n          }\n\n          // Make the row\n          const row = instance.createRow(\n            id,\n            originalRow,\n            rowIndex,\n            depth,\n            values\n          )\n\n          // Push instance row into the parentRows array\n          parentRows.push(row)\n          // Keep track of every row in a flat array\n          flatRows.push(row)\n          // Also keep track of every row by its ID\n          rowsById[id] = row\n\n          // Get the original subrows\n          if (instance.options.getSubRows) {\n            const originalSubRows = instance.options.getSubRows(\n              originalRow,\n              rowIndex\n            )\n\n            // Then recursively access them\n            if (originalSubRows?.length) {\n              row.originalSubRows = originalSubRows\n              const subRows: Row<TGenerics>[] = []\n\n              for (let i = 0; i < row.originalSubRows.length; i++) {\n                accessRow(\n                  row.originalSubRows[i] as TGenerics['Row'],\n                  i,\n                  depth + 1,\n                  subRows,\n                  row\n                )\n              }\n              // Keep the new subRows array on the row\n              row.subRows = subRows\n              row.leafRows = flattenBy(subRows, d => d.leafRows)\n            }\n          }\n        }\n\n        for (let i = 0; i < data.length; i++) {\n          accessRow(data[i] as TGenerics['Row'], i, 0, rows)\n        }\n\n        return { rows, flatRows, rowsById }\n      },\n      {\n        key: 'getRowModel',\n        debug: () => instance.options.debugAll ?? instance.options.debugTable,\n        onChange: () => {\n          instance._notifyRowSelectionReset()\n          instance._notifyFiltersReset()\n        },\n      }\n    ),\n\n    // The final calls start at the bottom of the model,\n    // expanded rows, which then work their way up\n\n    getRowModel: () => {\n      return instance.getPaginationRowModel()\n    },\n\n    getRow: (id: string) => {\n      const row = instance.getRowModel().rowsById[id]\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`getRow expected an ID, but got ${id}`)\n        }\n        throw new Error()\n      }\n\n      return row\n    },\n\n    getCell: (rowId: string, columnId: string) => {\n      const row = instance.getRow(rowId)\n\n      if (!row) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(`[React Table] could not find row with id ${rowId}`)\n        }\n        throw new Error()\n      }\n\n      const cell = row.getAllCellsByColumnId()[columnId]\n\n      if (!cell) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `[React Table] could not find cell ${columnId} in row ${rowId}`\n          )\n        }\n        throw new Error()\n      }\n\n      return cell\n    },\n\n    getTableProps: userProps => {\n      return propGetter(\n        {\n          role: 'table',\n        },\n        userProps\n      )\n    },\n\n    getTableBodyProps: userProps => {\n      return propGetter(\n        {\n          role: 'rowgroup',\n        },\n        userProps\n      )\n    },\n\n    getRowProps: (rowId, userProps) => {\n      const row = instance.getRow(rowId)\n      if (!row) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: row.id,\n          role: 'row',\n        },\n        userProps\n      )\n    },\n\n    getCellProps: (rowId, columnId, userProps) => {\n      const cell = instance.getCell(rowId, columnId)\n\n      if (!cell) {\n        return\n      }\n\n      return propGetter(\n        {\n          key: cell.id,\n          role: 'gridcell',\n        },\n        userProps\n      )\n    },\n\n    getTableWidth: () =>\n      instance.getHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getLeftTableWidth: () =>\n      instance.getLeftHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getCenterTableWidth: () =>\n      instance.getCenterHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n    getRightTableWidth: () =>\n      instance.getRightHeaderGroups()[0]?.headers.reduce((sum, header) => {\n        return sum + header.getWidth()\n      }, 0) ?? 0,\n  }\n\n  instance = Object.assign(instance, finalInstance)\n\n  return instance\n}\n","import { CustomFilterTypes } from './features/Filters'\nimport { CustomAggregationTypes } from './features/Grouping'\nimport { CustomSortingTypes } from './features/Sorting'\nimport {\n  ColumnDef,\n  AccessorFn,\n  DefaultGenerics,\n  PartialGenerics,\n  _NonGenerated,\n} from './types'\nimport { Overwrite, PartialKeys } from './utils'\n\nexport type CreatTableFactory<TGenerics extends Partial<DefaultGenerics>> = <\n  TRow\n>() => TableFactory<Overwrite<TGenerics, { Row: TRow }>>\n\nexport type CreateTableFactoryOptions<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n> = {\n  filterFns?: TFilterFns\n  sortingFns?: TSortingFns\n  aggregationFns?: TAggregationFns\n}\n\nexport function createTableFactory<\n  TFilterFns extends CustomFilterTypes<any>,\n  TSortingFns extends CustomSortingTypes<any>,\n  TAggregationFns extends CustomAggregationTypes<any>\n>(\n  opts: CreateTableFactoryOptions<TFilterFns, TSortingFns, TAggregationFns>\n): CreatTableFactory<\n  Overwrite<\n    PartialGenerics,\n    {\n      FilterFns: TFilterFns\n      SortingFns: TSortingFns\n      AggregationFns: TAggregationFns\n    }\n  >\n> {\n  return () => _createTable(undefined, undefined, opts)\n}\n\nexport type TableFactory<TGenerics extends Partial<DefaultGenerics>> = {\n  __options: CreateTableFactoryOptions<any, any, any>\n  createColumns: (columns: ColumnDef<TGenerics>[]) => ColumnDef<TGenerics>[]\n  createGroup: (\n    column: Overwrite<\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            header: string\n            id?: string\n          }\n        >\n      | Overwrite<\n          _NonGenerated<ColumnDef<TGenerics>>,\n          {\n            id: string\n            header?: string | ColumnDef<TGenerics>['header']\n          }\n        >,\n      { accessorFn?: never; accessorKey?: never }\n    >\n  ) => ColumnDef<TGenerics>\n  createDisplayColumn: (\n    column: PartialKeys<\n      _NonGenerated<ColumnDef<TGenerics>>,\n      'accessorFn' | 'accessorKey'\n    >\n  ) => ColumnDef<TGenerics>\n  createDataColumn: <\n    TAccessor extends AccessorFn<TGenerics['Row']> | keyof TGenerics['Row']\n  >(\n    accessor: TAccessor,\n    column: Overwrite<\n      TAccessor extends (...args: any[]) => any\n        ? // Accessor Fn\n          _NonGenerated<ColumnDef<TGenerics>>\n        : TAccessor extends keyof TGenerics['Row']\n        ? // Accessor Key\n          Overwrite<\n            _NonGenerated<ColumnDef<TGenerics>>,\n            {\n              id?: string\n            }\n          >\n        : never,\n      {\n        accessorFn?: never\n        accessorKey?: never\n      }\n    >\n  ) => ColumnDef<TGenerics>\n}\n\nexport function createTable<TRow>() {\n  return _createTable<Overwrite<PartialGenerics, { Row: TRow }>>()\n}\n\nfunction _createTable<TGenerics extends PartialGenerics>(\n  _?: undefined,\n  __?: undefined,\n  __options?: CreateTableFactoryOptions<any, any, any>\n): TableFactory<TGenerics> {\n  return {\n    __options: __options || {},\n    createColumns: columns => columns,\n    createDisplayColumn: column => column as any,\n    createGroup: column => column as any,\n    createDataColumn: (accessor, column): any => {\n      column = {\n        ...column,\n        id: column.id,\n      }\n\n      if (typeof accessor === 'string') {\n        return {\n          ...column,\n          id: column.id ?? accessor,\n          accessorKey: accessor,\n        }\n      }\n\n      if (typeof accessor === 'function') {\n        return {\n          ...column,\n          accessorFn: accessor,\n        }\n      }\n\n      throw new Error('Invalid accessor')\n    },\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function columnFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const columnFilters = instance.getState().columnFilters\n\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterRows = (rowsToFilter: Row<TGenerics>[], depth: number) => {\n    columnFilters.forEach(({ id: columnId, value: filterValue }) => {\n      // Find the columnFilters column\n      const column = instance.getColumn(columnId)\n\n      if (!column) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `React-Table: Could not find a column with id: ${columnId}`\n          )\n        }\n        throw new Error()\n      }\n\n      if (depth === 0) {\n        const preFilteredRows = [...rowsToFilter]\n        column.getPreFilteredRows = () => preFilteredRows\n      }\n\n      const filterFn = instance.getColumnFilterFn(column.id)\n\n      if (!filterFn) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.warn(\n            `Could not find a valid 'column.filterType' for column with the ID: ${column.id}.`\n          )\n        }\n        return\n      }\n\n      // Pass the rows, id, filterValue and column to the filterFn\n      // to get the filtered rows back\n      rowsToFilter = filterFn(rowsToFilter, [columnId], filterValue)\n    })\n\n    return rowsToFilter\n  }\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterRows(rowsToFilter, depth)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterRows(rowsToFilter, depth)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function globalFilterRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const globalFilter = instance.getState().globalFilter\n  const newFilteredFlatRows: Row<TGenerics>[] = []\n  const newFilteredRowsById: Record<string, Row<TGenerics>> = {}\n\n  const filterFromChildrenUp = instance.options.filterFromChildrenUp\n\n  const filterFn = instance.getGlobalFilterFn()\n\n  if (!filterFn) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(`Could not find a valid 'globalFilterType'`)\n    }\n    return rowModel\n  }\n\n  const filterableColumns = instance\n    .getAllLeafColumns()\n    .filter(column => column.getCanGlobalFilter())\n\n  const filterableColumnIds = filterableColumns.map(d => d.id)\n\n  if (filterFromChildrenUp) {\n    const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n      // Filter from children up\n      rowsToFilter = rowsToFilter.filter(row => {\n        if (!row.subRows?.length) {\n          return true\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n\n        return row.subRows.length\n      })\n\n      rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n      // Apply the filter to any subRows\n      rowsToFilter.forEach(row => {\n        newFilteredFlatRows.push(row)\n        newFilteredRowsById[row.id] = row\n      })\n\n      return rowsToFilter\n    }\n\n    return {\n      rows: recurseFilterRows(rowModel.rows),\n      flatRows: newFilteredFlatRows,\n      rowsById: newFilteredRowsById,\n    }\n  }\n\n  // Filters top level and nested rows\n  const recurseFilterRows = (rowsToFilter: Row<TGenerics>[], depth = 0) => {\n    // Filter from parents downward\n    rowsToFilter = filterFn(rowsToFilter, filterableColumnIds, globalFilter)\n\n    // Apply the filter to any subRows\n    // We technically could do this recursively in the above loop,\n    // but that would severely hinder the API for the user, since they\n    // would be required to do that recursion in some scenarios\n    rowsToFilter.forEach(row => {\n      newFilteredFlatRows.push(row)\n      newFilteredRowsById[row.id] = row\n\n      if (!filterFromChildrenUp) {\n        if (!row.subRows?.length) {\n          return\n        }\n\n        row.subRows = recurseFilterRows(row.subRows, depth + 1)\n      }\n    })\n\n    return rowsToFilter\n  }\n\n  return {\n    rows: recurseFilterRows(rowModel.rows),\n    flatRows: newFilteredFlatRows,\n    rowsById: newFilteredRowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { SortingFn } from '../features/Sorting'\n\nexport function sortRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const sortingState = instance.getState().sorting\n\n  const sortedFlatRows: Row<TGenerics>[] = []\n\n  // Filter out sortings that correspond to non existing columns\n  const availableSorting = sortingState.filter(sort =>\n    instance.getColumnCanSort(sort.id)\n  )\n\n  const columnInfoById: Record<\n    string,\n    {\n      sortUndefined?: false | -1 | 1\n      invertSorting?: boolean\n      sortingFn: SortingFn<TGenerics>\n    }\n  > = {}\n\n  availableSorting.forEach(sortEntry => {\n    const column = instance.getColumn(sortEntry.id)!\n\n    columnInfoById[sortEntry.id] = {\n      sortUndefined: column.sortUndefined,\n      invertSorting: column.invertSorting,\n      sortingFn: instance.getColumnSortingFn(sortEntry.id)!,\n    }\n  })\n\n  const sortData = (rows: Row<TGenerics>[]) => {\n    // This will also perform a stable sorting using the row index\n    // if needed.\n    const sortedData = rows.slice()\n\n    sortedData.sort((rowA, rowB) => {\n      for (let i = 0; i < availableSorting.length; i += 1) {\n        const sortEntry = availableSorting[i]!\n        const columnInfo = columnInfoById[sortEntry.id]!\n        const isDesc = sortEntry?.desc ?? false\n\n        if (columnInfo.sortUndefined) {\n          const aValue = rowA.values[sortEntry.id]\n          const bValue = rowB.values[sortEntry.id]\n\n          const aUndefined = typeof aValue === 'undefined'\n          const bUndefined = typeof bValue === 'undefined'\n\n          if (aUndefined || bUndefined) {\n            return aUndefined && bUndefined ? 0 : aUndefined ? 1 : -1\n          }\n        }\n\n        // This function should always return in ascending order\n        let sortInt = columnInfo.sortingFn(rowA, rowB, sortEntry.id)\n\n        if (sortInt !== 0) {\n          if (isDesc) {\n            sortInt *= -1\n          }\n\n          if (columnInfo.invertSorting) {\n            sortInt *= -1\n          }\n\n          return sortInt\n        }\n      }\n\n      return rowA.index - rowB.index\n    })\n\n    // If there are sub-rows, sort them\n    sortedData.forEach(row => {\n      sortedFlatRows.push(row)\n      if (!row.subRows || row.subRows.length <= 1) {\n        return\n      }\n      row.subRows = sortData(row.subRows)\n    })\n\n    return sortedData\n  }\n\n  return {\n    rows: sortData(rowModel.rows),\n    flatRows: sortedFlatRows,\n    rowsById: rowModel.rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\nimport { flattenBy } from '../utils'\n\nexport function groupRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const groupingState = instance.getState().grouping\n  // Filter the grouping list down to columns that exist\n  const existingGrouping = groupingState.filter(columnId =>\n    instance.getColumn(columnId)\n  )\n\n  // Find the columns that can or are aggregating\n  // Uses each column to aggregate rows into a single value\n  const aggregateRowsToValues = (\n    leafRows: Row<TGenerics>[],\n    groupedRows: Row<TGenerics>[],\n    depth: number\n  ) => {\n    const values: Record<string, unknown> = {}\n\n    instance.getAllLeafColumns().forEach(column => {\n      // Don't aggregate columns that are in the grouping\n      if (existingGrouping.includes(column.id)) {\n        values[column.id] = groupedRows[0]\n          ? groupedRows[0].values[column.id]\n          : null\n        return\n      }\n\n      // Aggregate the values\n      const aggregateFn = instance.getColumnAggregationFn(column.id)\n\n      if (aggregateFn) {\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            columnValue = column.aggregateValue(columnValue)\n          }\n\n          return columnValue\n        })\n\n        values[column.id] = aggregateFn(leafValues, groupedValues)\n      } else if (column.aggregationType) {\n        console.info({ column })\n        throw new Error(\n          process.env.NODE_ENV !== 'production'\n            ? `React Table: Invalid column.aggregateType option for column listed above`\n            : ''\n        )\n      } else {\n        values[column.id] = null\n      }\n    })\n\n    return values\n  }\n\n  const groupedFlatRows: Row<TGenerics>[] = []\n  const groupedRowsById: Record<string, Row<TGenerics>> = {}\n  // const onlyGroupedFlatRows: Row[] = [];\n  // const onlyGroupedRowsById: Record<RowId, Row> = {};\n  // const nonGroupedFlatRows: Row[] = [];\n  // const nonGroupedRowsById: Record<RowId, Row> = {};\n\n  // Recursively group the data\n  const groupUpRecursively = (\n    rows: Row<TGenerics>[],\n    depth = 0,\n    parentId: string\n  ) => {\n    // This is the last level, just return the rows\n    if (depth === existingGrouping.length) {\n      return rows\n    }\n\n    const columnId = existingGrouping[depth]!\n\n    // Group the rows together for this level\n    const rowGroupsMap = groupBy(rows, columnId)\n\n    // Peform aggregations for each group\n    const aggregatedGroupedRows = Array.from(rowGroupsMap.entries()).map(\n      ([groupingValue, groupedRows], index) => {\n        let id = `${columnId}:${groupingValue}`\n        id = parentId ? `${parentId}>${id}` : id\n\n        // First, Recurse to group sub rows before aggregation\n        const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n        // Flatten the leaf rows of the rows in this group\n        const leafRows = depth\n          ? flattenBy(groupedRows, row => row.leafRows)\n          : groupedRows\n\n        const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n        const row = instance.createRow(id, undefined, index, depth, values)\n\n        Object.assign(row, {\n          groupingColumnId: columnId,\n          groupingValue,\n          subRows,\n          leafRows,\n        })\n\n        subRows.forEach(subRow => {\n          groupedFlatRows.push(subRow)\n          groupedRowsById[subRow.id] = subRow\n          // if (subRow.getIsGrouped?.()) {\n          //   onlyGroupedFlatRows.push(subRow);\n          //   onlyGroupedRowsById[subRow.id] = subRow;\n          // } else {\n          //   nonGroupedFlatRows.push(subRow);\n          //   nonGroupedRowsById[subRow.id] = subRow;\n          // }\n        })\n\n        return row\n      }\n    )\n\n    return aggregatedGroupedRows\n  }\n\n  const groupedRows = groupUpRecursively(sortedRowModel.rows, 0, '')\n\n  groupedRows.forEach(subRow => {\n    groupedFlatRows.push(subRow)\n    groupedRowsById[subRow.id] = subRow\n    // if (subRow.getIsGrouped?.()) {\n    //   onlyGroupedFlatRows.push(subRow);\n    //   onlyGroupedRowsById[subRow.id] = subRow;\n    // } else {\n    //   nonGroupedFlatRows.push(subRow);\n    //   nonGroupedRowsById[subRow.id] = subRow;\n    // }\n  })\n\n  return {\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n  }\n}\n\nfunction groupBy<TGenerics extends PartialGenerics>(\n  rows: Row<TGenerics>[],\n  columnId: string\n) {\n  const groupMap = new Map<any, Row<TGenerics>[]>()\n\n  return rows.reduce((map, row) => {\n    const resKey = `${row.values[columnId]}`\n    const previous = map.get(resKey)\n    if (!previous) {\n      map.set(resKey, [row])\n    } else {\n      map.set(resKey, [...previous, row])\n    }\n    return map\n  }, groupMap)\n}\n","import { PartialGenerics, TableInstance, Row, RowModel } from '../types'\n\nexport function expandRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  sortedRowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const expandedRows: Row<TGenerics>[] = []\n\n  const { expandSubRows } = instance.options\n\n  const handleRow = (row: Row<TGenerics>) => {\n    expandedRows.push(row)\n\n    if (\n      expandSubRows &&\n      row.subRows?.length &&\n      instance.getIsRowExpanded(row.id)\n    ) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  sortedRowModel.rows.forEach(handleRow)\n\n  return {\n    rows: expandedRows,\n    flatRows: sortedRowModel.flatRows,\n    rowsById: sortedRowModel.rowsById,\n  }\n}\n","import { PartialGenerics, TableInstance, RowModel } from '../types'\nimport { expandRowsFn } from './expandRowsFn'\n\nexport function paginateRowsFn<TGenerics extends PartialGenerics>(\n  instance: TableInstance<TGenerics>,\n  rowModel: RowModel<TGenerics>\n): RowModel<TGenerics> {\n  const { pageSize, pageIndex } = instance.getState().pagination\n  let { rows, flatRows, rowsById } = rowModel\n  const pageStart = pageSize * pageIndex\n  const pageEnd = pageStart + pageSize\n\n  rows = rows.slice(pageStart, pageEnd)\n\n  if (!instance.options.paginateExpandedRows) {\n    return expandRowsFn(instance, {\n      rows,\n      flatRows,\n      rowsById,\n    })\n  }\n\n  return {\n    rows,\n    flatRows,\n    rowsById,\n  }\n}\n"],"names":["functionalUpdate","updater","input","noop","makeStateUpdater","key","instance","setState","old","isFunction","d","Function","flattenBy","arr","getChildren","flat","recurse","subArr","forEach","item","push","children","length","propGetter","initial","getter","memo","getDeps","fn","opts","deps","result","depTime","debug","performance","now","newDeps","depsChanged","some","dep","index","oldResult","resultTime","onChange","depEndTime","Math","round","resultEndTime","resultFpsPercentage","pad","str","num","String","console","info","max","min","map","_","filter","Boolean","reduce","accu","a","b","parent","undefined","flexRender","Comp","props","isReactComponent","React","component","isClassComponent","isExoticComponent","proto","Object","getPrototypeOf","prototype","$$typeof","includes","description","Please_use_the_create_table_column_utilities_to_define_columns","Symbol","Visibility","getInitialState","columnVisibility","getDefaultOptions","onColumnVisibilityChange","getDefaultColumn","defaultIsVisible","createColumn","column","getCanHide","getColumnCanHide","id","getIsVisible","getColumnIsVisible","toggleVisibility","value","toggleColumnVisibility","getToggleVisibilityProps","userProps","type","checked","title","e","target","getInstance","getVisibleFlatColumns","getAllFlatColumns","join","allFlatColumns","options","debugAll","debugColumns","getVisibleLeafColumns","getAllLeafColumns","setColumnVisibility","getState","columnId","toggleAllColumnsVisible","getIsAllColumnsVisible","obj","getColumn","Error","enableHiding","defaultCanHide","getIsSomeColumnsVisible","getToggleAllColumnsVisibilityProps","indeterminate","aggregationTypes","sum","extent","mean","median","unique","uniqueCount","count","_leafValues","childValues","next","leafValues","values","Array","from","Set","size","Grouping","aggregationType","grouping","onGroupingChange","autoResetGrouping","groupedColumnMode","getCanGroup","getColumnCanGroup","getGroupedIndex","getColumnGroupedIndex","getIsGrouped","getColumnIsGrouped","toggleGrouping","toggleColumnGrouping","getToggleGroupingProps","registered","_notifyGroupingReset","autoResetAll","resetGrouping","getColumnAutoAggregationFn","firstRow","getCoreRowModel","flatRows","toString","call","getColumnAggregationFn","userAggregationTypes","getColumnAutoFilterFn","setGrouping","enableGrouping","defaultCanGroup","accessorFn","indexOf","initialState","canGroup","initialProps","onClick","persist","getRowIsGrouped","rowId","getRow","groupingColumnId","getPreGroupedRowModel","getSortedRowModel","getGroupedRowModel","groupRowsFn","rowModel","debugTable","_notifyExpandedReset","createRow","row","createCell","cell","_instance","getIsPlaceholder","getIsAggregated","subRows","orderColumns","leafColumns","nonGroupingColumns","col","groupingColumns","g","find","Ordering","columnOrder","onColumnOrderChange","setColumnOrder","resetColumnOrder","getOrderColumnsFn","columns","orderedColumns","columnOrderCopy","columnsCopy","targetColumnId","shift","foundIndex","findIndex","splice","Pinning","columnPinning","left","right","onColumnPinningChange","getCanPin","getColumnCanPin","getPinnedIndex","getColumnPinnedIndex","getIsPinned","getColumnIsPinned","pin","position","pinColumn","setColumnPinning","resetColumnPinning","columnIds","getLeafColumns","enablePinning","defaultCanPin","leafColumnIds","isLeft","isRight","defaultColumnSizing","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","ColumnSizing","columnSizing","columnSizingInfo","startOffset","startSize","deltaOffset","deltaPercentage","isResizingColumn","columnSizingStart","columnResizeMode","onColumnSizingChange","onColumnSizingInfoChange","setColumnSizing","setColumnSizingInfo","resetColumnSizing","resetHeaderSizeInfo","resetColumnSize","rest","resetHeaderSize","headerId","header","getHeader","getHeaderCanResize","getColumnCanResize","enableResizing","enableColumnResizing","defaultCanResize","getColumnIsResizing","getHeaderIsResizing","getHeaderResizerProps","canResize","getCanResize","onResizeStart","isTouchStartEvent","touches","getWidth","getLeafHeaders","clientX","updateOffset","eventType","clientXPos","newColumnSizing","headerWidth","onMove","onEnd","mouseEvents","moveHandler","upHandler","document","removeEventListener","touchEvents","cancelable","preventDefault","stopPropagation","passiveIfSupported","passiveEventSupported","passive","addEventListener","draggable","role","onMouseDown","onTouchStart","getIsResizing","resetSize","createHeader","getResizerProps","passiveSupported","supported","window","err","Headers","_getAllVisibleCells","getAllCells","debugRows","getVisibleCells","getLeftVisibleCells","getCenterVisibleCells","getRightVisibleCells","center","allCells","leftAndRight","cells","isPlaceholder","placeholderId","depth","subHeaders","colSpan","rowSpan","leafHeaders","recurseHeader","h","getHeaderProps","getFooterProps","renderHeader","renderFooter","footer","assign","getHeaderGroups","getAllColumns","allColumns","leftColumns","rightColumns","centerColumns","headerGroups","buildHeaderGroups","debugHeaders","getCenterHeaderGroups","getLeftHeaderGroups","getRightHeaderGroups","getFooterGroups","reverse","getLeftFooterGroups","getCenterFooterGroups","getRightFooterGroups","getFlatHeaders","headerGroup","headers","getLeftFlatHeaders","getCenterFlatHeaders","getRightFlatHeaders","getCenterLeafHeaders","flatHeaders","getLeftLeafHeaders","getRightLeafHeaders","warn","getHeaderGroupProps","getFooterGroupProps","getTotalWidth","columnsToGroup","headerFamily","maxDepth","findMaxDepth","createHeaderGroup","headersToGroup","getterValue","parentHeaders","headerToGroup","latestParentHeader","isLeafHeader","bottomHeaders","recurseHeadersForSpans","filteredHeaders","childRowSpans","childColSpan","childRowSpan","minChildRowSpan","filterTypes","includesString","includesStringSensitive","equalsString","equalsStringSensitive","arrIncludes","arrIncludesAll","equals","weakEquals","betweenNumberRange","rows","filterValue","search","toLowerCase","autoRemove","val","testFalsey","rowValue","every","unsafeMin","unsafeMax","parsedMin","parseFloat","parsedMax","isNaN","Infinity","temp","filterType","Filters","columnFilters","globalFilter","onColumnFiltersChange","onGlobalFilterChange","autoResetColumnFilters","filterFromChildrenUp","autoResetGlobalFilter","globalFilterType","getColumnCanGlobalFilterFn","getAllCellsByColumnId","getFacetInfo","getPreFilteredRows","preFilteredUniqueValues","Map","preFilteredMinMaxValues","i","has","set","get","getCanColumnFilter","getColumnCanColumnFilter","getCanGlobalFilter","getColumnCanGlobalFilter","getColumnFilterIndex","getIsColumnFiltered","getColumnIsFiltered","getColumnFilterValue","setColumnFilterValue","getPreFilteredUniqueValues","getPreFilteredMinMaxValues","_notifyFiltersReset","resetSorting","resetColumnFilters","resetGlobalFilter","isArray","getGlobalAutoFilterFn","getColumnFilterFn","userFilterTypes","getGlobalFilterFn","setColumnFilters","updateFn","filterFn","shouldAutoRemoveFilter","setGlobalFilter","enableAllFilters","enableColumnFilter","enableFilters","enableColumnFilters","defaultCanFilter","defaultCanColumnFilter","enableGlobalFilter","defaultCanGlobalFilter","previousfilter","newFilter","newFilterObj","getPreFilteredRowModel","getPreColumnFilteredRowModel","getColumnFilteredRowModel","columnFilterRowsFn","columnFiltersFn","columnFilteredRowModel","nonFilteredColumns","getPreGlobalFilteredRowModel","getGlobalFilteredRowModel","globalFilterRowsFn","globalFilterValue","globalFiltersFn","globalFilteredRowModel","_notifySortingReset","reSplitAlphaNumeric","sortTypes","alphanumeric","alphanumericCaseSensitive","text","textCaseSensitive","datetime","basic","rowA","rowB","compareAlphanumeric","aStr","bStr","split","aa","bb","an","parseInt","bn","combo","sort","compareBasic","getTime","Sorting","sortType","sorting","onSortingChange","autoResetSorting","isMultiSortEvent","shiftKey","getCanSort","getColumnCanSort","getCanMultiSort","getColumnCanMultiSort","getSortIndex","getColumnSortIndex","getIsSorted","getColumnIsSorted","toggleSorting","desc","isMulti","toggleColumnSorting","getToggleSortingProps","getColumnAutoSortingFn","firstRows","slice","isString","getColumnAutoSortDir","getColumnSortingFn","userSortTypes","setSorting","multi","existingSorting","existingIndex","hasDescDefined","newSorting","sortAction","sortDescFirst","enableSortingRemoval","enableMultiRemove","maxMultiSortColCount","enableSorting","defaultCanSort","enableMultiSort","columnSort","canSort","getPreSortedRowModel","sortRowsFn","sortingFn","Expanding","expanded","onExpandedChange","autoResetExpanded","getIsRowExpanded","original","expandSubRows","paginateExpandedRows","resetExpanded","setExpanded","toggleRowExpanded","exists","oldExpanded","keys","getRowModel","rowsById","toggleAllRowsExpanded","getIsAllRowsExpanded","getRowCanExpand","enableExpanded","defaultCanExpand","getToggleExpandedProps","canExpand","getToggleAllRowsExpandedProps","getExpandedDepth","rowIds","splitId","getExpandedRowModel","expandRowsFn","_notifyPageIndexReset","getPreExpandedRowModel","toggleExpanded","getIsExpanded","getCanExpand","Pagination","pagination","pageCount","pageIndex","pageSize","onPaginationChange","autoResetPageIndex","resetPageIndex","setPagination","safeUpdater","newState","resetPagination","setPageIndex","maxPageIndex","resetPageSize","setPageSize","topRowIndex","floor","setPageCount","newPageCount","getPageOptions","pageOptions","fill","getCanPreviousPage","getCanNextPage","ceil","getPrePaginationRowModel","previousPage","nextPage","getPaginationRowModel","paginateRowsFn","_pagination","getPageCount","RowSelection","rowSelection","onRowSelectionChange","autoResetRowSelection","enableRowSelection","enableMultiRowSelection","enableSubRowSelection","_notifyRowSelectionReset","resetRowSelection","setRowSelection","toggleAllRowsSelected","getIsAllRowsSelected","preGroupedFlatRows","toggleAllPageRowsSelected","getIsAllPageRowsSelected","mutateRowIsSelected","toggleRowSelected","isSelected","getIsSelected","selectedRowIds","getPreSelectedRowModel","getSelectedRowModel","selectRowsFn","getFilteredSelectedRowModel","getGroupedSelectedRowModel","getRowIsSelected","isRowSelected","getRowIsSomeSelected","getRowCanSelect","getRowCanSelectSubRows","getRowCanMultiSelect","preFilteredFlatRows","isAllRowsSelected","paginationFlatRows","isAllPageRowsSelected","getIsSomeRowsSelected","getIsSomePageRowsSelected","getToggleRowSelectedProps","isSomeSelected","getIsSomeSelected","canSelect","getCanSelect","toggleSelected","getToggleAllRowsSelectedProps","isSomeRowsSelected","getToggleAllPageRowsSelectedProps","isSomePageRowsSelected","getToggleSelectedProps","getCanMultiSelect","newSelectedFlatRows","newSelectedRowsById","recurseRows","selection","allChildrenSelected","someSelected","subRow","features","createTableInstance","defaultOptions","feature","buildOptions","finalInstance","reset","setOptions","getRowId","state","onStateChange","defaultColumn","getColumnDefs","columnDef","accessorKey","originalRow","getColumnWidth","getFlatColumns","flatMap","columnDefs","recurseColumns","getAllFlatColumnsById","flatColumns","acc","columnSize","getCellProps","renderCell","rowIndex","leafRows","getRowProps","data","accessRow","parentRows","getSubRows","originalSubRows","getCell","getTableProps","getTableBodyProps","getTableWidth","getLeftTableWidth","getCenterTableWidth","getRightTableWidth","createTableFactory","_createTable","createTable","__","__options","createColumns","createDisplayColumn","createGroup","createDataColumn","accessor","newFilteredFlatRows","newFilteredRowsById","filterRows","rowsToFilter","preFilteredRows","recurseFilterRows","filterableColumns","filterableColumnIds","sortingState","sortedFlatRows","availableSorting","columnInfoById","sortEntry","sortUndefined","invertSorting","sortData","sortedData","columnInfo","isDesc","aValue","bValue","aUndefined","bUndefined","sortInt","sortedRowModel","groupingState","existingGrouping","aggregateRowsToValues","groupedRows","aggregateFn","groupedValues","columnValue","aggregateValue","groupedFlatRows","groupedRowsById","groupUpRecursively","parentId","rowGroupsMap","groupBy","aggregatedGroupedRows","entries","groupingValue","groupMap","resKey","previous","expandedRows","handleRow","pageStart","pageEnd"],"mappings":"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"}