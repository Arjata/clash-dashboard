{"version":3,"file":"index.production.js","sources":["../../src/index.tsx"],"sourcesContent":["import * as React from 'react'\nexport * from '@tanstack/table-core'\n\nimport {\n  createTableInstance,\n  _NonGenerated,\n  PartialKeys,\n  Options,\n  TableInstance,\n  PartialGenerics,\n  CreateTableFactoryOptions,\n  TableFactory,\n} from '@tanstack/table-core'\n\nexport function useTable<TGenerics extends PartialGenerics>(\n  table: TableFactory<TGenerics>,\n  options: PartialKeys<\n    Omit<Options<TGenerics>, keyof CreateTableFactoryOptions<any, any, any>>,\n    'state' | 'onStateChange'\n  >\n): TableInstance<TGenerics> {\n  // Compose in the generic options to the user options\n  const resolvedOptions = {\n    ...(table.__options ?? {}),\n    state: {}, // Dummy state\n    onStateChange: () => {}, // noop\n    ...options,\n  }\n\n  // Create a new table instance and store it in state\n  const [instance] = React.useState(() =>\n    createTableInstance<TGenerics>(resolvedOptions)\n  )\n\n  // By default, manage table state here using the instance's initial state\n  const [state, setState] = React.useState(() => instance.initialState)\n\n  // Compose the default state above with any user state. This will allow the user\n  // to only control a subset of the state if desired.\n  instance.setOptions(prev => ({\n    ...prev,\n    ...options,\n    state: {\n      ...state,\n      ...options.state,\n    },\n    // Similarly, we'll maintain both our internal state and any user-provided\n    // state.\n    onStateChange: updater => {\n      setState(updater)\n      options.onStateChange?.(updater)\n    },\n  }))\n\n  return instance\n}\n"],"names":["table","options","resolvedOptions","__options","state","onStateChange","instance","React","useState","createTableInstance","initialState","setState","setOptions","prev","updater"],"mappings":";;;;;;;;;;+1BAcO,SACLA,EACAC,SAMMC,gBACAF,EAAMG,aAAa,IACvBC,MAAO,GACPC,cAAe,cACZJ,GAIEK,EAAYC,EAAMC,UAAS,kBAChCC,sBAA+BP,WAIPK,EAAMC,UAAS,kBAAMF,EAASI,gBAAjDN,OAAOO,cAIdL,EAASM,YAAW,SAAAC,eACfA,EACAZ,GACHG,WACKA,EACAH,EAAQG,OAIbC,cAAe,SAAAS,GACbH,EAASG,SACTb,EAAQI,eAARJ,EAAQI,cAAgBS,SAIrBR"}